(() => {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // node_modules/material-components-web/dist/material-components-web.js
  var require_material_components_web = __commonJS({
    "node_modules/material-components-web/dist/material-components-web.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define("material-components-web", [], factory);
        else if (typeof exports === "object")
          exports["mdc"] = factory();
        else
          root["mdc"] = factory();
      })(exports, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
              }
              var module2 = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
              };
              modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
              module2.l = true;
              return module2.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports2, name, getter) {
              if (!__webpack_require__.o(exports2, name)) {
                Object.defineProperty(exports2, name, { enumerable: true, get: getter });
              }
            };
            __webpack_require__.r = function(exports2) {
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
              }
              Object.defineProperty(exports2, "__esModule", { value: true });
            };
            __webpack_require__.t = function(value, mode) {
              if (mode & 1)
                value = __webpack_require__(value);
              if (mode & 8)
                return value;
              if (mode & 4 && typeof value === "object" && value && value.__esModule)
                return value;
              var ns = /* @__PURE__ */ Object.create(null);
              __webpack_require__.r(ns);
              Object.defineProperty(ns, "default", { enumerable: true, value });
              if (mode & 2 && typeof value != "string")
                for (var key in value)
                  __webpack_require__.d(ns, key, function(key2) {
                    return value[key2];
                  }.bind(null, key));
              return ns;
            };
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? (
                /******/
                function getDefault() {
                  return module2["default"];
                }
              ) : (
                /******/
                function getModuleExports() {
                  return module2;
                }
              );
              __webpack_require__.d(getter, "a", getter);
              return getter;
            };
            __webpack_require__.o = function(object, property) {
              return Object.prototype.hasOwnProperty.call(object, property);
            };
            __webpack_require__.p = "";
            return __webpack_require__(__webpack_require__.s = "./packages/material-components-web/index.ts");
          }({
            /***/
            "./packages/material-components-web/index.ts": (
              /*!***************************************************!*\
                !*** ./packages/material-components-web/index.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __importDefault = this && this.__importDefault || function(mod) {
                  return mod && mod.__esModule ? mod : { "default": mod };
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.topAppBar = exports2.tooltip = exports2.textField = exports2.tabScroller = exports2.tabIndicator = exports2.tabBar = exports2.tab = exports2.switchControl = exports2.snackbar = exports2.slider = exports2.select = exports2.segmentedButton = exports2.ripple = exports2.radio = exports2.notchedOutline = exports2.menuSurface = exports2.menu = exports2.list = exports2.linearProgress = exports2.lineRipple = exports2.iconButton = exports2.formField = exports2.floatingLabel = exports2.drawer = exports2.dom = exports2.dialog = exports2.dataTable = exports2.circularProgress = exports2.chips = exports2.checkbox = exports2.base = exports2.banner = exports2.autoInit = void 0;
                var index_1 = __importDefault(__webpack_require__(
                  /*! @material/auto-init/index */
                  "./packages/mdc-auto-init/index.ts"
                ));
                exports2.autoInit = index_1.default;
                var banner = __importStar(__webpack_require__(
                  /*! @material/banner/index */
                  "./packages/mdc-banner/index.ts"
                ));
                exports2.banner = banner;
                var base = __importStar(__webpack_require__(
                  /*! @material/base/index */
                  "./packages/mdc-base/index.ts"
                ));
                exports2.base = base;
                var checkbox = __importStar(__webpack_require__(
                  /*! @material/checkbox/index */
                  "./packages/mdc-checkbox/index.ts"
                ));
                exports2.checkbox = checkbox;
                var chips = __importStar(__webpack_require__(
                  /*! @material/chips/deprecated/index */
                  "./packages/mdc-chips/deprecated/index.ts"
                ));
                exports2.chips = chips;
                var circularProgress = __importStar(__webpack_require__(
                  /*! @material/circular-progress/index */
                  "./packages/mdc-circular-progress/index.ts"
                ));
                exports2.circularProgress = circularProgress;
                var dataTable = __importStar(__webpack_require__(
                  /*! @material/data-table/index */
                  "./packages/mdc-data-table/index.ts"
                ));
                exports2.dataTable = dataTable;
                var dialog = __importStar(__webpack_require__(
                  /*! @material/dialog/index */
                  "./packages/mdc-dialog/index.ts"
                ));
                exports2.dialog = dialog;
                var dom = __importStar(__webpack_require__(
                  /*! @material/dom/index */
                  "./packages/mdc-dom/index.ts"
                ));
                exports2.dom = dom;
                var drawer2 = __importStar(__webpack_require__(
                  /*! @material/drawer/index */
                  "./packages/mdc-drawer/index.ts"
                ));
                exports2.drawer = drawer2;
                var floatingLabel = __importStar(__webpack_require__(
                  /*! @material/floating-label/index */
                  "./packages/mdc-floating-label/index.ts"
                ));
                exports2.floatingLabel = floatingLabel;
                var formField = __importStar(__webpack_require__(
                  /*! @material/form-field/index */
                  "./packages/mdc-form-field/index.ts"
                ));
                exports2.formField = formField;
                var iconButton = __importStar(__webpack_require__(
                  /*! @material/icon-button/index */
                  "./packages/mdc-icon-button/index.ts"
                ));
                exports2.iconButton = iconButton;
                var lineRipple = __importStar(__webpack_require__(
                  /*! @material/line-ripple/index */
                  "./packages/mdc-line-ripple/index.ts"
                ));
                exports2.lineRipple = lineRipple;
                var linearProgress = __importStar(__webpack_require__(
                  /*! @material/linear-progress/index */
                  "./packages/mdc-linear-progress/index.ts"
                ));
                exports2.linearProgress = linearProgress;
                var list = __importStar(__webpack_require__(
                  /*! @material/list/index */
                  "./packages/mdc-list/index.ts"
                ));
                exports2.list = list;
                var menuSurface = __importStar(__webpack_require__(
                  /*! @material/menu-surface/index */
                  "./packages/mdc-menu-surface/index.ts"
                ));
                exports2.menuSurface = menuSurface;
                var menu = __importStar(__webpack_require__(
                  /*! @material/menu/index */
                  "./packages/mdc-menu/index.ts"
                ));
                exports2.menu = menu;
                var notchedOutline = __importStar(__webpack_require__(
                  /*! @material/notched-outline/index */
                  "./packages/mdc-notched-outline/index.ts"
                ));
                exports2.notchedOutline = notchedOutline;
                var radio = __importStar(__webpack_require__(
                  /*! @material/radio/index */
                  "./packages/mdc-radio/index.ts"
                ));
                exports2.radio = radio;
                var ripple = __importStar(__webpack_require__(
                  /*! @material/ripple/index */
                  "./packages/mdc-ripple/index.ts"
                ));
                exports2.ripple = ripple;
                var segmentedButton = __importStar(__webpack_require__(
                  /*! @material/segmented-button/index */
                  "./packages/mdc-segmented-button/index.ts"
                ));
                exports2.segmentedButton = segmentedButton;
                var select = __importStar(__webpack_require__(
                  /*! @material/select/index */
                  "./packages/mdc-select/index.ts"
                ));
                exports2.select = select;
                var slider = __importStar(__webpack_require__(
                  /*! @material/slider/index */
                  "./packages/mdc-slider/index.ts"
                ));
                exports2.slider = slider;
                var snackbar2 = __importStar(__webpack_require__(
                  /*! @material/snackbar/index */
                  "./packages/mdc-snackbar/index.ts"
                ));
                exports2.snackbar = snackbar2;
                var switchControl = __importStar(__webpack_require__(
                  /*! @material/switch/index */
                  "./packages/mdc-switch/index.ts"
                ));
                exports2.switchControl = switchControl;
                var tabBar = __importStar(__webpack_require__(
                  /*! @material/tab-bar/index */
                  "./packages/mdc-tab-bar/index.ts"
                ));
                exports2.tabBar = tabBar;
                var tabIndicator = __importStar(__webpack_require__(
                  /*! @material/tab-indicator/index */
                  "./packages/mdc-tab-indicator/index.ts"
                ));
                exports2.tabIndicator = tabIndicator;
                var tabScroller = __importStar(__webpack_require__(
                  /*! @material/tab-scroller/index */
                  "./packages/mdc-tab-scroller/index.ts"
                ));
                exports2.tabScroller = tabScroller;
                var tab = __importStar(__webpack_require__(
                  /*! @material/tab/index */
                  "./packages/mdc-tab/index.ts"
                ));
                exports2.tab = tab;
                var textField = __importStar(__webpack_require__(
                  /*! @material/textfield/index */
                  "./packages/mdc-textfield/index.ts"
                ));
                exports2.textField = textField;
                var tooltip = __importStar(__webpack_require__(
                  /*! @material/tooltip/index */
                  "./packages/mdc-tooltip/index.ts"
                ));
                exports2.tooltip = tooltip;
                var topAppBar = __importStar(__webpack_require__(
                  /*! @material/top-app-bar/index */
                  "./packages/mdc-top-app-bar/index.ts"
                ));
                exports2.topAppBar = topAppBar;
                index_1.default.register("MDCBanner", banner.MDCBanner);
                index_1.default.register("MDCCheckbox", checkbox.MDCCheckbox);
                index_1.default.register("MDCChip", chips.MDCChip);
                index_1.default.register("MDCChipSet", chips.MDCChipSet);
                index_1.default.register("MDCCircularProgress", circularProgress.MDCCircularProgress);
                index_1.default.register("MDCDataTable", dataTable.MDCDataTable);
                index_1.default.register("MDCDialog", dialog.MDCDialog);
                index_1.default.register("MDCDrawer", drawer2.MDCDrawer);
                index_1.default.register("MDCFloatingLabel", floatingLabel.MDCFloatingLabel);
                index_1.default.register("MDCFormField", formField.MDCFormField);
                index_1.default.register("MDCIconButtonToggle", iconButton.MDCIconButtonToggle);
                index_1.default.register("MDCLineRipple", lineRipple.MDCLineRipple);
                index_1.default.register("MDCLinearProgress", linearProgress.MDCLinearProgress);
                index_1.default.register("MDCList", list.MDCList);
                index_1.default.register("MDCMenu", menu.MDCMenu);
                index_1.default.register("MDCMenuSurface", menuSurface.MDCMenuSurface);
                index_1.default.register("MDCNotchedOutline", notchedOutline.MDCNotchedOutline);
                index_1.default.register("MDCRadio", radio.MDCRadio);
                index_1.default.register("MDCRipple", ripple.MDCRipple);
                index_1.default.register("MDCSegmentedButton", segmentedButton.MDCSegmentedButton);
                index_1.default.register("MDCSelect", select.MDCSelect);
                index_1.default.register("MDCSlider", slider.MDCSlider);
                index_1.default.register("MDCSnackbar", snackbar2.MDCSnackbar);
                index_1.default.register("MDCSwitch", switchControl.MDCSwitch);
                index_1.default.register("MDCTabBar", tabBar.MDCTabBar);
                index_1.default.register("MDCTextField", textField.MDCTextField);
                index_1.default.register("MDCTooltip", tooltip.MDCTooltip);
                index_1.default.register("MDCTopAppBar", topAppBar.MDCTopAppBar);
              }
            ),
            /***/
            "./packages/mdc-animation/animationframe.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-animation/animationframe.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.AnimationFrame = void 0;
                var AnimationFrame = (
                  /** @class */
                  function() {
                    function AnimationFrame2() {
                      this.rafIDs = /* @__PURE__ */ new Map();
                    }
                    AnimationFrame2.prototype.request = function(key, callback) {
                      var _this = this;
                      this.cancel(key);
                      var frameID = requestAnimationFrame(function(frame) {
                        _this.rafIDs.delete(key);
                        callback(frame);
                      });
                      this.rafIDs.set(key, frameID);
                    };
                    AnimationFrame2.prototype.cancel = function(key) {
                      var rafID = this.rafIDs.get(key);
                      if (rafID) {
                        cancelAnimationFrame(rafID);
                        this.rafIDs.delete(key);
                      }
                    };
                    AnimationFrame2.prototype.cancelAll = function() {
                      var _this = this;
                      this.rafIDs.forEach(function(_, key) {
                        _this.cancel(key);
                      });
                    };
                    AnimationFrame2.prototype.getQueue = function() {
                      var queue = [];
                      this.rafIDs.forEach(function(_, key) {
                        queue.push(key);
                      });
                      return queue;
                    };
                    return AnimationFrame2;
                  }()
                );
                exports2.AnimationFrame = AnimationFrame;
              }
            ),
            /***/
            "./packages/mdc-animation/util.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-animation/util.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.getCorrectEventName = exports2.getCorrectPropertyName = void 0;
                var cssPropertyNameMap = {
                  animation: {
                    prefixed: "-webkit-animation",
                    standard: "animation"
                  },
                  transform: {
                    prefixed: "-webkit-transform",
                    standard: "transform"
                  },
                  transition: {
                    prefixed: "-webkit-transition",
                    standard: "transition"
                  }
                };
                var jsEventTypeMap = {
                  animationend: {
                    cssProperty: "animation",
                    prefixed: "webkitAnimationEnd",
                    standard: "animationend"
                  },
                  animationiteration: {
                    cssProperty: "animation",
                    prefixed: "webkitAnimationIteration",
                    standard: "animationiteration"
                  },
                  animationstart: {
                    cssProperty: "animation",
                    prefixed: "webkitAnimationStart",
                    standard: "animationstart"
                  },
                  transitionend: {
                    cssProperty: "transition",
                    prefixed: "webkitTransitionEnd",
                    standard: "transitionend"
                  }
                };
                function isWindow(windowObj) {
                  return Boolean(windowObj.document) && typeof windowObj.document.createElement === "function";
                }
                function getCorrectPropertyName(windowObj, cssProperty) {
                  if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
                    var el = windowObj.document.createElement("div");
                    var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;
                    var isStandard = standard in el.style;
                    return isStandard ? standard : prefixed;
                  }
                  return cssProperty;
                }
                exports2.getCorrectPropertyName = getCorrectPropertyName;
                function getCorrectEventName(windowObj, eventType) {
                  if (isWindow(windowObj) && eventType in jsEventTypeMap) {
                    var el = windowObj.document.createElement("div");
                    var _a = jsEventTypeMap[eventType], standard = _a.standard, prefixed = _a.prefixed, cssProperty = _a.cssProperty;
                    var isStandard = cssProperty in el.style;
                    return isStandard ? standard : prefixed;
                  }
                  return eventType;
                }
                exports2.getCorrectEventName = getCorrectEventName;
              }
            ),
            /***/
            "./packages/mdc-auto-init/constants.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-auto-init/constants.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = void 0;
                exports2.strings = {
                  AUTO_INIT_ATTR: "data-mdc-auto-init",
                  AUTO_INIT_STATE_ATTR: "data-mdc-auto-init-state",
                  INITIALIZED_STATE: "initialized"
                };
              }
            ),
            /***/
            "./packages/mdc-auto-init/index.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-auto-init/index.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.mdcAutoInit = void 0;
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-auto-init/constants.ts"
                );
                var AUTO_INIT_ATTR = constants_1.strings.AUTO_INIT_ATTR, AUTO_INIT_STATE_ATTR = constants_1.strings.AUTO_INIT_STATE_ATTR, INITIALIZED_STATE = constants_1.strings.INITIALIZED_STATE;
                var registry = {};
                var CONSOLE_WARN = console.warn.bind(console);
                function emit(evtType, evtData, shouldBubble) {
                  if (shouldBubble === void 0) {
                    shouldBubble = false;
                  }
                  var evt;
                  if (typeof CustomEvent === "function") {
                    evt = new CustomEvent(evtType, {
                      bubbles: shouldBubble,
                      detail: evtData
                    });
                  } else {
                    evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(evtType, shouldBubble, false, evtData);
                  }
                  document.dispatchEvent(evt);
                }
                function mdcAutoInit(root) {
                  var e_1, _a;
                  if (root === void 0) {
                    root = document;
                  }
                  var components = [];
                  var nodes = [].slice.call(root.querySelectorAll("[" + AUTO_INIT_ATTR + "]"));
                  nodes = nodes.filter(function(node2) {
                    return node2.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE;
                  });
                  try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                      var node = nodes_1_1.value;
                      var ctorName = node.getAttribute(AUTO_INIT_ATTR);
                      if (!ctorName) {
                        throw new Error("(mdc-auto-init) Constructor name must be given.");
                      }
                      var Constructor = registry[ctorName];
                      if (typeof Constructor !== "function") {
                        throw new Error("(mdc-auto-init) Could not find constructor in registry for " + ctorName);
                      }
                      var component = Constructor.attachTo(node);
                      Object.defineProperty(node, ctorName, {
                        configurable: true,
                        enumerable: false,
                        value: component,
                        writable: false
                      });
                      components.push(component);
                      node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);
                    }
                  } catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                  } finally {
                    try {
                      if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return))
                        _a.call(nodes_1);
                    } finally {
                      if (e_1)
                        throw e_1.error;
                    }
                  }
                  emit("MDCAutoInit:End", {});
                  return components;
                }
                exports2.mdcAutoInit = mdcAutoInit;
                mdcAutoInit.register = function(componentName, Constructor, warn) {
                  if (warn === void 0) {
                    warn = CONSOLE_WARN;
                  }
                  if (typeof Constructor !== "function") {
                    throw new Error("(mdc-auto-init) Invalid Constructor value: " + Constructor + ". Expected function.");
                  }
                  var registryValue = registry[componentName];
                  if (registryValue) {
                    warn("(mdc-auto-init) Overriding registration for " + componentName + " with " + Constructor + ". Was: " + registryValue);
                  }
                  registry[componentName] = Constructor;
                };
                mdcAutoInit.deregister = function(componentName) {
                  delete registry[componentName];
                };
                mdcAutoInit.deregisterAll = function() {
                  var e_2, _a;
                  try {
                    for (var _b = __values(Object.keys(registry)), _c = _b.next(); !_c.done; _c = _b.next()) {
                      var componentName = _c.value;
                      mdcAutoInit.deregister(componentName);
                    }
                  } catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                  } finally {
                    try {
                      if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                    } finally {
                      if (e_2)
                        throw e_2.error;
                    }
                  }
                };
                exports2.default = mdcAutoInit;
              }
            ),
            /***/
            "./packages/mdc-banner/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-banner/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-banner/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-banner/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCBanner = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var focus_trap_1 = __webpack_require__(
                  /*! @material/dom/focus-trap */
                  "./packages/mdc-dom/focus-trap.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-banner/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-banner/foundation.ts"
                );
                var MDCBanner = (
                  /** @class */
                  function(_super) {
                    __extends(MDCBanner2, _super);
                    function MDCBanner2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCBanner2.attachTo = function(root) {
                      return new MDCBanner2(root);
                    };
                    MDCBanner2.prototype.initialize = function(focusTrapFactory) {
                      var _this = this;
                      if (focusTrapFactory === void 0) {
                        focusTrapFactory = function focusTrapFactory2(el, focusOptions) {
                          return new focus_trap_1.FocusTrap(el, focusOptions);
                        };
                      }
                      this.contentEl = this.root.querySelector(constants_1.selectors.CONTENT);
                      this.textEl = this.root.querySelector(constants_1.selectors.TEXT);
                      this.primaryActionEl = this.root.querySelector(constants_1.selectors.PRIMARY_ACTION);
                      this.secondaryActionEl = this.root.querySelector(constants_1.selectors.SECONDARY_ACTION);
                      this.focusTrapFactory = focusTrapFactory;
                      this.handleContentClick = function(evt) {
                        var target = evt.target;
                        if (ponyfill_1.closest(target, constants_1.selectors.PRIMARY_ACTION)) {
                          _this.foundation.handlePrimaryActionClick();
                        } else if (ponyfill_1.closest(target, constants_1.selectors.SECONDARY_ACTION)) {
                          _this.foundation.handleSecondaryActionClick();
                        }
                      };
                    };
                    MDCBanner2.prototype.initialSyncWithDOM = function() {
                      this.registerContentClickHandler(this.handleContentClick);
                      this.focusTrap = this.focusTrapFactory(this.root, { initialFocusEl: this.primaryActionEl });
                    };
                    MDCBanner2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.deregisterContentClickHandler(this.handleContentClick);
                    };
                    MDCBanner2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCBanner2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCBanner2.prototype.close = function(reason) {
                      this.foundation.close(reason);
                    };
                    MDCBanner2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        getContentHeight: function getContentHeight() {
                          return _this.contentEl.offsetHeight;
                        },
                        notifyClosed: function notifyClosed(reason) {
                          _this.emit(constants_1.events.CLOSED, { reason });
                        },
                        notifyClosing: function notifyClosing(reason) {
                          _this.emit(constants_1.events.CLOSING, { reason });
                        },
                        notifyOpened: function notifyOpened() {
                          _this.emit(constants_1.events.OPENED, {});
                        },
                        notifyOpening: function notifyOpening() {
                          _this.emit(constants_1.events.OPENING, {});
                        },
                        notifyActionClicked: function notifyActionClicked(action) {
                          _this.emit(constants_1.events.ACTION_CLICKED, { action });
                        },
                        releaseFocus: function releaseFocus() {
                          _this.focusTrap.releaseFocus();
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        setStyleProperty: function setStyleProperty(propertyName, value) {
                          _this.root.style.setProperty(propertyName, value);
                        },
                        trapFocus: function trapFocus() {
                          _this.focusTrap.trapFocus();
                        }
                      };
                      return new foundation_1.MDCBannerFoundation(adapter);
                    };
                    Object.defineProperty(MDCBanner2.prototype, "isOpen", {
                      get: function get() {
                        return this.foundation.isOpen();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCBanner2.prototype.getText = function() {
                      return this.textEl.textContent || "";
                    };
                    MDCBanner2.prototype.setText = function(text) {
                      this.textEl.textContent = text;
                    };
                    MDCBanner2.prototype.getPrimaryActionText = function() {
                      return this.primaryActionEl.textContent || "";
                    };
                    MDCBanner2.prototype.setPrimaryActionText = function(actionButtonText) {
                      this.primaryActionEl.textContent = actionButtonText;
                    };
                    MDCBanner2.prototype.getSecondaryActionText = function() {
                      return this.secondaryActionEl ? this.secondaryActionEl.textContent || "" : null;
                    };
                    MDCBanner2.prototype.setSecondaryActionText = function(actionButtonText) {
                      if (this.secondaryActionEl) {
                        this.secondaryActionEl.textContent = actionButtonText;
                      }
                    };
                    MDCBanner2.prototype.registerContentClickHandler = function(handler) {
                      this.contentEl.addEventListener("click", handler);
                    };
                    MDCBanner2.prototype.deregisterContentClickHandler = function(handler) {
                      this.contentEl.removeEventListener("click", handler);
                    };
                    return MDCBanner2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCBanner = MDCBanner;
              }
            ),
            /***/
            "./packages/mdc-banner/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-banner/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.Action = exports2.CloseReason = exports2.selectors = exports2.events = exports2.numbers = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  CLOSING: "mdc-banner--closing",
                  OPEN: "mdc-banner--open",
                  OPENING: "mdc-banner--opening"
                };
                exports2.numbers = {
                  BANNER_ANIMATION_CLOSE_TIME_MS: 250,
                  BANNER_ANIMATION_OPEN_TIME_MS: 300
                };
                exports2.events = {
                  CLOSED: "MDCBanner:closed",
                  CLOSING: "MDCBanner:closing",
                  OPENED: "MDCBanner:opened",
                  OPENING: "MDCBanner:opening",
                  ACTION_CLICKED: "MDCBanner:actionClicked"
                };
                exports2.selectors = {
                  CONTENT: ".mdc-banner__content",
                  PRIMARY_ACTION: ".mdc-banner__primary-action",
                  SECONDARY_ACTION: ".mdc-banner__secondary-action",
                  TEXT: ".mdc-banner__text"
                };
                var CloseReason;
                (function(CloseReason2) {
                  CloseReason2[CloseReason2["PRIMARY"] = 0] = "PRIMARY";
                  CloseReason2[CloseReason2["SECONDARY"] = 1] = "SECONDARY";
                  CloseReason2[CloseReason2["UNSPECIFIED"] = 2] = "UNSPECIFIED";
                })(CloseReason = exports2.CloseReason || (exports2.CloseReason = {}));
                var Action;
                (function(Action2) {
                  Action2[Action2["PRIMARY"] = 0] = "PRIMARY";
                  Action2[Action2["SECONDARY"] = 1] = "SECONDARY";
                  Action2[Action2["UNKNOWN"] = 2] = "UNKNOWN";
                })(Action = exports2.Action || (exports2.Action = {}));
              }
            ),
            /***/
            "./packages/mdc-banner/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-banner/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCBannerFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-banner/constants.ts"
                );
                var OPENING = constants_1.cssClasses.OPENING, OPEN = constants_1.cssClasses.OPEN, CLOSING = constants_1.cssClasses.CLOSING;
                var MDCBannerFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCBannerFoundation2, _super);
                    function MDCBannerFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCBannerFoundation2.defaultAdapter), adapter)) || this;
                      _this.isOpened = false;
                      _this.animationFrame = 0;
                      _this.animationTimer = 0;
                      return _this;
                    }
                    Object.defineProperty(MDCBannerFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          getContentHeight: function getContentHeight() {
                            return 0;
                          },
                          notifyClosed: function notifyClosed() {
                            return void 0;
                          },
                          notifyClosing: function notifyClosing() {
                            return void 0;
                          },
                          notifyOpened: function notifyOpened() {
                            return void 0;
                          },
                          notifyOpening: function notifyOpening() {
                            return void 0;
                          },
                          notifyActionClicked: function notifyActionClicked() {
                            return void 0;
                          },
                          releaseFocus: function releaseFocus() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          setStyleProperty: function setStyleProperty() {
                            return void 0;
                          },
                          trapFocus: function trapFocus() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCBannerFoundation2.prototype.destroy = function() {
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = 0;
                      clearTimeout(this.animationTimer);
                      this.animationTimer = 0;
                    };
                    MDCBannerFoundation2.prototype.open = function() {
                      var _this = this;
                      this.isOpened = true;
                      this.adapter.notifyOpening();
                      this.adapter.removeClass(CLOSING);
                      this.adapter.addClass(OPENING);
                      var contentHeight = this.adapter.getContentHeight();
                      this.animationFrame = requestAnimationFrame(function() {
                        _this.adapter.addClass(OPEN);
                        _this.adapter.setStyleProperty("height", contentHeight + "px");
                        _this.animationTimer = setTimeout(function() {
                          _this.handleAnimationTimerEnd();
                          _this.adapter.trapFocus();
                          _this.adapter.notifyOpened();
                        }, constants_1.numbers.BANNER_ANIMATION_OPEN_TIME_MS);
                      });
                    };
                    MDCBannerFoundation2.prototype.close = function(reason) {
                      var _this = this;
                      if (!this.isOpened) {
                        return;
                      }
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = 0;
                      this.isOpened = false;
                      this.adapter.notifyClosing(reason);
                      this.adapter.addClass(CLOSING);
                      this.adapter.setStyleProperty("height", "0");
                      this.adapter.removeClass(OPEN);
                      this.adapter.removeClass(OPENING);
                      clearTimeout(this.animationTimer);
                      this.animationTimer = setTimeout(function() {
                        _this.adapter.releaseFocus();
                        _this.handleAnimationTimerEnd();
                        _this.adapter.notifyClosed(reason);
                      }, constants_1.numbers.BANNER_ANIMATION_CLOSE_TIME_MS);
                    };
                    MDCBannerFoundation2.prototype.isOpen = function() {
                      return this.isOpened;
                    };
                    MDCBannerFoundation2.prototype.handlePrimaryActionClick = function(disableAutoClose) {
                      if (disableAutoClose === void 0) {
                        disableAutoClose = false;
                      }
                      if (disableAutoClose) {
                        this.adapter.notifyActionClicked(
                          0
                          /* PRIMARY */
                        );
                      } else {
                        this.close(constants_1.CloseReason.PRIMARY);
                      }
                    };
                    MDCBannerFoundation2.prototype.handleSecondaryActionClick = function(disableAutoClose) {
                      if (disableAutoClose === void 0) {
                        disableAutoClose = false;
                      }
                      if (disableAutoClose) {
                        this.adapter.notifyActionClicked(
                          1
                          /* SECONDARY */
                        );
                      } else {
                        this.close(constants_1.CloseReason.SECONDARY);
                      }
                    };
                    MDCBannerFoundation2.prototype.layout = function() {
                      var contentHeight = this.adapter.getContentHeight();
                      this.adapter.setStyleProperty("height", contentHeight + "px");
                    };
                    MDCBannerFoundation2.prototype.handleAnimationTimerEnd = function() {
                      this.animationTimer = 0;
                      this.adapter.removeClass(OPENING);
                      this.adapter.removeClass(CLOSING);
                    };
                    return MDCBannerFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCBannerFoundation = MDCBannerFoundation;
              }
            ),
            /***/
            "./packages/mdc-banner/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-banner/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-banner/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-banner/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-banner/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-banner/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-base/component.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-base/component.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                var __spreadArray = this && this.__spreadArray || function(to, from) {
                  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
                    to[j] = from[i];
                  }
                  return to;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCComponent = void 0;
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var MDCComponent = (
                  /** @class */
                  function() {
                    function MDCComponent2(root, foundation) {
                      var args = [];
                      for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                      }
                      this.root = root;
                      this.initialize.apply(this, __spreadArray([], __read(args)));
                      this.foundation = foundation === void 0 ? this.getDefaultFoundation() : foundation;
                      this.foundation.init();
                      this.initialSyncWithDOM();
                    }
                    MDCComponent2.attachTo = function(root) {
                      return new MDCComponent2(root, new foundation_1.MDCFoundation({}));
                    };
                    MDCComponent2.prototype.initialize = function() {
                      var _args = [];
                      for (var _i = 0; _i < arguments.length; _i++) {
                        _args[_i] = arguments[_i];
                      }
                    };
                    MDCComponent2.prototype.getDefaultFoundation = function() {
                      throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class");
                    };
                    MDCComponent2.prototype.initialSyncWithDOM = function() {
                    };
                    MDCComponent2.prototype.destroy = function() {
                      this.foundation.destroy();
                    };
                    MDCComponent2.prototype.listen = function(evtType, handler, options) {
                      this.root.addEventListener(evtType, handler, options);
                    };
                    MDCComponent2.prototype.unlisten = function(evtType, handler, options) {
                      this.root.removeEventListener(evtType, handler, options);
                    };
                    MDCComponent2.prototype.emit = function(evtType, evtData, shouldBubble) {
                      if (shouldBubble === void 0) {
                        shouldBubble = false;
                      }
                      var evt;
                      if (typeof CustomEvent === "function") {
                        evt = new CustomEvent(evtType, {
                          bubbles: shouldBubble,
                          detail: evtData
                        });
                      } else {
                        evt = document.createEvent("CustomEvent");
                        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
                      }
                      this.root.dispatchEvent(evt);
                    };
                    return MDCComponent2;
                  }()
                );
                exports2.MDCComponent = MDCComponent;
                exports2.default = MDCComponent;
              }
            ),
            /***/
            "./packages/mdc-base/foundation.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-base/foundation.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFoundation = void 0;
                var MDCFoundation = (
                  /** @class */
                  function() {
                    function MDCFoundation2(adapter) {
                      if (adapter === void 0) {
                        adapter = {};
                      }
                      this.adapter = adapter;
                    }
                    Object.defineProperty(MDCFoundation2, "cssClasses", {
                      get: function get() {
                        return {};
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFoundation2, "strings", {
                      get: function get() {
                        return {};
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFoundation2, "numbers", {
                      get: function get() {
                        return {};
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {};
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCFoundation2.prototype.init = function() {
                    };
                    MDCFoundation2.prototype.destroy = function() {
                    };
                    return MDCFoundation2;
                  }()
                );
                exports2.MDCFoundation = MDCFoundation;
                exports2.default = MDCFoundation;
              }
            ),
            /***/
            "./packages/mdc-base/index.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-base/index.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-base/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-base/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-base/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-base/observer-foundation.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-base/observer-foundation.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                var __spreadArray = this && this.__spreadArray || function(to, from) {
                  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
                    to[j] = from[i];
                  }
                  return to;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCObserverFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var observer_1 = __webpack_require__(
                  /*! ./observer */
                  "./packages/mdc-base/observer.ts"
                );
                var MDCObserverFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCObserverFoundation2, _super);
                    function MDCObserverFoundation2(adapter) {
                      var _this = _super.call(this, adapter) || this;
                      _this.unobserves = /* @__PURE__ */ new Set();
                      return _this;
                    }
                    MDCObserverFoundation2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.unobserve();
                    };
                    MDCObserverFoundation2.prototype.observe = function(target, observers) {
                      var e_1, _a;
                      var _this = this;
                      var cleanup = [];
                      try {
                        for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var property = _c.value;
                          var observer = observers[property].bind(this);
                          cleanup.push(this.observeProperty(target, property, observer));
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      var unobserve = function unobserve2() {
                        var e_2, _a2;
                        try {
                          for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
                            var cleanupFn = cleanup_1_1.value;
                            cleanupFn();
                          }
                        } catch (e_2_1) {
                          e_2 = { error: e_2_1 };
                        } finally {
                          try {
                            if (cleanup_1_1 && !cleanup_1_1.done && (_a2 = cleanup_1.return))
                              _a2.call(cleanup_1);
                          } finally {
                            if (e_2)
                              throw e_2.error;
                          }
                        }
                        _this.unobserves.delete(unobserve2);
                      };
                      this.unobserves.add(unobserve);
                      return unobserve;
                    };
                    MDCObserverFoundation2.prototype.observeProperty = function(target, property, observer) {
                      return observer_1.observeProperty(target, property, observer);
                    };
                    MDCObserverFoundation2.prototype.setObserversEnabled = function(target, enabled) {
                      observer_1.setObserversEnabled(target, enabled);
                    };
                    MDCObserverFoundation2.prototype.unobserve = function() {
                      var e_3, _a;
                      try {
                        for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var unobserve = _c.value;
                          unobserve();
                        }
                      } catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_3)
                            throw e_3.error;
                        }
                      }
                    };
                    return MDCObserverFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCObserverFoundation = MDCObserverFoundation;
              }
            ),
            /***/
            "./packages/mdc-base/observer.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-base/observer.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                var __spreadArray = this && this.__spreadArray || function(to, from) {
                  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
                    to[j] = from[i];
                  }
                  return to;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.setObserversEnabled = exports2.getDescriptor = exports2.observeProperty = exports2.mdcObserver = void 0;
                function mdcObserver(baseClass) {
                  if (baseClass === void 0) {
                    baseClass = /** @class */
                    function() {
                      function class_1() {
                      }
                      return class_1;
                    }();
                  }
                  var unobserveMap = /* @__PURE__ */ new WeakMap();
                  return (
                    /** @class */
                    function(_super) {
                      __extends(MDCObserver, _super);
                      function MDCObserver() {
                        return _super !== null && _super.apply(this, arguments) || this;
                      }
                      MDCObserver.prototype.observe = function(target, observers) {
                        var e_1, _a;
                        var _this = this;
                        var cleanup = [];
                        try {
                          for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var property = _c.value;
                            var observer = observers[property].bind(this);
                            cleanup.push(observeProperty(target, property, observer));
                          }
                        } catch (e_1_1) {
                          e_1 = { error: e_1_1 };
                        } finally {
                          try {
                            if (_c && !_c.done && (_a = _b.return))
                              _a.call(_b);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                        }
                        var unobserve = function unobserve2() {
                          var e_2, _a2;
                          try {
                            for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
                              var cleanupFn = cleanup_1_1.value;
                              cleanupFn();
                            }
                          } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                          } finally {
                            try {
                              if (cleanup_1_1 && !cleanup_1_1.done && (_a2 = cleanup_1.return))
                                _a2.call(cleanup_1);
                            } finally {
                              if (e_2)
                                throw e_2.error;
                            }
                          }
                          var unobserves2 = unobserveMap.get(_this) || [];
                          var index = unobserves2.indexOf(unobserve2);
                          if (index > -1) {
                            unobserves2.splice(index, 1);
                          }
                        };
                        var unobserves = unobserveMap.get(this);
                        if (!unobserves) {
                          unobserves = [];
                          unobserveMap.set(this, unobserves);
                        }
                        unobserves.push(unobserve);
                        return unobserve;
                      };
                      MDCObserver.prototype.setObserversEnabled = function(target, enabled) {
                        setObserversEnabled(target, enabled);
                      };
                      MDCObserver.prototype.unobserve = function() {
                        var e_3, _a;
                        var unobserves = unobserveMap.get(this) || [];
                        try {
                          for (var _b = __values(__spreadArray([], __read(unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var unobserve = _c.value;
                            unobserve();
                          }
                        } catch (e_3_1) {
                          e_3 = { error: e_3_1 };
                        } finally {
                          try {
                            if (_c && !_c.done && (_a = _b.return))
                              _a.call(_b);
                          } finally {
                            if (e_3)
                              throw e_3.error;
                          }
                        }
                      };
                      return MDCObserver;
                    }(baseClass)
                  );
                }
                exports2.mdcObserver = mdcObserver;
                function observeProperty(target, property, observer) {
                  var targetObservers = installObserver(target, property);
                  var observers = targetObservers.getObservers(property);
                  observers.push(observer);
                  return function() {
                    observers.splice(observers.indexOf(observer), 1);
                  };
                }
                exports2.observeProperty = observeProperty;
                var allTargetObservers = /* @__PURE__ */ new WeakMap();
                function installObserver(target, property) {
                  var observersMap = /* @__PURE__ */ new Map();
                  if (!allTargetObservers.has(target)) {
                    allTargetObservers.set(target, {
                      isEnabled: true,
                      getObservers: function getObservers(key) {
                        var observers = observersMap.get(key) || [];
                        if (!observersMap.has(key)) {
                          observersMap.set(key, observers);
                        }
                        return observers;
                      },
                      installedProperties: /* @__PURE__ */ new Set()
                    });
                  }
                  var targetObservers = allTargetObservers.get(target);
                  if (targetObservers.installedProperties.has(property)) {
                    return targetObservers;
                  }
                  var descriptor = getDescriptor(target, property) || {
                    configurable: true,
                    enumerable: true,
                    value: target[property],
                    writable: true
                  };
                  var observedDescriptor = __assign({}, descriptor);
                  var descGet = descriptor.get, descSet = descriptor.set;
                  if ("value" in descriptor) {
                    delete observedDescriptor.value;
                    delete observedDescriptor.writable;
                    var value_1 = descriptor.value;
                    descGet = function descGet2() {
                      return value_1;
                    };
                    if (descriptor.writable) {
                      descSet = function descSet2(newValue) {
                        value_1 = newValue;
                      };
                    }
                  }
                  if (descGet) {
                    observedDescriptor.get = function() {
                      return descGet.call(this);
                    };
                  }
                  if (descSet) {
                    observedDescriptor.set = function(newValue) {
                      var e_4, _a;
                      var previous = descGet ? descGet.call(this) : newValue;
                      descSet.call(this, newValue);
                      if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
                        try {
                          for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var observer = _c.value;
                            observer(newValue, previous);
                          }
                        } catch (e_4_1) {
                          e_4 = { error: e_4_1 };
                        } finally {
                          try {
                            if (_c && !_c.done && (_a = _b.return))
                              _a.call(_b);
                          } finally {
                            if (e_4)
                              throw e_4.error;
                          }
                        }
                      }
                    };
                  }
                  targetObservers.installedProperties.add(property);
                  Object.defineProperty(target, property, observedDescriptor);
                  return targetObservers;
                }
                function getDescriptor(target, property) {
                  var descriptorTarget = target;
                  var descriptor;
                  while (descriptorTarget) {
                    descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
                    if (descriptor) {
                      break;
                    }
                    descriptorTarget = Object.getPrototypeOf(descriptorTarget);
                  }
                  return descriptor;
                }
                exports2.getDescriptor = getDescriptor;
                function setObserversEnabled(target, enabled) {
                  var targetObservers = allTargetObservers.get(target);
                  if (targetObservers) {
                    targetObservers.isEnabled = enabled;
                  }
                }
                exports2.setObserversEnabled = setObserversEnabled;
              }
            ),
            /***/
            "./packages/mdc-base/types.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-base/types.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-checkbox/adapter.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-checkbox/adapter.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-checkbox/component.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-checkbox/component.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                  return typeof obj;
                } : function(obj) {
                  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCCheckbox = void 0;
                var util_1 = __webpack_require__(
                  /*! @material/animation/util */
                  "./packages/mdc-animation/util.ts"
                );
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-checkbox/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-checkbox/foundation.ts"
                );
                var CB_PROTO_PROPS = ["checked", "indeterminate"];
                var MDCCheckbox = (
                  /** @class */
                  function(_super) {
                    __extends(MDCCheckbox2, _super);
                    function MDCCheckbox2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.rippleSurface = _this.createRipple();
                      return _this;
                    }
                    MDCCheckbox2.attachTo = function(root) {
                      return new MDCCheckbox2(root);
                    };
                    Object.defineProperty(MDCCheckbox2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleSurface;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckbox2.prototype, "checked", {
                      get: function get() {
                        return this.getNativeControl().checked;
                      },
                      set: function set(checked) {
                        this.getNativeControl().checked = checked;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckbox2.prototype, "indeterminate", {
                      get: function get() {
                        return this.getNativeControl().indeterminate;
                      },
                      set: function set(indeterminate) {
                        this.getNativeControl().indeterminate = indeterminate;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckbox2.prototype, "disabled", {
                      get: function get() {
                        return this.getNativeControl().disabled;
                      },
                      set: function set(disabled) {
                        this.foundation.setDisabled(disabled);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckbox2.prototype, "value", {
                      get: function get() {
                        return this.getNativeControl().value;
                      },
                      set: function set(value) {
                        this.getNativeControl().value = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCCheckbox2.prototype.initialize = function() {
                      var DATA_INDETERMINATE_ATTR = constants_1.strings.DATA_INDETERMINATE_ATTR;
                      this.getNativeControl().indeterminate = this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) === "true";
                      this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);
                    };
                    MDCCheckbox2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleChange = function() {
                        _this.foundation.handleChange();
                      };
                      this.handleAnimationEnd = function() {
                        _this.foundation.handleAnimationEnd();
                      };
                      this.getNativeControl().addEventListener("change", this.handleChange);
                      this.listen(util_1.getCorrectEventName(window, "animationend"), this.handleAnimationEnd);
                      this.installPropertyChangeHooks();
                    };
                    MDCCheckbox2.prototype.destroy = function() {
                      this.rippleSurface.destroy();
                      this.getNativeControl().removeEventListener("change", this.handleChange);
                      this.unlisten(util_1.getCorrectEventName(window, "animationend"), this.handleAnimationEnd);
                      this.uninstallPropertyChangeHooks();
                      _super.prototype.destroy.call(this);
                    };
                    MDCCheckbox2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        forceLayout: function forceLayout() {
                          return _this.root.offsetWidth;
                        },
                        hasNativeControl: function hasNativeControl() {
                          return !!_this.getNativeControl();
                        },
                        isAttachedToDOM: function isAttachedToDOM() {
                          return Boolean(_this.root.parentNode);
                        },
                        isChecked: function isChecked() {
                          return _this.checked;
                        },
                        isIndeterminate: function isIndeterminate() {
                          return _this.indeterminate;
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        removeNativeControlAttr: function removeNativeControlAttr(attr) {
                          _this.getNativeControl().removeAttribute(attr);
                        },
                        setNativeControlAttr: function setNativeControlAttr(attr, value) {
                          _this.getNativeControl().setAttribute(attr, value);
                        },
                        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                          _this.getNativeControl().disabled = disabled;
                        }
                      };
                      return new foundation_2.MDCCheckboxFoundation(adapter);
                    };
                    MDCCheckbox2.prototype.createRipple = function() {
                      var _this = this;
                      var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                        _this.getNativeControl().removeEventListener(evtType, handler, events_1.applyPassive());
                      }, isSurfaceActive: function isSurfaceActive() {
                        return ponyfill_1.matches(_this.getNativeControl(), ":active");
                      }, isUnbounded: function isUnbounded() {
                        return true;
                      }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                        _this.getNativeControl().addEventListener(evtType, handler, events_1.applyPassive());
                      } });
                      return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
                    };
                    MDCCheckbox2.prototype.installPropertyChangeHooks = function() {
                      var e_1, _a;
                      var _this = this;
                      var nativeCb = this.getNativeControl();
                      var cbProto = Object.getPrototypeOf(nativeCb);
                      var _loop_1 = function _loop_12(controlState2) {
                        var desc = Object.getOwnPropertyDescriptor(cbProto, controlState2);
                        if (!validDescriptor(desc)) {
                          return { value: void 0 };
                        }
                        var nativeGetter = desc.get;
                        var nativeCbDesc = {
                          configurable: desc.configurable,
                          enumerable: desc.enumerable,
                          get: nativeGetter,
                          set: function set(state) {
                            desc.set.call(nativeCb, state);
                            _this.foundation.handleChange();
                          }
                        };
                        Object.defineProperty(nativeCb, controlState2, nativeCbDesc);
                      };
                      try {
                        for (var CB_PROTO_PROPS_1 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()) {
                          var controlState = CB_PROTO_PROPS_1_1.value;
                          var state_1 = _loop_1(controlState);
                          if ((typeof state_1 === "undefined" ? "undefined" : _typeof(state_1)) === "object")
                            return state_1.value;
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a = CB_PROTO_PROPS_1.return))
                            _a.call(CB_PROTO_PROPS_1);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    MDCCheckbox2.prototype.uninstallPropertyChangeHooks = function() {
                      var e_2, _a;
                      var nativeCb = this.getNativeControl();
                      var cbProto = Object.getPrototypeOf(nativeCb);
                      try {
                        for (var CB_PROTO_PROPS_2 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()) {
                          var controlState = CB_PROTO_PROPS_2_1.value;
                          var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
                          if (!validDescriptor(desc)) {
                            return;
                          }
                          Object.defineProperty(nativeCb, controlState, desc);
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a = CB_PROTO_PROPS_2.return))
                            _a.call(CB_PROTO_PROPS_2);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                    };
                    MDCCheckbox2.prototype.getNativeControl = function() {
                      var NATIVE_CONTROL_SELECTOR = constants_1.strings.NATIVE_CONTROL_SELECTOR;
                      var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
                      if (!el) {
                        throw new Error("Checkbox component requires a " + NATIVE_CONTROL_SELECTOR + " element");
                      }
                      return el;
                    };
                    return MDCCheckbox2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCCheckbox = MDCCheckbox;
                function validDescriptor(inputPropDesc) {
                  return !!inputPropDesc && typeof inputPropDesc.set === "function";
                }
              }
            ),
            /***/
            "./packages/mdc-checkbox/constants.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-checkbox/constants.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  ANIM_CHECKED_INDETERMINATE: "mdc-checkbox--anim-checked-indeterminate",
                  ANIM_CHECKED_UNCHECKED: "mdc-checkbox--anim-checked-unchecked",
                  ANIM_INDETERMINATE_CHECKED: "mdc-checkbox--anim-indeterminate-checked",
                  ANIM_INDETERMINATE_UNCHECKED: "mdc-checkbox--anim-indeterminate-unchecked",
                  ANIM_UNCHECKED_CHECKED: "mdc-checkbox--anim-unchecked-checked",
                  ANIM_UNCHECKED_INDETERMINATE: "mdc-checkbox--anim-unchecked-indeterminate",
                  BACKGROUND: "mdc-checkbox__background",
                  CHECKED: "mdc-checkbox--checked",
                  CHECKMARK: "mdc-checkbox__checkmark",
                  CHECKMARK_PATH: "mdc-checkbox__checkmark-path",
                  DISABLED: "mdc-checkbox--disabled",
                  INDETERMINATE: "mdc-checkbox--indeterminate",
                  MIXEDMARK: "mdc-checkbox__mixedmark",
                  NATIVE_CONTROL: "mdc-checkbox__native-control",
                  ROOT: "mdc-checkbox",
                  SELECTED: "mdc-checkbox--selected",
                  UPGRADED: "mdc-checkbox--upgraded"
                };
                exports2.strings = {
                  ARIA_CHECKED_ATTR: "aria-checked",
                  ARIA_CHECKED_INDETERMINATE_VALUE: "mixed",
                  DATA_INDETERMINATE_ATTR: "data-indeterminate",
                  NATIVE_CONTROL_SELECTOR: ".mdc-checkbox__native-control",
                  TRANSITION_STATE_CHECKED: "checked",
                  TRANSITION_STATE_INDETERMINATE: "indeterminate",
                  TRANSITION_STATE_INIT: "init",
                  TRANSITION_STATE_UNCHECKED: "unchecked"
                };
                exports2.numbers = {
                  ANIM_END_LATCH_MS: 250
                };
              }
            ),
            /***/
            "./packages/mdc-checkbox/foundation.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-checkbox/foundation.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCCheckboxFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-checkbox/constants.ts"
                );
                var MDCCheckboxFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCCheckboxFoundation2, _super);
                    function MDCCheckboxFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation2.defaultAdapter), adapter)) || this;
                      _this.currentCheckState = constants_1.strings.TRANSITION_STATE_INIT;
                      _this.currentAnimationClass = "";
                      _this.animEndLatchTimer = 0;
                      _this.enableAnimationEndHandler = false;
                      return _this;
                    }
                    Object.defineProperty(MDCCheckboxFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckboxFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckboxFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCheckboxFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          forceLayout: function forceLayout() {
                            return void 0;
                          },
                          hasNativeControl: function hasNativeControl() {
                            return false;
                          },
                          isAttachedToDOM: function isAttachedToDOM() {
                            return false;
                          },
                          isChecked: function isChecked() {
                            return false;
                          },
                          isIndeterminate: function isIndeterminate() {
                            return false;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          removeNativeControlAttr: function removeNativeControlAttr() {
                            return void 0;
                          },
                          setNativeControlAttr: function setNativeControlAttr() {
                            return void 0;
                          },
                          setNativeControlDisabled: function setNativeControlDisabled() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCCheckboxFoundation2.prototype.init = function() {
                      this.currentCheckState = this.determineCheckState();
                      this.updateAriaChecked();
                      this.adapter.addClass(constants_1.cssClasses.UPGRADED);
                    };
                    MDCCheckboxFoundation2.prototype.destroy = function() {
                      clearTimeout(this.animEndLatchTimer);
                    };
                    MDCCheckboxFoundation2.prototype.setDisabled = function(disabled) {
                      this.adapter.setNativeControlDisabled(disabled);
                      if (disabled) {
                        this.adapter.addClass(constants_1.cssClasses.DISABLED);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.DISABLED);
                      }
                    };
                    MDCCheckboxFoundation2.prototype.handleAnimationEnd = function() {
                      var _this = this;
                      if (!this.enableAnimationEndHandler) {
                        return;
                      }
                      clearTimeout(this.animEndLatchTimer);
                      this.animEndLatchTimer = setTimeout(function() {
                        _this.adapter.removeClass(_this.currentAnimationClass);
                        _this.enableAnimationEndHandler = false;
                      }, constants_1.numbers.ANIM_END_LATCH_MS);
                    };
                    MDCCheckboxFoundation2.prototype.handleChange = function() {
                      this.transitionCheckState();
                    };
                    MDCCheckboxFoundation2.prototype.transitionCheckState = function() {
                      if (!this.adapter.hasNativeControl()) {
                        return;
                      }
                      var oldState = this.currentCheckState;
                      var newState = this.determineCheckState();
                      if (oldState === newState) {
                        return;
                      }
                      this.updateAriaChecked();
                      var TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
                      var SELECTED = constants_1.cssClasses.SELECTED;
                      if (newState === TRANSITION_STATE_UNCHECKED) {
                        this.adapter.removeClass(SELECTED);
                      } else {
                        this.adapter.addClass(SELECTED);
                      }
                      if (this.currentAnimationClass.length > 0) {
                        clearTimeout(this.animEndLatchTimer);
                        this.adapter.forceLayout();
                        this.adapter.removeClass(this.currentAnimationClass);
                      }
                      this.currentAnimationClass = this.getTransitionAnimationClass(oldState, newState);
                      this.currentCheckState = newState;
                      if (this.adapter.isAttachedToDOM() && this.currentAnimationClass.length > 0) {
                        this.adapter.addClass(this.currentAnimationClass);
                        this.enableAnimationEndHandler = true;
                      }
                    };
                    MDCCheckboxFoundation2.prototype.determineCheckState = function() {
                      var TRANSITION_STATE_INDETERMINATE = constants_1.strings.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = constants_1.strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
                      if (this.adapter.isIndeterminate()) {
                        return TRANSITION_STATE_INDETERMINATE;
                      }
                      return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
                    };
                    MDCCheckboxFoundation2.prototype.getTransitionAnimationClass = function(oldState, newState) {
                      var TRANSITION_STATE_INIT = constants_1.strings.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = constants_1.strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = constants_1.strings.TRANSITION_STATE_UNCHECKED;
                      var _a = MDCCheckboxFoundation2.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
                      switch (oldState) {
                        case TRANSITION_STATE_INIT:
                          if (newState === TRANSITION_STATE_UNCHECKED) {
                            return "";
                          }
                          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
                        case TRANSITION_STATE_UNCHECKED:
                          return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
                        case TRANSITION_STATE_CHECKED:
                          return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
                        default:
                          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
                      }
                    };
                    MDCCheckboxFoundation2.prototype.updateAriaChecked = function() {
                      if (this.adapter.isIndeterminate()) {
                        this.adapter.setNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR, constants_1.strings.ARIA_CHECKED_INDETERMINATE_VALUE);
                      } else {
                        this.adapter.removeNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR);
                      }
                    };
                    return MDCCheckboxFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCCheckboxFoundation = MDCCheckboxFoundation;
                exports2.default = MDCCheckboxFoundation;
              }
            ),
            /***/
            "./packages/mdc-checkbox/index.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-checkbox/index.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-checkbox/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-checkbox/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-checkbox/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-checkbox/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip-set/adapter.ts": (
              /*!***********************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip-set/adapter.ts ***!
                \***********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip-set/component.ts": (
              /*!*************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip-set/component.ts ***!
                \*************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChipSet = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var announce_1 = __webpack_require__(
                  /*! @material/dom/announce */
                  "./packages/mdc-dom/announce.ts"
                );
                var component_2 = __webpack_require__(
                  /*! ../chip/component */
                  "./packages/mdc-chips/deprecated/chip/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ../chip/foundation */
                  "./packages/mdc-chips/deprecated/chip/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/chip-set/foundation.ts"
                );
                var _a = foundation_1.MDCChipFoundation.strings, INTERACTION_EVENT = _a.INTERACTION_EVENT, SELECTION_EVENT = _a.SELECTION_EVENT, REMOVAL_EVENT = _a.REMOVAL_EVENT, NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
                var CHIP_SELECTOR = foundation_2.MDCChipSetFoundation.strings.CHIP_SELECTOR;
                var idCounter = 0;
                var MDCChipSet = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChipSet2, _super);
                    function MDCChipSet2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCChipSet2.attachTo = function(root) {
                      return new MDCChipSet2(root);
                    };
                    Object.defineProperty(MDCChipSet2.prototype, "chips", {
                      get: function get() {
                        return this.chipsList.slice();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipSet2.prototype, "selectedChipIds", {
                      /**
                       * @return An array of the IDs of all selected chips.
                       */
                      get: function get() {
                        return this.foundation.getSelectedChipIds();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChipSet2.prototype.initialize = function(chipFactory) {
                      if (chipFactory === void 0) {
                        chipFactory = function chipFactory2(el) {
                          return new component_2.MDCChip(el);
                        };
                      }
                      this.chipFactory = chipFactory;
                      this.chipsList = this.instantiateChips(this.chipFactory);
                    };
                    MDCChipSet2.prototype.initialSyncWithDOM = function() {
                      var e_1, _a2;
                      var _this = this;
                      try {
                        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var chip = _c.value;
                          if (chip.id && chip.selected) {
                            this.foundation.select(chip.id);
                          }
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a2 = _b.return))
                            _a2.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      this.handleChipInteraction = function(evt) {
                        return _this.foundation.handleChipInteraction(evt.detail);
                      };
                      this.handleChipSelection = function(evt) {
                        return _this.foundation.handleChipSelection(evt.detail);
                      };
                      this.handleChipRemoval = function(evt) {
                        return _this.foundation.handleChipRemoval(evt.detail);
                      };
                      this.handleChipNavigation = function(evt) {
                        return _this.foundation.handleChipNavigation(evt.detail);
                      };
                      this.listen(INTERACTION_EVENT, this.handleChipInteraction);
                      this.listen(SELECTION_EVENT, this.handleChipSelection);
                      this.listen(REMOVAL_EVENT, this.handleChipRemoval);
                      this.listen(NAVIGATION_EVENT, this.handleChipNavigation);
                    };
                    MDCChipSet2.prototype.destroy = function() {
                      var e_2, _a2;
                      try {
                        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var chip = _c.value;
                          chip.destroy();
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a2 = _b.return))
                            _a2.call(_b);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                      this.unlisten(INTERACTION_EVENT, this.handleChipInteraction);
                      this.unlisten(SELECTION_EVENT, this.handleChipSelection);
                      this.unlisten(REMOVAL_EVENT, this.handleChipRemoval);
                      this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation);
                      _super.prototype.destroy.call(this);
                    };
                    MDCChipSet2.prototype.addChip = function(chipEl) {
                      chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
                      this.chipsList.push(this.chipFactory(chipEl));
                    };
                    MDCChipSet2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        announceMessage: function announceMessage(message) {
                          announce_1.announce(message);
                        },
                        focusChipPrimaryActionAtIndex: function focusChipPrimaryActionAtIndex(index) {
                          _this.chipsList[index].focusPrimaryAction();
                        },
                        focusChipTrailingActionAtIndex: function focusChipTrailingActionAtIndex(index) {
                          _this.chipsList[index].focusTrailingAction();
                        },
                        getChipListCount: function getChipListCount() {
                          return _this.chips.length;
                        },
                        getIndexOfChipById: function getIndexOfChipById(chipId) {
                          return _this.findChipIndex(chipId);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        isRTL: function isRTL() {
                          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
                        },
                        removeChipAtIndex: function removeChipAtIndex(index) {
                          if (index >= 0 && index < _this.chips.length) {
                            _this.chipsList[index].destroy();
                            _this.chipsList[index].remove();
                            _this.chipsList.splice(index, 1);
                          }
                        },
                        removeFocusFromChipAtIndex: function removeFocusFromChipAtIndex(index) {
                          _this.chipsList[index].removeFocus();
                        },
                        selectChipAtIndex: function selectChipAtIndex(index, selected, shouldNotifyClients) {
                          if (index >= 0 && index < _this.chips.length) {
                            _this.chipsList[index].setSelectedFromChipSet(selected, shouldNotifyClients);
                          }
                        }
                      };
                      return new foundation_2.MDCChipSetFoundation(adapter);
                    };
                    MDCChipSet2.prototype.instantiateChips = function(chipFactory) {
                      var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
                      return chipElements.map(function(el) {
                        el.id = el.id || "mdc-chip-" + ++idCounter;
                        return chipFactory(el);
                      });
                    };
                    MDCChipSet2.prototype.findChipIndex = function(chipId) {
                      for (var i = 0; i < this.chips.length; i++) {
                        if (this.chipsList[i].id === chipId) {
                          return i;
                        }
                      }
                      return -1;
                    };
                    return MDCChipSet2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCChipSet = MDCChipSet;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip-set/constants.ts": (
              /*!*************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip-set/constants.ts ***!
                \*************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                exports2.strings = {
                  CHIP_SELECTOR: ".mdc-chip"
                };
                exports2.cssClasses = {
                  CHOICE: "mdc-chip-set--choice",
                  FILTER: "mdc-chip-set--filter"
                };
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip-set/foundation.ts": (
              /*!**************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip-set/foundation.ts ***!
                \**************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChipSetFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ../chip/constants */
                  "./packages/mdc-chips/deprecated/chip/constants.ts"
                );
                var constants_2 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/chip-set/constants.ts"
                );
                var MDCChipSetFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChipSetFoundation2, _super);
                    function MDCChipSetFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation2.defaultAdapter), adapter)) || this;
                      _this.selectedChipIds = [];
                      return _this;
                    }
                    Object.defineProperty(MDCChipSetFoundation2, "strings", {
                      get: function get() {
                        return constants_2.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipSetFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_2.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipSetFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          announceMessage: function announceMessage() {
                            return void 0;
                          },
                          focusChipPrimaryActionAtIndex: function focusChipPrimaryActionAtIndex() {
                            return void 0;
                          },
                          focusChipTrailingActionAtIndex: function focusChipTrailingActionAtIndex() {
                            return void 0;
                          },
                          getChipListCount: function getChipListCount() {
                            return -1;
                          },
                          getIndexOfChipById: function getIndexOfChipById() {
                            return -1;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          isRTL: function isRTL() {
                            return false;
                          },
                          removeChipAtIndex: function removeChipAtIndex() {
                            return void 0;
                          },
                          removeFocusFromChipAtIndex: function removeFocusFromChipAtIndex() {
                            return void 0;
                          },
                          selectChipAtIndex: function selectChipAtIndex() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChipSetFoundation2.prototype.getSelectedChipIds = function() {
                      return this.selectedChipIds.slice();
                    };
                    MDCChipSetFoundation2.prototype.select = function(chipId) {
                      this.selectImpl(chipId, false);
                    };
                    MDCChipSetFoundation2.prototype.handleChipInteraction = function(_a) {
                      var chipId = _a.chipId;
                      var index = this.adapter.getIndexOfChipById(chipId);
                      this.removeFocusFromChipsExcept(index);
                      if (this.adapter.hasClass(constants_2.cssClasses.CHOICE) || this.adapter.hasClass(constants_2.cssClasses.FILTER)) {
                        this.toggleSelect(chipId);
                      }
                    };
                    MDCChipSetFoundation2.prototype.handleChipSelection = function(_a) {
                      var chipId = _a.chipId, selected = _a.selected, shouldIgnore = _a.shouldIgnore;
                      if (shouldIgnore) {
                        return;
                      }
                      var chipIsSelected = this.selectedChipIds.indexOf(chipId) >= 0;
                      if (selected && !chipIsSelected) {
                        this.select(chipId);
                      } else if (!selected && chipIsSelected) {
                        this.deselectImpl(chipId);
                      }
                    };
                    MDCChipSetFoundation2.prototype.handleChipRemoval = function(_a) {
                      var chipId = _a.chipId, removedAnnouncement = _a.removedAnnouncement;
                      if (removedAnnouncement) {
                        this.adapter.announceMessage(removedAnnouncement);
                      }
                      var index = this.adapter.getIndexOfChipById(chipId);
                      this.deselectAndNotifyClients(chipId);
                      this.adapter.removeChipAtIndex(index);
                      var maxIndex = this.adapter.getChipListCount() - 1;
                      if (maxIndex < 0) {
                        return;
                      }
                      var nextIndex = Math.min(index, maxIndex);
                      this.removeFocusFromChipsExcept(nextIndex);
                      this.adapter.focusChipTrailingActionAtIndex(nextIndex);
                    };
                    MDCChipSetFoundation2.prototype.handleChipNavigation = function(_a) {
                      var chipId = _a.chipId, key = _a.key, source = _a.source;
                      var maxIndex = this.adapter.getChipListCount() - 1;
                      var index = this.adapter.getIndexOfChipById(chipId);
                      if (index === -1 || !constants_1.navigationKeys.has(key)) {
                        return;
                      }
                      var isRTL = this.adapter.isRTL();
                      var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
                      var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
                      var isDownKey = key === constants_1.strings.ARROW_DOWN_KEY || key === constants_1.strings.IE_ARROW_DOWN_KEY;
                      var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
                      var isHome = key === constants_1.strings.HOME_KEY;
                      var isEnd = key === constants_1.strings.END_KEY;
                      if (shouldIncrement) {
                        index++;
                      } else if (isHome) {
                        index = 0;
                      } else if (isEnd) {
                        index = maxIndex;
                      } else {
                        index--;
                      }
                      if (index < 0 || index > maxIndex) {
                        return;
                      }
                      this.removeFocusFromChipsExcept(index);
                      this.focusChipAction(index, key, source);
                    };
                    MDCChipSetFoundation2.prototype.focusChipAction = function(index, key, source) {
                      var shouldJumpChips = constants_1.jumpChipKeys.has(key);
                      if (shouldJumpChips && source === constants_1.EventSource.PRIMARY) {
                        return this.adapter.focusChipPrimaryActionAtIndex(index);
                      }
                      if (shouldJumpChips && source === constants_1.EventSource.TRAILING) {
                        return this.adapter.focusChipTrailingActionAtIndex(index);
                      }
                      var dir = this.getDirection(key);
                      if (dir === constants_1.Direction.LEFT) {
                        return this.adapter.focusChipTrailingActionAtIndex(index);
                      }
                      if (dir === constants_1.Direction.RIGHT) {
                        return this.adapter.focusChipPrimaryActionAtIndex(index);
                      }
                    };
                    MDCChipSetFoundation2.prototype.getDirection = function(key) {
                      var isRTL = this.adapter.isRTL();
                      var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
                      var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
                      if (!isRTL && isLeftKey || isRTL && isRightKey) {
                        return constants_1.Direction.LEFT;
                      }
                      return constants_1.Direction.RIGHT;
                    };
                    MDCChipSetFoundation2.prototype.deselectImpl = function(chipId, shouldNotifyClients) {
                      if (shouldNotifyClients === void 0) {
                        shouldNotifyClients = false;
                      }
                      var index = this.selectedChipIds.indexOf(chipId);
                      if (index >= 0) {
                        this.selectedChipIds.splice(index, 1);
                        var chipIndex = this.adapter.getIndexOfChipById(chipId);
                        this.adapter.selectChipAtIndex(
                          chipIndex,
                          /** isSelected */
                          false,
                          shouldNotifyClients
                        );
                      }
                    };
                    MDCChipSetFoundation2.prototype.deselectAndNotifyClients = function(chipId) {
                      this.deselectImpl(chipId, true);
                    };
                    MDCChipSetFoundation2.prototype.toggleSelect = function(chipId) {
                      if (this.selectedChipIds.indexOf(chipId) >= 0) {
                        this.deselectAndNotifyClients(chipId);
                      } else {
                        this.selectAndNotifyClients(chipId);
                      }
                    };
                    MDCChipSetFoundation2.prototype.removeFocusFromChipsExcept = function(index) {
                      var chipCount = this.adapter.getChipListCount();
                      for (var i = 0; i < chipCount; i++) {
                        if (i !== index) {
                          this.adapter.removeFocusFromChipAtIndex(i);
                        }
                      }
                    };
                    MDCChipSetFoundation2.prototype.selectAndNotifyClients = function(chipId) {
                      this.selectImpl(chipId, true);
                    };
                    MDCChipSetFoundation2.prototype.selectImpl = function(chipId, shouldNotifyClients) {
                      if (this.selectedChipIds.indexOf(chipId) >= 0) {
                        return;
                      }
                      if (this.adapter.hasClass(constants_2.cssClasses.CHOICE) && this.selectedChipIds.length > 0) {
                        var previouslySelectedChip = this.selectedChipIds[0];
                        var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
                        this.selectedChipIds = [];
                        this.adapter.selectChipAtIndex(
                          previouslySelectedIndex,
                          /** isSelected */
                          false,
                          shouldNotifyClients
                        );
                      }
                      this.selectedChipIds.push(chipId);
                      var index = this.adapter.getIndexOfChipById(chipId);
                      this.adapter.selectChipAtIndex(
                        index,
                        /** isSelected */
                        true,
                        shouldNotifyClients
                      );
                    };
                    return MDCChipSetFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCChipSetFoundation = MDCChipSetFoundation;
                exports2.default = MDCChipSetFoundation;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip-set/index.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip-set/index.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.chipSetStrings = exports2.chipSetCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-chips/deprecated/chip-set/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-chips/deprecated/chip-set/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/chip-set/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/chip-set/constants.ts"
                );
                Object.defineProperty(exports2, "chipSetCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "chipSetStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/adapter.ts": (
              /*!*******************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/adapter.ts ***!
                \*******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/component.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/component.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChip = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var component_3 = __webpack_require__(
                  /*! ../trailingaction/component */
                  "./packages/mdc-chips/deprecated/trailingaction/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ../trailingaction/constants */
                  "./packages/mdc-chips/deprecated/trailingaction/constants.ts"
                );
                var constants_2 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/chip/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/chip/foundation.ts"
                );
                var MDCChip = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChip2, _super);
                    function MDCChip2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(MDCChip2.prototype, "selected", {
                      /**
                       * @return Whether the chip is selected.
                       */
                      get: function get() {
                        return this.foundation.isSelected();
                      },
                      /**
                       * Sets selected state on the chip.
                       */
                      set: function set(selected) {
                        this.foundation.setSelected(selected);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChip2.prototype, "shouldRemoveOnTrailingIconClick", {
                      /**
                       * @return Whether a trailing icon click should trigger exit/removal of the chip.
                       */
                      get: function get() {
                        return this.foundation.getShouldRemoveOnTrailingIconClick();
                      },
                      /**
                       * Sets whether a trailing icon click should trigger exit/removal of the chip.
                       */
                      set: function set(shouldRemove) {
                        this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChip2.prototype, "setShouldFocusPrimaryActionOnClick", {
                      /**
                       * Sets whether a clicking on the chip should focus the primary action.
                       */
                      set: function set(shouldFocus) {
                        this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChip2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleSurface;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChip2.prototype, "id", {
                      get: function get() {
                        return this.root.id;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChip2.attachTo = function(root) {
                      return new MDCChip2(root);
                    };
                    MDCChip2.prototype.initialize = function(rippleFactory, trailingActionFactory) {
                      var _this = this;
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el, foundation) {
                          return new component_2.MDCRipple(el, foundation);
                        };
                      }
                      if (trailingActionFactory === void 0) {
                        trailingActionFactory = function trailingActionFactory2(el) {
                          return new component_3.MDCChipTrailingAction(el);
                        };
                      }
                      this.leadingIcon = this.root.querySelector(constants_2.strings.LEADING_ICON_SELECTOR);
                      this.checkmark = this.root.querySelector(constants_2.strings.CHECKMARK_SELECTOR);
                      this.primaryAction = this.root.querySelector(constants_2.strings.PRIMARY_ACTION_SELECTOR);
                      var trailingActionEl = this.root.querySelector(constants_2.strings.TRAILING_ACTION_SELECTOR);
                      if (trailingActionEl) {
                        this.trailingAction = trailingActionFactory(trailingActionEl);
                      }
                      var rippleAdapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                        return _this.foundation.getDimensions();
                      } });
                      this.rippleSurface = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
                    };
                    MDCChip2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleTrailingActionInteraction = function() {
                        _this.foundation.handleTrailingActionInteraction();
                      };
                      this.handleTrailingActionNavigation = function(evt) {
                        _this.foundation.handleTrailingActionNavigation(evt);
                      };
                      this.handleClick = function() {
                        _this.foundation.handleClick();
                      };
                      this.handleKeydown = function(evt) {
                        _this.foundation.handleKeydown(evt);
                      };
                      this.handleTransitionEnd = function(evt) {
                        _this.foundation.handleTransitionEnd(evt);
                      };
                      this.handleFocusIn = function(evt) {
                        _this.foundation.handleFocusIn(evt);
                      };
                      this.handleFocusOut = function(evt) {
                        _this.foundation.handleFocusOut(evt);
                      };
                      this.listen("transitionend", this.handleTransitionEnd);
                      this.listen("click", this.handleClick);
                      this.listen("keydown", this.handleKeydown);
                      this.listen("focusin", this.handleFocusIn);
                      this.listen("focusout", this.handleFocusOut);
                      if (this.trailingAction) {
                        this.listen(constants_1.strings.INTERACTION_EVENT, this.handleTrailingActionInteraction);
                        this.listen(constants_1.strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
                      }
                    };
                    MDCChip2.prototype.destroy = function() {
                      this.rippleSurface.destroy();
                      this.unlisten("transitionend", this.handleTransitionEnd);
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten("click", this.handleClick);
                      this.unlisten("focusin", this.handleFocusIn);
                      this.unlisten("focusout", this.handleFocusOut);
                      if (this.trailingAction) {
                        this.unlisten(constants_1.strings.INTERACTION_EVENT, this.handleTrailingActionInteraction);
                        this.unlisten(constants_1.strings.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
                      }
                      _super.prototype.destroy.call(this);
                    };
                    MDCChip2.prototype.beginExit = function() {
                      this.foundation.beginExit();
                    };
                    MDCChip2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        addClassToLeadingIcon: function addClassToLeadingIcon(className) {
                          if (_this.leadingIcon) {
                            _this.leadingIcon.classList.add(className);
                          }
                        },
                        eventTargetHasClass: function eventTargetHasClass(target, className) {
                          return target ? target.classList.contains(className) : false;
                        },
                        focusPrimaryAction: function focusPrimaryAction() {
                          if (_this.primaryAction) {
                            _this.primaryAction.focus();
                          }
                        },
                        focusTrailingAction: function focusTrailingAction() {
                          if (_this.trailingAction) {
                            _this.trailingAction.focus();
                          }
                        },
                        getAttribute: function getAttribute(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
                          return _this.checkmark ? _this.checkmark.getBoundingClientRect() : null;
                        },
                        getComputedStyleValue: function getComputedStyleValue(propertyName) {
                          return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
                        },
                        getRootBoundingClientRect: function getRootBoundingClientRect() {
                          return _this.root.getBoundingClientRect();
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        hasLeadingIcon: function hasLeadingIcon() {
                          return !!_this.leadingIcon;
                        },
                        isRTL: function isRTL() {
                          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
                        },
                        isTrailingActionNavigable: function isTrailingActionNavigable() {
                          if (_this.trailingAction) {
                            return _this.trailingAction.isNavigable();
                          }
                          return false;
                        },
                        notifyInteraction: function notifyInteraction() {
                          return _this.emit(
                            constants_2.strings.INTERACTION_EVENT,
                            { chipId: _this.id },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyNavigation: function notifyNavigation(key, source) {
                          return _this.emit(
                            constants_2.strings.NAVIGATION_EVENT,
                            { chipId: _this.id, key, source },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyRemoval: function notifyRemoval(removedAnnouncement) {
                          _this.emit(
                            constants_2.strings.REMOVAL_EVENT,
                            { chipId: _this.id, removedAnnouncement },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifySelection: function notifySelection(selected, shouldIgnore) {
                          return _this.emit(
                            constants_2.strings.SELECTION_EVENT,
                            { chipId: _this.id, selected, shouldIgnore },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
                          return _this.emit(
                            constants_2.strings.TRAILING_ICON_INTERACTION_EVENT,
                            { chipId: _this.id },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyEditStart: function notifyEditStart() {
                        },
                        notifyEditFinish: function notifyEditFinish() {
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        removeClassFromLeadingIcon: function removeClassFromLeadingIcon(className) {
                          if (_this.leadingIcon) {
                            _this.leadingIcon.classList.remove(className);
                          }
                        },
                        removeTrailingActionFocus: function removeTrailingActionFocus() {
                          if (_this.trailingAction) {
                            _this.trailingAction.removeFocus();
                          }
                        },
                        setPrimaryActionAttr: function setPrimaryActionAttr(attr, value) {
                          if (_this.primaryAction) {
                            _this.primaryAction.setAttribute(attr, value);
                          }
                        },
                        setStyleProperty: function setStyleProperty(propertyName, value) {
                          return _this.root.style.setProperty(propertyName, value);
                        }
                      };
                      return new foundation_2.MDCChipFoundation(adapter);
                    };
                    MDCChip2.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
                      this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
                    };
                    MDCChip2.prototype.focusPrimaryAction = function() {
                      this.foundation.focusPrimaryAction();
                    };
                    MDCChip2.prototype.focusTrailingAction = function() {
                      this.foundation.focusTrailingAction();
                    };
                    MDCChip2.prototype.removeFocus = function() {
                      this.foundation.removeFocus();
                    };
                    MDCChip2.prototype.remove = function() {
                      var parent = this.root.parentNode;
                      if (parent !== null) {
                        parent.removeChild(this.root);
                      }
                    };
                    return MDCChip2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCChip = MDCChip;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/constants.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/constants.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.jumpChipKeys = exports2.navigationKeys = exports2.cssClasses = exports2.strings = exports2.EventSource = exports2.Direction = void 0;
                var Direction;
                (function(Direction2) {
                  Direction2["LEFT"] = "left";
                  Direction2["RIGHT"] = "right";
                })(Direction = exports2.Direction || (exports2.Direction = {}));
                var EventSource;
                (function(EventSource2) {
                  EventSource2["PRIMARY"] = "primary";
                  EventSource2["TRAILING"] = "trailing";
                  EventSource2["NONE"] = "none";
                })(EventSource = exports2.EventSource || (exports2.EventSource = {}));
                exports2.strings = {
                  ADDED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-added-announcement",
                  ARIA_CHECKED: "aria-checked",
                  ARROW_DOWN_KEY: "ArrowDown",
                  ARROW_LEFT_KEY: "ArrowLeft",
                  ARROW_RIGHT_KEY: "ArrowRight",
                  ARROW_UP_KEY: "ArrowUp",
                  BACKSPACE_KEY: "Backspace",
                  CHECKMARK_SELECTOR: ".mdc-chip__checkmark",
                  DELETE_KEY: "Delete",
                  END_KEY: "End",
                  ENTER_KEY: "Enter",
                  ENTRY_ANIMATION_NAME: "mdc-chip-entry",
                  HOME_KEY: "Home",
                  IE_ARROW_DOWN_KEY: "Down",
                  IE_ARROW_LEFT_KEY: "Left",
                  IE_ARROW_RIGHT_KEY: "Right",
                  IE_ARROW_UP_KEY: "Up",
                  IE_DELETE_KEY: "Del",
                  INTERACTION_EVENT: "MDCChip:interaction",
                  LEADING_ICON_SELECTOR: ".mdc-chip__icon--leading",
                  NAVIGATION_EVENT: "MDCChip:navigation",
                  PRIMARY_ACTION_SELECTOR: ".mdc-chip__primary-action",
                  REMOVED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-removed-announcement",
                  REMOVAL_EVENT: "MDCChip:removal",
                  SELECTION_EVENT: "MDCChip:selection",
                  SPACEBAR_KEY: " ",
                  TAB_INDEX: "tabindex",
                  TRAILING_ACTION_SELECTOR: ".mdc-chip-trailing-action",
                  TRAILING_ICON_INTERACTION_EVENT: "MDCChip:trailingIconInteraction",
                  TRAILING_ICON_SELECTOR: ".mdc-chip__icon--trailing"
                };
                exports2.cssClasses = {
                  CHECKMARK: "mdc-chip__checkmark",
                  CHIP_EXIT: "mdc-chip--exit",
                  DELETABLE: "mdc-chip--deletable",
                  EDITABLE: "mdc-chip--editable",
                  EDITING: "mdc-chip--editing",
                  HIDDEN_LEADING_ICON: "mdc-chip__icon--leading-hidden",
                  LEADING_ICON: "mdc-chip__icon--leading",
                  PRIMARY_ACTION: "mdc-chip__primary-action",
                  PRIMARY_ACTION_FOCUSED: "mdc-chip--primary-action-focused",
                  SELECTED: "mdc-chip--selected",
                  TEXT: "mdc-chip__text",
                  TRAILING_ACTION: "mdc-chip__trailing-action",
                  TRAILING_ICON: "mdc-chip__icon--trailing"
                };
                exports2.navigationKeys = /* @__PURE__ */ new Set();
                exports2.navigationKeys.add(exports2.strings.ARROW_LEFT_KEY);
                exports2.navigationKeys.add(exports2.strings.ARROW_RIGHT_KEY);
                exports2.navigationKeys.add(exports2.strings.ARROW_DOWN_KEY);
                exports2.navigationKeys.add(exports2.strings.ARROW_UP_KEY);
                exports2.navigationKeys.add(exports2.strings.END_KEY);
                exports2.navigationKeys.add(exports2.strings.HOME_KEY);
                exports2.navigationKeys.add(exports2.strings.IE_ARROW_LEFT_KEY);
                exports2.navigationKeys.add(exports2.strings.IE_ARROW_RIGHT_KEY);
                exports2.navigationKeys.add(exports2.strings.IE_ARROW_DOWN_KEY);
                exports2.navigationKeys.add(exports2.strings.IE_ARROW_UP_KEY);
                exports2.jumpChipKeys = /* @__PURE__ */ new Set();
                exports2.jumpChipKeys.add(exports2.strings.ARROW_UP_KEY);
                exports2.jumpChipKeys.add(exports2.strings.ARROW_DOWN_KEY);
                exports2.jumpChipKeys.add(exports2.strings.HOME_KEY);
                exports2.jumpChipKeys.add(exports2.strings.END_KEY);
                exports2.jumpChipKeys.add(exports2.strings.IE_ARROW_UP_KEY);
                exports2.jumpChipKeys.add(exports2.strings.IE_ARROW_DOWN_KEY);
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/foundation.ts": (
              /*!**********************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/foundation.ts ***!
                \**********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChipFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/chip/constants.ts"
                );
                var emptyClientRect = {
                  bottom: 0,
                  height: 0,
                  left: 0,
                  right: 0,
                  top: 0,
                  width: 0
                };
                var FocusBehavior;
                (function(FocusBehavior2) {
                  FocusBehavior2[FocusBehavior2["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
                  FocusBehavior2[FocusBehavior2["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
                })(FocusBehavior || (FocusBehavior = {}));
                var MDCChipFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChipFoundation2, _super);
                    function MDCChipFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation2.defaultAdapter), adapter)) || this;
                      _this.shouldRemoveOnTrailingIconClick = true;
                      _this.shouldFocusPrimaryActionOnClick = true;
                      return _this;
                    }
                    Object.defineProperty(MDCChipFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          addClassToLeadingIcon: function addClassToLeadingIcon() {
                            return void 0;
                          },
                          eventTargetHasClass: function eventTargetHasClass() {
                            return false;
                          },
                          focusPrimaryAction: function focusPrimaryAction() {
                            return void 0;
                          },
                          focusTrailingAction: function focusTrailingAction() {
                            return void 0;
                          },
                          getAttribute: function getAttribute() {
                            return null;
                          },
                          getCheckmarkBoundingClientRect: function getCheckmarkBoundingClientRect() {
                            return emptyClientRect;
                          },
                          getComputedStyleValue: function getComputedStyleValue() {
                            return "";
                          },
                          getRootBoundingClientRect: function getRootBoundingClientRect() {
                            return emptyClientRect;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          hasLeadingIcon: function hasLeadingIcon() {
                            return false;
                          },
                          isRTL: function isRTL() {
                            return false;
                          },
                          isTrailingActionNavigable: function isTrailingActionNavigable() {
                            return false;
                          },
                          notifyEditFinish: function notifyEditFinish() {
                            return void 0;
                          },
                          notifyEditStart: function notifyEditStart() {
                            return void 0;
                          },
                          notifyInteraction: function notifyInteraction() {
                            return void 0;
                          },
                          notifyNavigation: function notifyNavigation() {
                            return void 0;
                          },
                          notifyRemoval: function notifyRemoval() {
                            return void 0;
                          },
                          notifySelection: function notifySelection() {
                            return void 0;
                          },
                          notifyTrailingIconInteraction: function notifyTrailingIconInteraction() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          removeClassFromLeadingIcon: function removeClassFromLeadingIcon() {
                            return void 0;
                          },
                          removeTrailingActionFocus: function removeTrailingActionFocus() {
                            return void 0;
                          },
                          setPrimaryActionAttr: function setPrimaryActionAttr() {
                            return void 0;
                          },
                          setStyleProperty: function setStyleProperty() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChipFoundation2.prototype.isSelected = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.SELECTED);
                    };
                    MDCChipFoundation2.prototype.isEditable = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.EDITABLE);
                    };
                    MDCChipFoundation2.prototype.isEditing = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.EDITING);
                    };
                    MDCChipFoundation2.prototype.setSelected = function(selected) {
                      this.setSelectedImpl(selected);
                      this.notifySelection(selected);
                    };
                    MDCChipFoundation2.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
                      this.setSelectedImpl(selected);
                      if (shouldNotifyClients) {
                        this.notifyIgnoredSelection(selected);
                      }
                    };
                    MDCChipFoundation2.prototype.getShouldRemoveOnTrailingIconClick = function() {
                      return this.shouldRemoveOnTrailingIconClick;
                    };
                    MDCChipFoundation2.prototype.setShouldRemoveOnTrailingIconClick = function(shouldRemove) {
                      this.shouldRemoveOnTrailingIconClick = shouldRemove;
                    };
                    MDCChipFoundation2.prototype.setShouldFocusPrimaryActionOnClick = function(shouldFocus) {
                      this.shouldFocusPrimaryActionOnClick = shouldFocus;
                    };
                    MDCChipFoundation2.prototype.getDimensions = function() {
                      var _this = this;
                      var getRootRect = function getRootRect2() {
                        return _this.adapter.getRootBoundingClientRect();
                      };
                      var getCheckmarkRect = function getCheckmarkRect2() {
                        return _this.adapter.getCheckmarkBoundingClientRect();
                      };
                      if (!this.adapter.hasLeadingIcon()) {
                        var checkmarkRect = getCheckmarkRect();
                        if (checkmarkRect) {
                          var rootRect = getRootRect();
                          return {
                            bottom: rootRect.bottom,
                            height: rootRect.height,
                            left: rootRect.left,
                            right: rootRect.right,
                            top: rootRect.top,
                            width: rootRect.width + checkmarkRect.height
                          };
                        }
                      }
                      return getRootRect();
                    };
                    MDCChipFoundation2.prototype.beginExit = function() {
                      this.adapter.addClass(constants_1.cssClasses.CHIP_EXIT);
                    };
                    MDCChipFoundation2.prototype.handleClick = function() {
                      this.adapter.notifyInteraction();
                      this.setPrimaryActionFocusable(this.getFocusBehavior());
                    };
                    MDCChipFoundation2.prototype.handleDoubleClick = function() {
                      if (this.isEditable()) {
                        this.startEditing();
                      }
                    };
                    MDCChipFoundation2.prototype.handleTransitionEnd = function(evt) {
                      var _this = this;
                      var shouldHandle = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.CHIP_EXIT);
                      var widthIsAnimating = evt.propertyName === "width";
                      var opacityIsAnimating = evt.propertyName === "opacity";
                      if (shouldHandle && opacityIsAnimating) {
                        var chipWidth_1 = this.adapter.getComputedStyleValue("width");
                        requestAnimationFrame(function() {
                          _this.adapter.setStyleProperty("width", chipWidth_1);
                          _this.adapter.setStyleProperty("padding", "0");
                          _this.adapter.setStyleProperty("margin", "0");
                          requestAnimationFrame(function() {
                            _this.adapter.setStyleProperty("width", "0");
                          });
                        });
                        return;
                      }
                      if (shouldHandle && widthIsAnimating) {
                        this.removeFocus();
                        var removedAnnouncement = this.adapter.getAttribute(constants_1.strings.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
                        this.adapter.notifyRemoval(removedAnnouncement);
                      }
                      if (!opacityIsAnimating) {
                        return;
                      }
                      var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.LEADING_ICON) && this.adapter.hasClass(constants_1.cssClasses.SELECTED);
                      var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.CHECKMARK) && !this.adapter.hasClass(constants_1.cssClasses.SELECTED);
                      if (shouldHideLeadingIcon) {
                        this.adapter.addClassToLeadingIcon(constants_1.cssClasses.HIDDEN_LEADING_ICON);
                        return;
                      }
                      if (shouldShowLeadingIcon) {
                        this.adapter.removeClassFromLeadingIcon(constants_1.cssClasses.HIDDEN_LEADING_ICON);
                        return;
                      }
                    };
                    MDCChipFoundation2.prototype.handleFocusIn = function(evt) {
                      if (!this.eventFromPrimaryAction(evt)) {
                        return;
                      }
                      this.adapter.addClass(constants_1.cssClasses.PRIMARY_ACTION_FOCUSED);
                    };
                    MDCChipFoundation2.prototype.handleFocusOut = function(evt) {
                      if (!this.eventFromPrimaryAction(evt)) {
                        return;
                      }
                      if (this.isEditing()) {
                        this.finishEditing();
                      }
                      this.adapter.removeClass(constants_1.cssClasses.PRIMARY_ACTION_FOCUSED);
                    };
                    MDCChipFoundation2.prototype.handleTrailingActionInteraction = function() {
                      this.adapter.notifyTrailingIconInteraction();
                      this.removeChip();
                    };
                    MDCChipFoundation2.prototype.handleKeydown = function(evt) {
                      if (this.isEditing()) {
                        if (this.shouldFinishEditing(evt)) {
                          evt.preventDefault();
                          this.finishEditing();
                        }
                        return;
                      }
                      if (this.isEditable()) {
                        if (this.shouldStartEditing(evt)) {
                          evt.preventDefault();
                          this.startEditing();
                        }
                      }
                      if (this.shouldNotifyInteraction(evt)) {
                        this.adapter.notifyInteraction();
                        this.setPrimaryActionFocusable(this.getFocusBehavior());
                        return;
                      }
                      if (this.isDeleteAction(evt)) {
                        evt.preventDefault();
                        this.removeChip();
                        return;
                      }
                      if (!constants_1.navigationKeys.has(evt.key)) {
                        return;
                      }
                      evt.preventDefault();
                      this.focusNextAction(evt.key, constants_1.EventSource.PRIMARY);
                    };
                    MDCChipFoundation2.prototype.handleTrailingActionNavigation = function(evt) {
                      this.focusNextAction(evt.detail.key, constants_1.EventSource.TRAILING);
                    };
                    MDCChipFoundation2.prototype.removeFocus = function() {
                      this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, "-1");
                      this.adapter.removeTrailingActionFocus();
                    };
                    MDCChipFoundation2.prototype.focusPrimaryAction = function() {
                      this.setPrimaryActionFocusable(FocusBehavior.SHOULD_FOCUS);
                    };
                    MDCChipFoundation2.prototype.focusTrailingAction = function() {
                      var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
                      if (trailingActionIsNavigable) {
                        this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, "-1");
                        this.adapter.focusTrailingAction();
                        return;
                      }
                      this.focusPrimaryAction();
                    };
                    MDCChipFoundation2.prototype.setPrimaryActionFocusable = function(focusBehavior) {
                      this.adapter.setPrimaryActionAttr(constants_1.strings.TAB_INDEX, "0");
                      if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
                        this.adapter.focusPrimaryAction();
                      }
                      this.adapter.removeTrailingActionFocus();
                    };
                    MDCChipFoundation2.prototype.getFocusBehavior = function() {
                      if (this.shouldFocusPrimaryActionOnClick) {
                        return FocusBehavior.SHOULD_FOCUS;
                      }
                      return FocusBehavior.SHOULD_NOT_FOCUS;
                    };
                    MDCChipFoundation2.prototype.focusNextAction = function(key, source) {
                      var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
                      var dir = this.getDirection(key);
                      if (constants_1.jumpChipKeys.has(key) || !isTrailingActionNavigable) {
                        this.adapter.notifyNavigation(key, source);
                        return;
                      }
                      if (source === constants_1.EventSource.PRIMARY && dir === constants_1.Direction.RIGHT) {
                        this.focusTrailingAction();
                        return;
                      }
                      if (source === constants_1.EventSource.TRAILING && dir === constants_1.Direction.LEFT) {
                        this.focusPrimaryAction();
                        return;
                      }
                      this.adapter.notifyNavigation(key, constants_1.EventSource.NONE);
                    };
                    MDCChipFoundation2.prototype.getDirection = function(key) {
                      var isRTL = this.adapter.isRTL();
                      var isLeftKey = key === constants_1.strings.ARROW_LEFT_KEY || key === constants_1.strings.IE_ARROW_LEFT_KEY;
                      var isRightKey = key === constants_1.strings.ARROW_RIGHT_KEY || key === constants_1.strings.IE_ARROW_RIGHT_KEY;
                      if (!isRTL && isLeftKey || isRTL && isRightKey) {
                        return constants_1.Direction.LEFT;
                      }
                      return constants_1.Direction.RIGHT;
                    };
                    MDCChipFoundation2.prototype.removeChip = function() {
                      if (this.shouldRemoveOnTrailingIconClick) {
                        this.beginExit();
                      }
                    };
                    MDCChipFoundation2.prototype.shouldStartEditing = function(evt) {
                      return this.eventFromPrimaryAction(evt) && evt.key === constants_1.strings.ENTER_KEY;
                    };
                    MDCChipFoundation2.prototype.shouldFinishEditing = function(evt) {
                      return evt.key === constants_1.strings.ENTER_KEY;
                    };
                    MDCChipFoundation2.prototype.shouldNotifyInteraction = function(evt) {
                      return evt.key === constants_1.strings.ENTER_KEY || evt.key === constants_1.strings.SPACEBAR_KEY;
                    };
                    MDCChipFoundation2.prototype.isDeleteAction = function(evt) {
                      var isDeletable = this.adapter.hasClass(constants_1.cssClasses.DELETABLE);
                      return isDeletable && (evt.key === constants_1.strings.BACKSPACE_KEY || evt.key === constants_1.strings.DELETE_KEY || evt.key === constants_1.strings.IE_DELETE_KEY);
                    };
                    MDCChipFoundation2.prototype.setSelectedImpl = function(selected) {
                      if (selected) {
                        this.adapter.addClass(constants_1.cssClasses.SELECTED);
                        this.adapter.setPrimaryActionAttr(constants_1.strings.ARIA_CHECKED, "true");
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.SELECTED);
                        this.adapter.setPrimaryActionAttr(constants_1.strings.ARIA_CHECKED, "false");
                      }
                    };
                    MDCChipFoundation2.prototype.notifySelection = function(selected) {
                      this.adapter.notifySelection(selected, false);
                    };
                    MDCChipFoundation2.prototype.notifyIgnoredSelection = function(selected) {
                      this.adapter.notifySelection(selected, true);
                    };
                    MDCChipFoundation2.prototype.eventFromPrimaryAction = function(evt) {
                      return this.adapter.eventTargetHasClass(evt.target, constants_1.cssClasses.PRIMARY_ACTION);
                    };
                    MDCChipFoundation2.prototype.startEditing = function() {
                      this.adapter.addClass(constants_1.cssClasses.EDITING);
                      this.adapter.notifyEditStart();
                    };
                    MDCChipFoundation2.prototype.finishEditing = function() {
                      this.adapter.removeClass(constants_1.cssClasses.EDITING);
                      this.adapter.notifyEditFinish();
                    };
                    return MDCChipFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCChipFoundation = MDCChipFoundation;
                exports2.default = MDCChipFoundation;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/index.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/index.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.chipStrings = exports2.chipCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-chips/deprecated/chip/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-chips/deprecated/chip/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/chip/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-chips/deprecated/chip/types.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/chip/constants.ts"
                );
                Object.defineProperty(exports2, "chipCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "chipStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/chip/types.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-chips/deprecated/chip/types.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/index.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-chips/deprecated/index.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./trailingaction/index */
                  "./packages/mdc-chips/deprecated/trailingaction/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./chip/index */
                  "./packages/mdc-chips/deprecated/chip/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./chip-set/index */
                  "./packages/mdc-chips/deprecated/chip-set/index.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/adapter.ts": (
              /*!*****************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/adapter.ts ***!
                \*****************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/component.ts": (
              /*!*******************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/component.ts ***!
                \*******************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChipTrailingAction = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/trailingaction/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/trailingaction/foundation.ts"
                );
                var MDCChipTrailingAction = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChipTrailingAction2, _super);
                    function MDCChipTrailingAction2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(MDCChipTrailingAction2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleSurface;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChipTrailingAction2.attachTo = function(root) {
                      return new MDCChipTrailingAction2(root);
                    };
                    MDCChipTrailingAction2.prototype.initialize = function(rippleFactory) {
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el, foundation) {
                          return new component_2.MDCRipple(el, foundation);
                        };
                      }
                      var rippleAdapter = component_2.MDCRipple.createAdapter(this);
                      this.rippleSurface = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
                    };
                    MDCChipTrailingAction2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleClick = function(evt) {
                        _this.foundation.handleClick(evt);
                      };
                      this.handleKeydown = function(evt) {
                        _this.foundation.handleKeydown(evt);
                      };
                      this.listen("click", this.handleClick);
                      this.listen("keydown", this.handleKeydown);
                    };
                    MDCChipTrailingAction2.prototype.destroy = function() {
                      this.rippleSurface.destroy();
                      this.unlisten("click", this.handleClick);
                      this.unlisten("keydown", this.handleKeydown);
                      _super.prototype.destroy.call(this);
                    };
                    MDCChipTrailingAction2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        focus: function focus() {
                          _this.root.focus();
                        },
                        getAttribute: function getAttribute(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        notifyInteraction: function notifyInteraction(trigger) {
                          return _this.emit(
                            constants_1.strings.INTERACTION_EVENT,
                            { trigger },
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyNavigation: function notifyNavigation(key) {
                          _this.emit(
                            constants_1.strings.NAVIGATION_EVENT,
                            { key },
                            true
                            /* shouldBubble */
                          );
                        },
                        setAttribute: function setAttribute(attr, value) {
                          _this.root.setAttribute(attr, value);
                        }
                      };
                      return new foundation_2.MDCChipTrailingActionFoundation(adapter);
                    };
                    MDCChipTrailingAction2.prototype.isNavigable = function() {
                      return this.foundation.isNavigable();
                    };
                    MDCChipTrailingAction2.prototype.focus = function() {
                      this.foundation.focus();
                    };
                    MDCChipTrailingAction2.prototype.removeFocus = function() {
                      this.foundation.removeFocus();
                    };
                    return MDCChipTrailingAction2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCChipTrailingAction = MDCChipTrailingAction;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/constants.ts": (
              /*!*******************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/constants.ts ***!
                \*******************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.InteractionTrigger = void 0;
                var InteractionTrigger;
                (function(InteractionTrigger2) {
                  InteractionTrigger2[InteractionTrigger2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
                  InteractionTrigger2[InteractionTrigger2["CLICK"] = 1] = "CLICK";
                  InteractionTrigger2[InteractionTrigger2["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
                  InteractionTrigger2[InteractionTrigger2["DELETE_KEY"] = 3] = "DELETE_KEY";
                  InteractionTrigger2[InteractionTrigger2["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
                  InteractionTrigger2[InteractionTrigger2["ENTER_KEY"] = 5] = "ENTER_KEY";
                })(InteractionTrigger = exports2.InteractionTrigger || (exports2.InteractionTrigger = {}));
                exports2.strings = {
                  ARIA_HIDDEN: "aria-hidden",
                  INTERACTION_EVENT: "MDCChipTrailingAction:interaction",
                  NAVIGATION_EVENT: "MDCChipTrailingAction:navigation",
                  TAB_INDEX: "tabindex"
                };
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/foundation.ts": (
              /*!********************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/foundation.ts ***!
                \********************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCChipTrailingActionFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var keyboard_1 = __webpack_require__(
                  /*! @material/dom/keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/trailingaction/constants.ts"
                );
                var MDCChipTrailingActionFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCChipTrailingActionFoundation2, _super);
                    function MDCChipTrailingActionFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCChipTrailingActionFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCChipTrailingActionFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          focus: function focus() {
                            return void 0;
                          },
                          getAttribute: function getAttribute() {
                            return null;
                          },
                          setAttribute: function setAttribute() {
                            return void 0;
                          },
                          notifyInteraction: function notifyInteraction() {
                            return void 0;
                          },
                          notifyNavigation: function notifyNavigation() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCChipTrailingActionFoundation2.prototype.handleClick = function(evt) {
                      evt.stopPropagation();
                      this.adapter.notifyInteraction(constants_1.InteractionTrigger.CLICK);
                    };
                    MDCChipTrailingActionFoundation2.prototype.handleKeydown = function(evt) {
                      evt.stopPropagation();
                      var key = keyboard_1.normalizeKey(evt);
                      if (this.shouldNotifyInteractionFromKey(key)) {
                        var trigger = this.getTriggerFromKey(key);
                        this.adapter.notifyInteraction(trigger);
                        return;
                      }
                      if (keyboard_1.isNavigationEvent(evt)) {
                        this.adapter.notifyNavigation(key);
                        return;
                      }
                    };
                    MDCChipTrailingActionFoundation2.prototype.removeFocus = function() {
                      this.adapter.setAttribute(constants_1.strings.TAB_INDEX, "-1");
                    };
                    MDCChipTrailingActionFoundation2.prototype.focus = function() {
                      this.adapter.setAttribute(constants_1.strings.TAB_INDEX, "0");
                      this.adapter.focus();
                    };
                    MDCChipTrailingActionFoundation2.prototype.isNavigable = function() {
                      return this.adapter.getAttribute(constants_1.strings.ARIA_HIDDEN) !== "true";
                    };
                    MDCChipTrailingActionFoundation2.prototype.shouldNotifyInteractionFromKey = function(key) {
                      var isFromActionKey = key === keyboard_1.KEY.ENTER || key === keyboard_1.KEY.SPACEBAR;
                      var isFromDeleteKey = key === keyboard_1.KEY.BACKSPACE || key === keyboard_1.KEY.DELETE;
                      return isFromActionKey || isFromDeleteKey;
                    };
                    MDCChipTrailingActionFoundation2.prototype.getTriggerFromKey = function(key) {
                      if (key === keyboard_1.KEY.SPACEBAR) {
                        return constants_1.InteractionTrigger.SPACEBAR_KEY;
                      }
                      if (key === keyboard_1.KEY.ENTER) {
                        return constants_1.InteractionTrigger.ENTER_KEY;
                      }
                      if (key === keyboard_1.KEY.DELETE) {
                        return constants_1.InteractionTrigger.DELETE_KEY;
                      }
                      if (key === keyboard_1.KEY.BACKSPACE) {
                        return constants_1.InteractionTrigger.BACKSPACE_KEY;
                      }
                      return constants_1.InteractionTrigger.UNSPECIFIED;
                    };
                    return MDCChipTrailingActionFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCChipTrailingActionFoundation = MDCChipTrailingActionFoundation;
                exports2.default = MDCChipTrailingActionFoundation;
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/index.ts": (
              /*!***************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/index.ts ***!
                \***************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.trailingActionStrings = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-chips/deprecated/trailingaction/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-chips/deprecated/trailingaction/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-chips/deprecated/trailingaction/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-chips/deprecated/trailingaction/types.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-chips/deprecated/trailingaction/constants.ts"
                );
                Object.defineProperty(exports2, "trailingActionStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-chips/deprecated/trailingaction/types.ts": (
              /*!***************************************************************!*\
                !*** ./packages/mdc-chips/deprecated/trailingaction/types.ts ***!
                \***************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-circular-progress/adapter.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-circular-progress/adapter.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-circular-progress/component.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-circular-progress/component.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCCircularProgress = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-circular-progress/foundation.ts"
                );
                var MDCCircularProgress = (
                  /** @class */
                  function(_super) {
                    __extends(MDCCircularProgress2, _super);
                    function MDCCircularProgress2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCCircularProgress2.prototype.initialize = function() {
                      this.determinateCircle = this.root.querySelector(foundation_1.MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);
                    };
                    MDCCircularProgress2.attachTo = function(root) {
                      return new MDCCircularProgress2(root);
                    };
                    Object.defineProperty(MDCCircularProgress2.prototype, "determinate", {
                      /**
                       * Sets whether the progress indicator is in determinate mode.
                       * @param isDeterminate Whether the indicator should be determinate.
                       */
                      set: function set(value) {
                        this.foundation.setDeterminate(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCircularProgress2.prototype, "progress", {
                      /**
                       * Sets the current progress value. In indeterminate mode, this has no
                       * visual effect but will be reflected if the indicator is switched to
                       * determinate mode.
                       * @param value The current progress value, which must be between 0 and 1.
                       */
                      set: function set(value) {
                        this.foundation.setProgress(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCircularProgress2.prototype, "isClosed", {
                      /**
                       * Whether the progress indicator is hidden.
                       */
                      get: function get() {
                        return this.foundation.isClosed();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCCircularProgress2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCCircularProgress2.prototype.close = function() {
                      this.foundation.close();
                    };
                    MDCCircularProgress2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        getDeterminateCircleAttribute: function getDeterminateCircleAttribute(attributeName) {
                          return _this.determinateCircle.getAttribute(attributeName);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        removeAttribute: function removeAttribute(attributeName) {
                          _this.root.removeAttribute(attributeName);
                        },
                        setAttribute: function setAttribute(attributeName, value) {
                          _this.root.setAttribute(attributeName, value);
                        },
                        setDeterminateCircleAttribute: function setDeterminateCircleAttribute(attributeName, value) {
                          _this.determinateCircle.setAttribute(attributeName, value);
                        }
                      };
                      return new foundation_1.MDCCircularProgressFoundation(adapter);
                    };
                    return MDCCircularProgress2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCCircularProgress = MDCCircularProgress;
              }
            ),
            /***/
            "./packages/mdc-circular-progress/constants.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-circular-progress/constants.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  INDETERMINATE_CLASS: "mdc-circular-progress--indeterminate",
                  CLOSED_CLASS: "mdc-circular-progress--closed"
                };
                exports2.strings = {
                  ARIA_HIDDEN: "aria-hidden",
                  ARIA_VALUENOW: "aria-valuenow",
                  DETERMINATE_CIRCLE_SELECTOR: ".mdc-circular-progress__determinate-circle",
                  RADIUS: "r",
                  STROKE_DASHOFFSET: "stroke-dashoffset"
                };
              }
            ),
            /***/
            "./packages/mdc-circular-progress/foundation.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-circular-progress/foundation.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCCircularProgressFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-circular-progress/constants.ts"
                );
                var MDCCircularProgressFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCCircularProgressFoundation2, _super);
                    function MDCCircularProgressFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCCircularProgressFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCircularProgressFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCCircularProgressFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          getDeterminateCircleAttribute: function getDeterminateCircleAttribute() {
                            return null;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          removeAttribute: function removeAttribute() {
                            return void 0;
                          },
                          setAttribute: function setAttribute() {
                            return void 0;
                          },
                          setDeterminateCircleAttribute: function setDeterminateCircleAttribute() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCCircularProgressFoundation2.prototype.init = function() {
                      this.closed = this.adapter.hasClass(constants_1.cssClasses.CLOSED_CLASS);
                      this.determinate = !this.adapter.hasClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                      this.progress = 0;
                      if (this.determinate) {
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress.toString());
                      }
                      this.radius = Number(this.adapter.getDeterminateCircleAttribute(constants_1.strings.RADIUS));
                    };
                    MDCCircularProgressFoundation2.prototype.setDeterminate = function(determinate) {
                      this.determinate = determinate;
                      if (this.determinate) {
                        this.adapter.removeClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                        this.setProgress(this.progress);
                      } else {
                        this.adapter.addClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                        this.adapter.removeAttribute(constants_1.strings.ARIA_VALUENOW);
                      }
                    };
                    MDCCircularProgressFoundation2.prototype.isDeterminate = function() {
                      return this.determinate;
                    };
                    MDCCircularProgressFoundation2.prototype.setProgress = function(value) {
                      this.progress = value;
                      if (this.determinate) {
                        var unfilledArcLength = (1 - this.progress) * (2 * Math.PI * this.radius);
                        this.adapter.setDeterminateCircleAttribute(constants_1.strings.STROKE_DASHOFFSET, "" + unfilledArcLength);
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress.toString());
                      }
                    };
                    MDCCircularProgressFoundation2.prototype.getProgress = function() {
                      return this.progress;
                    };
                    MDCCircularProgressFoundation2.prototype.open = function() {
                      this.closed = false;
                      this.adapter.removeClass(constants_1.cssClasses.CLOSED_CLASS);
                      this.adapter.removeAttribute(constants_1.strings.ARIA_HIDDEN);
                    };
                    MDCCircularProgressFoundation2.prototype.close = function() {
                      this.closed = true;
                      this.adapter.addClass(constants_1.cssClasses.CLOSED_CLASS);
                      this.adapter.setAttribute(constants_1.strings.ARIA_HIDDEN, "true");
                    };
                    MDCCircularProgressFoundation2.prototype.isClosed = function() {
                      return this.closed;
                    };
                    return MDCCircularProgressFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCCircularProgressFoundation = MDCCircularProgressFoundation;
                exports2.default = MDCCircularProgressFoundation;
              }
            ),
            /***/
            "./packages/mdc-circular-progress/index.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-circular-progress/index.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-circular-progress/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-circular-progress/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-circular-progress/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-circular-progress/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-data-table/adapter.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-data-table/adapter.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-data-table/component.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-data-table/component.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDataTable = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/checkbox/component */
                  "./packages/mdc-checkbox/component.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/linear-progress/component */
                  "./packages/mdc-linear-progress/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-data-table/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-data-table/foundation.ts"
                );
                var MDCDataTable = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDataTable2, _super);
                    function MDCDataTable2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCDataTable2.attachTo = function(root) {
                      return new MDCDataTable2(root);
                    };
                    MDCDataTable2.prototype.initialize = function(checkboxFactory) {
                      if (checkboxFactory === void 0) {
                        checkboxFactory = function checkboxFactory2(el) {
                          return new component_2.MDCCheckbox(el);
                        };
                      }
                      this.checkboxFactory = checkboxFactory;
                    };
                    MDCDataTable2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.headerRow = this.root.querySelector("." + constants_1.cssClasses.HEADER_ROW);
                      this.handleHeaderRowCheckboxChange = function() {
                        _this.foundation.handleHeaderRowCheckboxChange();
                      };
                      this.headerRow.addEventListener("change", this.handleHeaderRowCheckboxChange);
                      this.headerRowClickListener = function(event) {
                        _this.handleHeaderRowClick(event);
                      };
                      this.headerRow.addEventListener("click", this.headerRowClickListener);
                      this.content = this.root.querySelector("." + constants_1.cssClasses.CONTENT);
                      this.handleContentClick = function(event) {
                        var dataRowEl = ponyfill_1.closest(event.target, constants_1.selectors.ROW);
                        if (!dataRowEl)
                          return;
                        _this.foundation.handleRowClick({
                          rowId: _this.getRowIdByRowElement(dataRowEl),
                          row: dataRowEl
                        });
                      };
                      this.content.addEventListener("click", this.handleContentClick);
                      this.handleRowCheckboxChange = function(event) {
                        _this.foundation.handleRowCheckboxChange(event);
                      };
                      this.content.addEventListener("change", this.handleRowCheckboxChange);
                      this.layout();
                    };
                    MDCDataTable2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCDataTable2.prototype.getHeaderCells = function() {
                      return [].slice.call(this.root.querySelectorAll(constants_1.selectors.HEADER_CELL));
                    };
                    MDCDataTable2.prototype.getRows = function() {
                      return this.foundation.getRows();
                    };
                    MDCDataTable2.prototype.getSelectedRowIds = function() {
                      return this.foundation.getSelectedRowIds();
                    };
                    MDCDataTable2.prototype.setSelectedRowIds = function(rowIds) {
                      this.foundation.setSelectedRowIds(rowIds);
                    };
                    MDCDataTable2.prototype.showProgress = function() {
                      this.getLinearProgress().open();
                      this.foundation.showProgress();
                    };
                    MDCDataTable2.prototype.hideProgress = function() {
                      this.foundation.hideProgress();
                      this.getLinearProgress().close();
                    };
                    MDCDataTable2.prototype.destroy = function() {
                      var e_1, _a;
                      if (this.handleHeaderRowCheckboxChange) {
                        this.headerRow.removeEventListener("change", this.handleHeaderRowCheckboxChange);
                      }
                      if (this.headerRowClickListener) {
                        this.headerRow.removeEventListener("click", this.headerRowClickListener);
                      }
                      if (this.handleRowCheckboxChange) {
                        this.content.removeEventListener("change", this.handleRowCheckboxChange);
                      }
                      if (this.headerRowCheckbox) {
                        this.headerRowCheckbox.destroy();
                      }
                      if (this.rowCheckboxList) {
                        try {
                          for (var _b = __values(this.rowCheckboxList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var checkbox = _c.value;
                            checkbox.destroy();
                          }
                        } catch (e_1_1) {
                          e_1 = { error: e_1_1 };
                        } finally {
                          try {
                            if (_c && !_c.done && (_a = _b.return))
                              _a.call(_b);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                        }
                      }
                      if (this.handleContentClick) {
                        this.content.removeEventListener("click", this.handleContentClick);
                      }
                    };
                    MDCDataTable2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        getHeaderCellElements: function getHeaderCellElements() {
                          return _this.getHeaderCells();
                        },
                        getHeaderCellCount: function getHeaderCellCount() {
                          return _this.getHeaderCells().length;
                        },
                        getAttributeByHeaderCellIndex: function getAttributeByHeaderCellIndex(index, attribute) {
                          return _this.getHeaderCells()[index].getAttribute(attribute);
                        },
                        setAttributeByHeaderCellIndex: function setAttributeByHeaderCellIndex(index, attribute, value) {
                          _this.getHeaderCells()[index].setAttribute(attribute, value);
                        },
                        setClassNameByHeaderCellIndex: function setClassNameByHeaderCellIndex(index, className) {
                          _this.getHeaderCells()[index].classList.add(className);
                        },
                        removeClassNameByHeaderCellIndex: function removeClassNameByHeaderCellIndex(index, className) {
                          _this.getHeaderCells()[index].classList.remove(className);
                        },
                        notifySortAction: function notifySortAction(data) {
                          _this.emit(
                            constants_1.events.SORTED,
                            data,
                            /** shouldBubble */
                            true
                          );
                        },
                        getTableContainerHeight: function getTableContainerHeight() {
                          var tableContainer = _this.root.querySelector("." + constants_1.cssClasses.TABLE_CONTAINER);
                          if (!tableContainer) {
                            throw new Error("MDCDataTable: Table container element not found.");
                          }
                          return tableContainer.getBoundingClientRect().height;
                        },
                        getTableHeaderHeight: function getTableHeaderHeight() {
                          var tableHeader = _this.root.querySelector(constants_1.selectors.HEADER_ROW);
                          if (!tableHeader) {
                            throw new Error("MDCDataTable: Table header element not found.");
                          }
                          return tableHeader.getBoundingClientRect().height;
                        },
                        setProgressIndicatorStyles: function setProgressIndicatorStyles(styles) {
                          var progressIndicator = _this.root.querySelector(constants_1.selectors.PROGRESS_INDICATOR);
                          if (!progressIndicator) {
                            throw new Error("MDCDataTable: Progress indicator element not found.");
                          }
                          progressIndicator.style.setProperty("height", styles.height);
                          progressIndicator.style.setProperty("top", styles.top);
                        },
                        addClassAtRowIndex: function addClassAtRowIndex(rowIndex, className) {
                          _this.getRows()[rowIndex].classList.add(className);
                        },
                        getRowCount: function getRowCount() {
                          return _this.getRows().length;
                        },
                        getRowElements: function getRowElements() {
                          return [].slice.call(_this.root.querySelectorAll(constants_1.selectors.ROW));
                        },
                        getRowIdAtIndex: function getRowIdAtIndex(rowIndex) {
                          return _this.getRows()[rowIndex].getAttribute(constants_1.dataAttributes.ROW_ID);
                        },
                        getRowIndexByChildElement: function getRowIndexByChildElement(el) {
                          return _this.getRows().indexOf(ponyfill_1.closest(el, constants_1.selectors.ROW));
                        },
                        getSelectedRowCount: function getSelectedRowCount() {
                          return _this.root.querySelectorAll(constants_1.selectors.ROW_SELECTED).length;
                        },
                        isCheckboxAtRowIndexChecked: function isCheckboxAtRowIndexChecked(rowIndex) {
                          return _this.rowCheckboxList[rowIndex].checked;
                        },
                        isHeaderRowCheckboxChecked: function isHeaderRowCheckboxChecked() {
                          return _this.headerRowCheckbox.checked;
                        },
                        isRowsSelectable: function isRowsSelectable() {
                          return !!_this.root.querySelector(constants_1.selectors.ROW_CHECKBOX) || !!_this.root.querySelector(constants_1.selectors.HEADER_ROW_CHECKBOX);
                        },
                        notifyRowSelectionChanged: function notifyRowSelectionChanged(data) {
                          _this.emit(
                            constants_1.events.ROW_SELECTION_CHANGED,
                            {
                              row: _this.getRowByIndex(data.rowIndex),
                              rowId: _this.getRowIdByIndex(data.rowIndex),
                              rowIndex: data.rowIndex,
                              selected: data.selected
                            },
                            /** shouldBubble */
                            true
                          );
                        },
                        notifySelectedAll: function notifySelectedAll() {
                          _this.emit(
                            constants_1.events.SELECTED_ALL,
                            {},
                            /** shouldBubble */
                            true
                          );
                        },
                        notifyUnselectedAll: function notifyUnselectedAll() {
                          _this.emit(
                            constants_1.events.UNSELECTED_ALL,
                            {},
                            /** shouldBubble */
                            true
                          );
                        },
                        notifyRowClick: function notifyRowClick(data) {
                          _this.emit(
                            constants_1.events.ROW_CLICK,
                            data,
                            /** shouldBubble */
                            true
                          );
                        },
                        registerHeaderRowCheckbox: function registerHeaderRowCheckbox() {
                          if (_this.headerRowCheckbox) {
                            _this.headerRowCheckbox.destroy();
                          }
                          var checkboxEl = _this.root.querySelector(constants_1.selectors.HEADER_ROW_CHECKBOX);
                          _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);
                        },
                        registerRowCheckboxes: function registerRowCheckboxes() {
                          if (_this.rowCheckboxList) {
                            _this.rowCheckboxList.forEach(function(checkbox) {
                              checkbox.destroy();
                            });
                          }
                          _this.rowCheckboxList = [];
                          _this.getRows().forEach(function(rowEl) {
                            var checkbox = _this.checkboxFactory(rowEl.querySelector(constants_1.selectors.ROW_CHECKBOX));
                            _this.rowCheckboxList.push(checkbox);
                          });
                        },
                        removeClassAtRowIndex: function removeClassAtRowIndex(rowIndex, className) {
                          _this.getRows()[rowIndex].classList.remove(className);
                        },
                        setAttributeAtRowIndex: function setAttributeAtRowIndex(rowIndex, attr, value) {
                          _this.getRows()[rowIndex].setAttribute(attr, value);
                        },
                        setHeaderRowCheckboxChecked: function setHeaderRowCheckboxChecked(checked) {
                          _this.headerRowCheckbox.checked = checked;
                        },
                        setHeaderRowCheckboxIndeterminate: function setHeaderRowCheckboxIndeterminate(indeterminate) {
                          _this.headerRowCheckbox.indeterminate = indeterminate;
                        },
                        setRowCheckboxCheckedAtIndex: function setRowCheckboxCheckedAtIndex(rowIndex, checked) {
                          _this.rowCheckboxList[rowIndex].checked = checked;
                        },
                        setSortStatusLabelByHeaderCellIndex: function setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue) {
                          var headerCell = _this.getHeaderCells()[columnIndex];
                          var sortStatusLabel = headerCell.querySelector(constants_1.selectors.SORT_STATUS_LABEL);
                          if (!sortStatusLabel)
                            return;
                          sortStatusLabel.textContent = _this.getSortStatusMessageBySortValue(sortValue);
                        }
                      };
                      return new foundation_1.MDCDataTableFoundation(adapter);
                    };
                    MDCDataTable2.prototype.getRowByIndex = function(index) {
                      return this.getRows()[index];
                    };
                    MDCDataTable2.prototype.getRowIdByIndex = function(index) {
                      return this.getRowByIndex(index).getAttribute(constants_1.dataAttributes.ROW_ID);
                    };
                    MDCDataTable2.prototype.handleHeaderRowClick = function(event) {
                      var headerCell = ponyfill_1.closest(event.target, constants_1.selectors.HEADER_CELL_WITH_SORT);
                      if (!headerCell) {
                        return;
                      }
                      var columnId = headerCell.getAttribute(constants_1.dataAttributes.COLUMN_ID);
                      var columnIndex = this.getHeaderCells().indexOf(headerCell);
                      if (columnIndex === -1) {
                        return;
                      }
                      this.foundation.handleSortAction({ columnId, columnIndex, headerCell });
                    };
                    MDCDataTable2.prototype.getSortStatusMessageBySortValue = function(sortValue) {
                      switch (sortValue) {
                        case constants_1.SortValue.ASCENDING:
                          return constants_1.messages.SORTED_IN_ASCENDING;
                        case constants_1.SortValue.DESCENDING:
                          return constants_1.messages.SORTED_IN_DESCENDING;
                        default:
                          return "";
                      }
                    };
                    MDCDataTable2.prototype.getLinearProgressElement = function() {
                      var el = this.root.querySelector("." + constants_1.cssClasses.LINEAR_PROGRESS);
                      if (!el) {
                        throw new Error("MDCDataTable: linear progress element is not found.");
                      }
                      return el;
                    };
                    MDCDataTable2.prototype.getLinearProgress = function() {
                      if (!this.linearProgress) {
                        var el = this.getLinearProgressElement();
                        this.linearProgress = new component_3.MDCLinearProgress(el);
                      }
                      return this.linearProgress;
                    };
                    MDCDataTable2.prototype.getRowIdByRowElement = function(rowElement) {
                      return rowElement.getAttribute(constants_1.dataAttributes.ROW_ID);
                    };
                    return MDCDataTable2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCDataTable = MDCDataTable;
              }
            ),
            /***/
            "./packages/mdc-data-table/constants.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-data-table/constants.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.events = exports2.SortValue = exports2.strings = exports2.messages = exports2.selectors = exports2.dataAttributes = exports2.attributes = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  CELL: "mdc-data-table__cell",
                  CELL_NUMERIC: "mdc-data-table__cell--numeric",
                  CONTENT: "mdc-data-table__content",
                  HEADER_CELL: "mdc-data-table__header-cell",
                  HEADER_CELL_LABEL: "mdc-data-table__header-cell-label",
                  HEADER_CELL_SORTED: "mdc-data-table__header-cell--sorted",
                  HEADER_CELL_SORTED_DESCENDING: "mdc-data-table__header-cell--sorted-descending",
                  HEADER_CELL_WITH_SORT: "mdc-data-table__header-cell--with-sort",
                  HEADER_CELL_WRAPPER: "mdc-data-table__header-cell-wrapper",
                  HEADER_ROW: "mdc-data-table__header-row",
                  HEADER_ROW_CHECKBOX: "mdc-data-table__header-row-checkbox",
                  IN_PROGRESS: "mdc-data-table--in-progress",
                  LINEAR_PROGRESS: "mdc-data-table__linear-progress",
                  PAGINATION_ROWS_PER_PAGE_LABEL: "mdc-data-table__pagination-rows-per-page-label",
                  PAGINATION_ROWS_PER_PAGE_SELECT: "mdc-data-table__pagination-rows-per-page-select",
                  PROGRESS_INDICATOR: "mdc-data-table__progress-indicator",
                  ROOT: "mdc-data-table",
                  ROW: "mdc-data-table__row",
                  ROW_CHECKBOX: "mdc-data-table__row-checkbox",
                  ROW_SELECTED: "mdc-data-table__row--selected",
                  SORT_ICON_BUTTON: "mdc-data-table__sort-icon-button",
                  SORT_STATUS_LABEL: "mdc-data-table__sort-status-label",
                  TABLE_CONTAINER: "mdc-data-table__table-container"
                };
                exports2.attributes = {
                  ARIA_SELECTED: "aria-selected",
                  ARIA_SORT: "aria-sort"
                };
                exports2.dataAttributes = {
                  COLUMN_ID: "data-column-id",
                  ROW_ID: "data-row-id"
                };
                exports2.selectors = {
                  CONTENT: "." + exports2.cssClasses.CONTENT,
                  HEADER_CELL: "." + exports2.cssClasses.HEADER_CELL,
                  HEADER_CELL_WITH_SORT: "." + exports2.cssClasses.HEADER_CELL_WITH_SORT,
                  HEADER_ROW: "." + exports2.cssClasses.HEADER_ROW,
                  HEADER_ROW_CHECKBOX: "." + exports2.cssClasses.HEADER_ROW_CHECKBOX,
                  PROGRESS_INDICATOR: "." + exports2.cssClasses.PROGRESS_INDICATOR,
                  ROW: "." + exports2.cssClasses.ROW,
                  ROW_CHECKBOX: "." + exports2.cssClasses.ROW_CHECKBOX,
                  ROW_SELECTED: "." + exports2.cssClasses.ROW_SELECTED,
                  SORT_ICON_BUTTON: "." + exports2.cssClasses.SORT_ICON_BUTTON,
                  SORT_STATUS_LABEL: "." + exports2.cssClasses.SORT_STATUS_LABEL
                };
                exports2.messages = {
                  SORTED_IN_DESCENDING: "Sorted in descending order",
                  SORTED_IN_ASCENDING: "Sorted in ascending order"
                };
                exports2.strings = {
                  ARIA_SELECTED: exports2.attributes.ARIA_SELECTED,
                  ARIA_SORT: exports2.attributes.ARIA_SORT,
                  DATA_ROW_ID_ATTR: exports2.dataAttributes.ROW_ID,
                  HEADER_ROW_CHECKBOX_SELECTOR: exports2.selectors.HEADER_ROW_CHECKBOX,
                  ROW_CHECKBOX_SELECTOR: exports2.selectors.ROW_CHECKBOX,
                  ROW_SELECTED_SELECTOR: exports2.selectors.ROW_SELECTED,
                  ROW_SELECTOR: exports2.selectors.ROW
                };
                var SortValue;
                (function(SortValue2) {
                  SortValue2["ASCENDING"] = "ascending";
                  SortValue2["DESCENDING"] = "descending";
                  SortValue2["NONE"] = "none";
                  SortValue2["OTHER"] = "other";
                })(SortValue = exports2.SortValue || (exports2.SortValue = {}));
                exports2.events = {
                  ROW_CLICK: "MDCDataTable:rowClick",
                  ROW_SELECTION_CHANGED: "MDCDataTable:rowSelectionChanged",
                  SELECTED_ALL: "MDCDataTable:selectedAll",
                  SORTED: "MDCDataTable:sorted",
                  UNSELECTED_ALL: "MDCDataTable:unselectedAll"
                };
              }
            ),
            /***/
            "./packages/mdc-data-table/foundation.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-data-table/foundation.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
                  function adopt(value) {
                    return value instanceof P ? value : new P(function(resolve) {
                      resolve(value);
                    });
                  }
                  return new (P || (P = Promise))(function(resolve, reject) {
                    function fulfilled(value) {
                      try {
                        step(generator.next(value));
                      } catch (e) {
                        reject(e);
                      }
                    }
                    function rejected(value) {
                      try {
                        step(generator["throw"](value));
                      } catch (e) {
                        reject(e);
                      }
                    }
                    function step(result) {
                      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
                    }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                  });
                };
                var __generator = this && this.__generator || function(thisArg, body) {
                  var _ = { label: 0, sent: function sent() {
                    if (t[0] & 1)
                      throw t[1];
                    return t[1];
                  }, trys: [], ops: [] }, f, y, t, g;
                  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
                    return this;
                  }), g;
                  function verb(n) {
                    return function(v) {
                      return step([n, v]);
                    };
                  }
                  function step(op) {
                    if (f)
                      throw new TypeError("Generator is already executing.");
                    while (_) {
                      try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                          return t;
                        if (y = 0, t)
                          op = [op[0] & 2, t.value];
                        switch (op[0]) {
                          case 0:
                          case 1:
                            t = op;
                            break;
                          case 4:
                            _.label++;
                            return { value: op[1], done: false };
                          case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                          case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                          default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                              _ = 0;
                              continue;
                            }
                            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                              _.label = op[1];
                              break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                              _.label = t[1];
                              t = op;
                              break;
                            }
                            if (t && _.label < t[2]) {
                              _.label = t[2];
                              _.ops.push(op);
                              break;
                            }
                            if (t[2])
                              _.ops.pop();
                            _.trys.pop();
                            continue;
                        }
                        op = body.call(thisArg, _);
                      } catch (e) {
                        op = [6, e];
                        y = 0;
                      } finally {
                        f = t = 0;
                      }
                    }
                    if (op[0] & 5)
                      throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDataTableFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-data-table/constants.ts"
                );
                var MDCDataTableFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDataTableFoundation2, _super);
                    function MDCDataTableFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCDataTableFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCDataTableFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          addClassAtRowIndex: function addClassAtRowIndex() {
                            return void 0;
                          },
                          getAttributeByHeaderCellIndex: function getAttributeByHeaderCellIndex() {
                            return "";
                          },
                          getHeaderCellCount: function getHeaderCellCount() {
                            return 0;
                          },
                          getHeaderCellElements: function getHeaderCellElements() {
                            return [];
                          },
                          getRowCount: function getRowCount() {
                            return 0;
                          },
                          getRowElements: function getRowElements() {
                            return [];
                          },
                          getRowIdAtIndex: function getRowIdAtIndex() {
                            return "";
                          },
                          getRowIndexByChildElement: function getRowIndexByChildElement() {
                            return 0;
                          },
                          getSelectedRowCount: function getSelectedRowCount() {
                            return 0;
                          },
                          getTableContainerHeight: function getTableContainerHeight() {
                            return 0;
                          },
                          getTableHeaderHeight: function getTableHeaderHeight() {
                            return 0;
                          },
                          isCheckboxAtRowIndexChecked: function isCheckboxAtRowIndexChecked() {
                            return false;
                          },
                          isHeaderRowCheckboxChecked: function isHeaderRowCheckboxChecked() {
                            return false;
                          },
                          isRowsSelectable: function isRowsSelectable() {
                            return false;
                          },
                          notifyRowSelectionChanged: function notifyRowSelectionChanged() {
                            return void 0;
                          },
                          notifySelectedAll: function notifySelectedAll() {
                            return void 0;
                          },
                          notifySortAction: function notifySortAction() {
                            return void 0;
                          },
                          notifyUnselectedAll: function notifyUnselectedAll() {
                            return void 0;
                          },
                          notifyRowClick: function notifyRowClick() {
                            return void 0;
                          },
                          registerHeaderRowCheckbox: function registerHeaderRowCheckbox() {
                            return void 0;
                          },
                          registerRowCheckboxes: function registerRowCheckboxes() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          removeClassAtRowIndex: function removeClassAtRowIndex() {
                            return void 0;
                          },
                          removeClassNameByHeaderCellIndex: function removeClassNameByHeaderCellIndex() {
                            return void 0;
                          },
                          setAttributeAtRowIndex: function setAttributeAtRowIndex() {
                            return void 0;
                          },
                          setAttributeByHeaderCellIndex: function setAttributeByHeaderCellIndex() {
                            return void 0;
                          },
                          setClassNameByHeaderCellIndex: function setClassNameByHeaderCellIndex() {
                            return void 0;
                          },
                          setHeaderRowCheckboxChecked: function setHeaderRowCheckboxChecked() {
                            return void 0;
                          },
                          setHeaderRowCheckboxIndeterminate: function setHeaderRowCheckboxIndeterminate() {
                            return void 0;
                          },
                          setProgressIndicatorStyles: function setProgressIndicatorStyles() {
                            return void 0;
                          },
                          setRowCheckboxCheckedAtIndex: function setRowCheckboxCheckedAtIndex() {
                            return void 0;
                          },
                          setSortStatusLabelByHeaderCellIndex: function setSortStatusLabelByHeaderCellIndex() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCDataTableFoundation2.prototype.layout = function() {
                      if (this.adapter.isRowsSelectable()) {
                        this.adapter.registerHeaderRowCheckbox();
                        this.adapter.registerRowCheckboxes();
                        this.setHeaderRowCheckboxState();
                      }
                    };
                    MDCDataTableFoundation2.prototype.layoutAsync = function() {
                      return __awaiter(this, void 0, void 0, function() {
                        return __generator(this, function(_a) {
                          switch (_a.label) {
                            case 0:
                              if (!this.adapter.isRowsSelectable())
                                return [3, 3];
                              return [4, this.adapter.registerHeaderRowCheckbox()];
                            case 1:
                              _a.sent();
                              return [4, this.adapter.registerRowCheckboxes()];
                            case 2:
                              _a.sent();
                              this.setHeaderRowCheckboxState();
                              _a.label = 3;
                            case 3:
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    };
                    MDCDataTableFoundation2.prototype.getRows = function() {
                      return this.adapter.getRowElements();
                    };
                    MDCDataTableFoundation2.prototype.getHeaderCells = function() {
                      return this.adapter.getHeaderCellElements();
                    };
                    MDCDataTableFoundation2.prototype.setSelectedRowIds = function(rowIds) {
                      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                        var rowId = this.adapter.getRowIdAtIndex(rowIndex);
                        var isSelected = false;
                        if (rowId && rowIds.indexOf(rowId) >= 0) {
                          isSelected = true;
                        }
                        this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
                        this.selectRowAtIndex(rowIndex, isSelected);
                      }
                      this.setHeaderRowCheckboxState();
                    };
                    MDCDataTableFoundation2.prototype.getRowIds = function() {
                      var rowIds = [];
                      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                        rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
                      }
                      return rowIds;
                    };
                    MDCDataTableFoundation2.prototype.getSelectedRowIds = function() {
                      var selectedRowIds = [];
                      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                        if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
                          selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
                        }
                      }
                      return selectedRowIds;
                    };
                    MDCDataTableFoundation2.prototype.handleHeaderRowCheckboxChange = function() {
                      var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
                      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
                        this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
                        this.selectRowAtIndex(rowIndex, isHeaderChecked);
                      }
                      if (isHeaderChecked) {
                        this.adapter.notifySelectedAll();
                      } else {
                        this.adapter.notifyUnselectedAll();
                      }
                    };
                    MDCDataTableFoundation2.prototype.handleRowCheckboxChange = function(event) {
                      var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
                      if (rowIndex === -1) {
                        return;
                      }
                      var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
                      this.selectRowAtIndex(rowIndex, selected);
                      this.setHeaderRowCheckboxState();
                      var rowId = this.adapter.getRowIdAtIndex(rowIndex);
                      this.adapter.notifyRowSelectionChanged({ rowId, rowIndex, selected });
                    };
                    MDCDataTableFoundation2.prototype.handleSortAction = function(eventData) {
                      var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;
                      for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
                        if (index === columnIndex) {
                          continue;
                        }
                        this.adapter.removeClassNameByHeaderCellIndex(index, constants_1.cssClasses.HEADER_CELL_SORTED);
                        this.adapter.removeClassNameByHeaderCellIndex(index, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                        this.adapter.setAttributeByHeaderCellIndex(index, constants_1.strings.ARIA_SORT, constants_1.SortValue.NONE);
                        this.adapter.setSortStatusLabelByHeaderCellIndex(index, constants_1.SortValue.NONE);
                      }
                      this.adapter.setClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED);
                      var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT);
                      var sortValue = constants_1.SortValue.NONE;
                      if (currentSortValue === constants_1.SortValue.ASCENDING) {
                        this.adapter.setClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                        this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.DESCENDING);
                        sortValue = constants_1.SortValue.DESCENDING;
                      } else if (currentSortValue === constants_1.SortValue.DESCENDING) {
                        this.adapter.removeClassNameByHeaderCellIndex(columnIndex, constants_1.cssClasses.HEADER_CELL_SORTED_DESCENDING);
                        this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.ASCENDING);
                        sortValue = constants_1.SortValue.ASCENDING;
                      } else {
                        this.adapter.setAttributeByHeaderCellIndex(columnIndex, constants_1.strings.ARIA_SORT, constants_1.SortValue.ASCENDING);
                        sortValue = constants_1.SortValue.ASCENDING;
                      }
                      this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
                      this.adapter.notifySortAction({
                        columnId,
                        columnIndex,
                        headerCell,
                        sortValue
                      });
                    };
                    MDCDataTableFoundation2.prototype.handleRowClick = function(_a) {
                      var rowId = _a.rowId, row = _a.row;
                      this.adapter.notifyRowClick({
                        rowId,
                        row
                      });
                    };
                    MDCDataTableFoundation2.prototype.showProgress = function() {
                      var tableHeaderHeight = this.adapter.getTableHeaderHeight();
                      var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
                      var top = tableHeaderHeight;
                      this.adapter.setProgressIndicatorStyles({
                        height: height + "px",
                        top: top + "px"
                      });
                      this.adapter.addClass(constants_1.cssClasses.IN_PROGRESS);
                    };
                    MDCDataTableFoundation2.prototype.hideProgress = function() {
                      this.adapter.removeClass(constants_1.cssClasses.IN_PROGRESS);
                    };
                    MDCDataTableFoundation2.prototype.setHeaderRowCheckboxState = function() {
                      if (this.adapter.getSelectedRowCount() === 0) {
                        this.adapter.setHeaderRowCheckboxChecked(false);
                        this.adapter.setHeaderRowCheckboxIndeterminate(false);
                      } else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
                        this.adapter.setHeaderRowCheckboxChecked(true);
                        this.adapter.setHeaderRowCheckboxIndeterminate(false);
                      } else {
                        this.adapter.setHeaderRowCheckboxIndeterminate(true);
                        this.adapter.setHeaderRowCheckboxChecked(false);
                      }
                    };
                    MDCDataTableFoundation2.prototype.selectRowAtIndex = function(rowIndex, selected) {
                      if (selected) {
                        this.adapter.addClassAtRowIndex(rowIndex, constants_1.cssClasses.ROW_SELECTED);
                        this.adapter.setAttributeAtRowIndex(rowIndex, constants_1.strings.ARIA_SELECTED, "true");
                      } else {
                        this.adapter.removeClassAtRowIndex(rowIndex, constants_1.cssClasses.ROW_SELECTED);
                        this.adapter.setAttributeAtRowIndex(rowIndex, constants_1.strings.ARIA_SELECTED, "false");
                      }
                    };
                    return MDCDataTableFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCDataTableFoundation = MDCDataTableFoundation;
              }
            ),
            /***/
            "./packages/mdc-data-table/index.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-data-table/index.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-data-table/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-data-table/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-data-table/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-data-table/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-data-table/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-data-table/types.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-data-table/types.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                ;
              }
            ),
            /***/
            "./packages/mdc-dialog/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-dialog/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-dialog/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-dialog/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDialog = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var focus_trap_1 = __webpack_require__(
                  /*! @material/dom/focus-trap */
                  "./packages/mdc-dom/focus-trap.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-dialog/foundation.ts"
                );
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-dialog/util.ts"
                ));
                var strings = foundation_1.MDCDialogFoundation.strings;
                var MDCDialog = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDialog2, _super);
                    function MDCDialog2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(MDCDialog2.prototype, "isOpen", {
                      get: function get() {
                        return this.foundation.isOpen();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialog2.prototype, "escapeKeyAction", {
                      get: function get() {
                        return this.foundation.getEscapeKeyAction();
                      },
                      set: function set(action) {
                        this.foundation.setEscapeKeyAction(action);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialog2.prototype, "scrimClickAction", {
                      get: function get() {
                        return this.foundation.getScrimClickAction();
                      },
                      set: function set(action) {
                        this.foundation.setScrimClickAction(action);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialog2.prototype, "autoStackButtons", {
                      get: function get() {
                        return this.foundation.getAutoStackButtons();
                      },
                      set: function set(autoStack) {
                        this.foundation.setAutoStackButtons(autoStack);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCDialog2.attachTo = function(root) {
                      return new MDCDialog2(root);
                    };
                    MDCDialog2.prototype.initialize = function(focusTrapFactory) {
                      var e_1, _a;
                      if (focusTrapFactory === void 0) {
                        focusTrapFactory = function focusTrapFactory2(el, focusOptions) {
                          return new focus_trap_1.FocusTrap(el, focusOptions);
                        };
                      }
                      var container = this.root.querySelector(strings.CONTAINER_SELECTOR);
                      if (!container) {
                        throw new Error("Dialog component requires a " + strings.CONTAINER_SELECTOR + " container element");
                      }
                      this.container = container;
                      this.content = this.root.querySelector(strings.CONTENT_SELECTOR);
                      this.buttons = [].slice.call(this.root.querySelectorAll(strings.BUTTON_SELECTOR));
                      this.defaultButton = this.root.querySelector("[" + strings.BUTTON_DEFAULT_ATTRIBUTE + "]");
                      this.focusTrapFactory = focusTrapFactory;
                      this.buttonRipples = [];
                      try {
                        for (var _b = __values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var buttonEl = _c.value;
                          this.buttonRipples.push(new component_2.MDCRipple(buttonEl));
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    MDCDialog2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.focusTrap = util.createFocusTrapInstance(this.container, this.focusTrapFactory, this.getInitialFocusEl() || void 0);
                      this.handleClick = this.foundation.handleClick.bind(this.foundation);
                      this.handleKeydown = this.foundation.handleKeydown.bind(this.foundation);
                      this.handleDocumentKeydown = this.foundation.handleDocumentKeydown.bind(this.foundation);
                      this.handleOpening = function() {
                        document.addEventListener("keydown", _this.handleDocumentKeydown);
                      };
                      this.handleClosing = function() {
                        document.removeEventListener("keydown", _this.handleDocumentKeydown);
                      };
                      this.listen("click", this.handleClick);
                      this.listen("keydown", this.handleKeydown);
                      this.listen(strings.OPENING_EVENT, this.handleOpening);
                      this.listen(strings.CLOSING_EVENT, this.handleClosing);
                    };
                    MDCDialog2.prototype.destroy = function() {
                      this.unlisten("click", this.handleClick);
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten(strings.OPENING_EVENT, this.handleOpening);
                      this.unlisten(strings.CLOSING_EVENT, this.handleClosing);
                      this.handleClosing();
                      this.buttonRipples.forEach(function(ripple) {
                        ripple.destroy();
                      });
                      _super.prototype.destroy.call(this);
                    };
                    MDCDialog2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCDialog2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCDialog2.prototype.close = function(action) {
                      if (action === void 0) {
                        action = "";
                      }
                      this.foundation.close(action);
                    };
                    MDCDialog2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addBodyClass: function addBodyClass(className) {
                          return document.body.classList.add(className);
                        },
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        areButtonsStacked: function areButtonsStacked() {
                          return util.areTopsMisaligned(_this.buttons);
                        },
                        clickDefaultButton: function clickDefaultButton() {
                          if (_this.defaultButton && !_this.defaultButton.disabled) {
                            _this.defaultButton.click();
                          }
                        },
                        eventTargetMatches: function eventTargetMatches(target, selector) {
                          return target ? ponyfill_1.matches(target, selector) : false;
                        },
                        getActionFromEvent: function getActionFromEvent(evt) {
                          if (!evt.target) {
                            return "";
                          }
                          var element = ponyfill_1.closest(evt.target, "[" + strings.ACTION_ATTRIBUTE + "]");
                          return element && element.getAttribute(strings.ACTION_ATTRIBUTE);
                        },
                        getInitialFocusEl: function getInitialFocusEl() {
                          return _this.getInitialFocusEl();
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        isContentScrollable: function isContentScrollable() {
                          return util.isScrollable(_this.content);
                        },
                        notifyClosed: function notifyClosed(action) {
                          return _this.emit(strings.CLOSED_EVENT, action ? { action } : {});
                        },
                        notifyClosing: function notifyClosing(action) {
                          return _this.emit(strings.CLOSING_EVENT, action ? { action } : {});
                        },
                        notifyOpened: function notifyOpened() {
                          return _this.emit(strings.OPENED_EVENT, {});
                        },
                        notifyOpening: function notifyOpening() {
                          return _this.emit(strings.OPENING_EVENT, {});
                        },
                        releaseFocus: function releaseFocus() {
                          _this.focusTrap.releaseFocus();
                        },
                        removeBodyClass: function removeBodyClass(className) {
                          return document.body.classList.remove(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        reverseButtons: function reverseButtons() {
                          _this.buttons.reverse();
                          _this.buttons.forEach(function(button) {
                            button.parentElement.appendChild(button);
                          });
                        },
                        trapFocus: function trapFocus() {
                          _this.focusTrap.trapFocus();
                        },
                        registerContentEventHandler: function registerContentEventHandler(evt, handler) {
                          if (_this.content instanceof HTMLElement) {
                            _this.content.addEventListener(evt, handler);
                          }
                        },
                        deregisterContentEventHandler: function deregisterContentEventHandler(evt, handler) {
                          if (_this.content instanceof HTMLElement) {
                            _this.content.removeEventListener(evt, handler);
                          }
                        },
                        isScrollableContentAtTop: function isScrollableContentAtTop() {
                          return util.isScrollAtTop(_this.content);
                        },
                        isScrollableContentAtBottom: function isScrollableContentAtBottom() {
                          return util.isScrollAtBottom(_this.content);
                        },
                        registerWindowEventHandler: function registerWindowEventHandler(evt, handler) {
                          window.addEventListener(evt, handler);
                        },
                        deregisterWindowEventHandler: function deregisterWindowEventHandler(evt, handler) {
                          window.removeEventListener(evt, handler);
                        }
                      };
                      return new foundation_1.MDCDialogFoundation(adapter);
                    };
                    MDCDialog2.prototype.getInitialFocusEl = function() {
                      return this.root.querySelector("[" + strings.INITIAL_FOCUS_ATTRIBUTE + "]");
                    };
                    return MDCDialog2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCDialog = MDCDialog;
              }
            ),
            /***/
            "./packages/mdc-dialog/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-dialog/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  CLOSING: "mdc-dialog--closing",
                  OPEN: "mdc-dialog--open",
                  OPENING: "mdc-dialog--opening",
                  SCROLLABLE: "mdc-dialog--scrollable",
                  SCROLL_LOCK: "mdc-dialog-scroll-lock",
                  STACKED: "mdc-dialog--stacked",
                  FULLSCREEN: "mdc-dialog--fullscreen",
                  // Class for showing a scroll divider on full-screen dialog header element.
                  // Should only be displayed on scrollable content, when the dialog content is
                  // scrolled "underneath" the header.
                  SCROLL_DIVIDER_HEADER: "mdc-dialog-scroll-divider-header",
                  // Class for showing a scroll divider on a full-screen dialog footer element.
                  // Should only be displayed on scrolalble content, when the dialog content is
                  // obscured "underneath" the footer.
                  SCROLL_DIVIDER_FOOTER: "mdc-dialog-scroll-divider-footer",
                  // The "surface scrim" is a scrim covering only the surface of a dialog. This
                  // is used in situations where a confirmation dialog is shown over an already
                  // opened full-screen dialog. On larger screen-sizes, the full-screen dialog
                  // is sized as a modal and so in these situations we display a "surface scrim"
                  // to prevent a "double scrim" (where the scrim from the secondary
                  // confirmation dialog would overlap with the scrim from the full-screen
                  // dialog).
                  SURFACE_SCRIM_SHOWN: "mdc-dialog__surface-scrim--shown",
                  // "Showing" animating class for the surface-scrim.
                  SURFACE_SCRIM_SHOWING: "mdc-dialog__surface-scrim--showing",
                  // "Hiding" animating class for the surface-scrim.
                  SURFACE_SCRIM_HIDING: "mdc-dialog__surface-scrim--hiding",
                  // Class to hide a dialog's scrim (used in conjunction with a surface-scrim).
                  // Note that we only hide the original scrim rather than removing it entirely
                  // to prevent interactions with the content behind this scrim, and to capture
                  // scrim clicks.
                  SCRIM_HIDDEN: "mdc-dialog__scrim--hidden"
                };
                exports2.strings = {
                  ACTION_ATTRIBUTE: "data-mdc-dialog-action",
                  BUTTON_DEFAULT_ATTRIBUTE: "data-mdc-dialog-button-default",
                  BUTTON_SELECTOR: ".mdc-dialog__button",
                  CLOSED_EVENT: "MDCDialog:closed",
                  CLOSE_ACTION: "close",
                  CLOSING_EVENT: "MDCDialog:closing",
                  CONTAINER_SELECTOR: ".mdc-dialog__container",
                  CONTENT_SELECTOR: ".mdc-dialog__content",
                  DESTROY_ACTION: "destroy",
                  INITIAL_FOCUS_ATTRIBUTE: "data-mdc-dialog-initial-focus",
                  OPENED_EVENT: "MDCDialog:opened",
                  OPENING_EVENT: "MDCDialog:opening",
                  SCRIM_SELECTOR: ".mdc-dialog__scrim",
                  SUPPRESS_DEFAULT_PRESS_SELECTOR: ["textarea", ".mdc-menu .mdc-list-item", ".mdc-menu .mdc-deprecated-list-item"].join(", "),
                  SURFACE_SELECTOR: ".mdc-dialog__surface"
                };
                exports2.numbers = {
                  DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
                  DIALOG_ANIMATION_OPEN_TIME_MS: 150
                };
              }
            ),
            /***/
            "./packages/mdc-dialog/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-dialog/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDialogFoundation = void 0;
                var animationframe_1 = __webpack_require__(
                  /*! @material/animation/animationframe */
                  "./packages/mdc-animation/animationframe.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-dialog/constants.ts"
                );
                var AnimationKeys;
                (function(AnimationKeys2) {
                  AnimationKeys2["POLL_SCROLL_POS"] = "poll_scroll_position";
                  AnimationKeys2["POLL_LAYOUT_CHANGE"] = "poll_layout_change";
                })(AnimationKeys || (AnimationKeys = {}));
                var MDCDialogFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDialogFoundation2, _super);
                    function MDCDialogFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCDialogFoundation2.defaultAdapter), adapter)) || this;
                      _this.dialogOpen = false;
                      _this.isFullscreen = false;
                      _this.animationFrame = 0;
                      _this.animationTimer = 0;
                      _this.escapeKeyAction = constants_1.strings.CLOSE_ACTION;
                      _this.scrimClickAction = constants_1.strings.CLOSE_ACTION;
                      _this.autoStackButtons = true;
                      _this.areButtonsStacked = false;
                      _this.suppressDefaultPressSelector = constants_1.strings.SUPPRESS_DEFAULT_PRESS_SELECTOR;
                      _this.animFrame = new animationframe_1.AnimationFrame();
                      _this.contentScrollHandler = function() {
                        _this.handleScrollEvent();
                      };
                      _this.windowResizeHandler = function() {
                        _this.layout();
                      };
                      _this.windowOrientationChangeHandler = function() {
                        _this.layout();
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCDialogFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialogFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialogFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDialogFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addBodyClass: function addBodyClass() {
                            return void 0;
                          },
                          addClass: function addClass() {
                            return void 0;
                          },
                          areButtonsStacked: function areButtonsStacked() {
                            return false;
                          },
                          clickDefaultButton: function clickDefaultButton() {
                            return void 0;
                          },
                          eventTargetMatches: function eventTargetMatches() {
                            return false;
                          },
                          getActionFromEvent: function getActionFromEvent() {
                            return "";
                          },
                          getInitialFocusEl: function getInitialFocusEl() {
                            return null;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          isContentScrollable: function isContentScrollable() {
                            return false;
                          },
                          notifyClosed: function notifyClosed() {
                            return void 0;
                          },
                          notifyClosing: function notifyClosing() {
                            return void 0;
                          },
                          notifyOpened: function notifyOpened() {
                            return void 0;
                          },
                          notifyOpening: function notifyOpening() {
                            return void 0;
                          },
                          releaseFocus: function releaseFocus() {
                            return void 0;
                          },
                          removeBodyClass: function removeBodyClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          reverseButtons: function reverseButtons() {
                            return void 0;
                          },
                          trapFocus: function trapFocus() {
                            return void 0;
                          },
                          registerContentEventHandler: function registerContentEventHandler() {
                            return void 0;
                          },
                          deregisterContentEventHandler: function deregisterContentEventHandler() {
                            return void 0;
                          },
                          isScrollableContentAtTop: function isScrollableContentAtTop() {
                            return false;
                          },
                          isScrollableContentAtBottom: function isScrollableContentAtBottom() {
                            return false;
                          },
                          registerWindowEventHandler: function registerWindowEventHandler() {
                            return void 0;
                          },
                          deregisterWindowEventHandler: function deregisterWindowEventHandler() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCDialogFoundation2.prototype.init = function() {
                      if (this.adapter.hasClass(constants_1.cssClasses.STACKED)) {
                        this.setAutoStackButtons(false);
                      }
                      this.isFullscreen = this.adapter.hasClass(constants_1.cssClasses.FULLSCREEN);
                    };
                    MDCDialogFoundation2.prototype.destroy = function() {
                      if (this.animationTimer) {
                        clearTimeout(this.animationTimer);
                        this.handleAnimationTimerEnd();
                      }
                      if (this.isFullscreen) {
                        this.adapter.deregisterContentEventHandler("scroll", this.contentScrollHandler);
                      }
                      this.animFrame.cancelAll();
                      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
                      this.adapter.deregisterWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
                    };
                    MDCDialogFoundation2.prototype.open = function(dialogOptions) {
                      var _this = this;
                      this.dialogOpen = true;
                      this.adapter.notifyOpening();
                      this.adapter.addClass(constants_1.cssClasses.OPENING);
                      if (this.isFullscreen) {
                        this.adapter.registerContentEventHandler("scroll", this.contentScrollHandler);
                      }
                      if (dialogOptions && dialogOptions.isAboveFullscreenDialog) {
                        this.adapter.addClass(constants_1.cssClasses.SCRIM_HIDDEN);
                      }
                      this.adapter.registerWindowEventHandler("resize", this.windowResizeHandler);
                      this.adapter.registerWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
                      this.runNextAnimationFrame(function() {
                        _this.adapter.addClass(constants_1.cssClasses.OPEN);
                        _this.adapter.addBodyClass(constants_1.cssClasses.SCROLL_LOCK);
                        _this.layout();
                        _this.animationTimer = setTimeout(function() {
                          _this.handleAnimationTimerEnd();
                          _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());
                          _this.adapter.notifyOpened();
                        }, constants_1.numbers.DIALOG_ANIMATION_OPEN_TIME_MS);
                      });
                    };
                    MDCDialogFoundation2.prototype.close = function(action) {
                      var _this = this;
                      if (action === void 0) {
                        action = "";
                      }
                      if (!this.dialogOpen) {
                        return;
                      }
                      this.dialogOpen = false;
                      this.adapter.notifyClosing(action);
                      this.adapter.addClass(constants_1.cssClasses.CLOSING);
                      this.adapter.removeClass(constants_1.cssClasses.OPEN);
                      this.adapter.removeBodyClass(constants_1.cssClasses.SCROLL_LOCK);
                      if (this.isFullscreen) {
                        this.adapter.deregisterContentEventHandler("scroll", this.contentScrollHandler);
                      }
                      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
                      this.adapter.deregisterWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = 0;
                      clearTimeout(this.animationTimer);
                      this.animationTimer = setTimeout(function() {
                        _this.adapter.releaseFocus();
                        _this.handleAnimationTimerEnd();
                        _this.adapter.notifyClosed(action);
                      }, constants_1.numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);
                    };
                    MDCDialogFoundation2.prototype.showSurfaceScrim = function() {
                      var _this = this;
                      this.adapter.addClass(constants_1.cssClasses.SURFACE_SCRIM_SHOWING);
                      this.runNextAnimationFrame(function() {
                        _this.adapter.addClass(constants_1.cssClasses.SURFACE_SCRIM_SHOWN);
                      });
                    };
                    MDCDialogFoundation2.prototype.hideSurfaceScrim = function() {
                      this.adapter.removeClass(constants_1.cssClasses.SURFACE_SCRIM_SHOWN);
                      this.adapter.addClass(constants_1.cssClasses.SURFACE_SCRIM_HIDING);
                    };
                    MDCDialogFoundation2.prototype.handleSurfaceScrimTransitionEnd = function() {
                      this.adapter.removeClass(constants_1.cssClasses.SURFACE_SCRIM_HIDING);
                      this.adapter.removeClass(constants_1.cssClasses.SURFACE_SCRIM_SHOWING);
                    };
                    MDCDialogFoundation2.prototype.isOpen = function() {
                      return this.dialogOpen;
                    };
                    MDCDialogFoundation2.prototype.getEscapeKeyAction = function() {
                      return this.escapeKeyAction;
                    };
                    MDCDialogFoundation2.prototype.setEscapeKeyAction = function(action) {
                      this.escapeKeyAction = action;
                    };
                    MDCDialogFoundation2.prototype.getScrimClickAction = function() {
                      return this.scrimClickAction;
                    };
                    MDCDialogFoundation2.prototype.setScrimClickAction = function(action) {
                      this.scrimClickAction = action;
                    };
                    MDCDialogFoundation2.prototype.getAutoStackButtons = function() {
                      return this.autoStackButtons;
                    };
                    MDCDialogFoundation2.prototype.setAutoStackButtons = function(autoStack) {
                      this.autoStackButtons = autoStack;
                    };
                    MDCDialogFoundation2.prototype.getSuppressDefaultPressSelector = function() {
                      return this.suppressDefaultPressSelector;
                    };
                    MDCDialogFoundation2.prototype.setSuppressDefaultPressSelector = function(selector) {
                      this.suppressDefaultPressSelector = selector;
                    };
                    MDCDialogFoundation2.prototype.layout = function() {
                      var _this = this;
                      this.animFrame.request(AnimationKeys.POLL_LAYOUT_CHANGE, function() {
                        _this.layoutInternal();
                      });
                    };
                    MDCDialogFoundation2.prototype.handleClick = function(evt) {
                      var isScrim = this.adapter.eventTargetMatches(evt.target, constants_1.strings.SCRIM_SELECTOR);
                      if (isScrim && this.scrimClickAction !== "") {
                        this.close(this.scrimClickAction);
                      } else {
                        var action = this.adapter.getActionFromEvent(evt);
                        if (action) {
                          this.close(action);
                        }
                      }
                    };
                    MDCDialogFoundation2.prototype.handleKeydown = function(evt) {
                      var isEnter = evt.key === "Enter" || evt.keyCode === 13;
                      if (!isEnter) {
                        return;
                      }
                      var action = this.adapter.getActionFromEvent(evt);
                      if (action) {
                        return;
                      }
                      var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
                      var isDefault = this.suppressDefaultPressSelector ? !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector) : true;
                      if (isEnter && isDefault) {
                        this.adapter.clickDefaultButton();
                      }
                    };
                    MDCDialogFoundation2.prototype.handleDocumentKeydown = function(evt) {
                      var isEscape = evt.key === "Escape" || evt.keyCode === 27;
                      if (isEscape && this.escapeKeyAction !== "") {
                        this.close(this.escapeKeyAction);
                      }
                    };
                    MDCDialogFoundation2.prototype.handleScrollEvent = function() {
                      var _this = this;
                      this.animFrame.request(AnimationKeys.POLL_SCROLL_POS, function() {
                        _this.toggleScrollDividerHeader();
                        _this.toggleScrollDividerFooter();
                      });
                    };
                    MDCDialogFoundation2.prototype.layoutInternal = function() {
                      if (this.autoStackButtons) {
                        this.detectStackedButtons();
                      }
                      this.toggleScrollableClasses();
                    };
                    MDCDialogFoundation2.prototype.handleAnimationTimerEnd = function() {
                      this.animationTimer = 0;
                      this.adapter.removeClass(constants_1.cssClasses.OPENING);
                      this.adapter.removeClass(constants_1.cssClasses.CLOSING);
                    };
                    MDCDialogFoundation2.prototype.runNextAnimationFrame = function(callback) {
                      var _this = this;
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = requestAnimationFrame(function() {
                        _this.animationFrame = 0;
                        clearTimeout(_this.animationTimer);
                        _this.animationTimer = setTimeout(callback, 0);
                      });
                    };
                    MDCDialogFoundation2.prototype.detectStackedButtons = function() {
                      this.adapter.removeClass(constants_1.cssClasses.STACKED);
                      var areButtonsStacked = this.adapter.areButtonsStacked();
                      if (areButtonsStacked) {
                        this.adapter.addClass(constants_1.cssClasses.STACKED);
                      }
                      if (areButtonsStacked !== this.areButtonsStacked) {
                        this.adapter.reverseButtons();
                        this.areButtonsStacked = areButtonsStacked;
                      }
                    };
                    MDCDialogFoundation2.prototype.toggleScrollableClasses = function() {
                      this.adapter.removeClass(constants_1.cssClasses.SCROLLABLE);
                      if (this.adapter.isContentScrollable()) {
                        this.adapter.addClass(constants_1.cssClasses.SCROLLABLE);
                        if (this.isFullscreen) {
                          this.toggleScrollDividerHeader();
                          this.toggleScrollDividerFooter();
                        }
                      }
                    };
                    MDCDialogFoundation2.prototype.toggleScrollDividerHeader = function() {
                      if (!this.adapter.isScrollableContentAtTop()) {
                        this.adapter.addClass(constants_1.cssClasses.SCROLL_DIVIDER_HEADER);
                      } else if (this.adapter.hasClass(constants_1.cssClasses.SCROLL_DIVIDER_HEADER)) {
                        this.adapter.removeClass(constants_1.cssClasses.SCROLL_DIVIDER_HEADER);
                      }
                    };
                    MDCDialogFoundation2.prototype.toggleScrollDividerFooter = function() {
                      if (!this.adapter.isScrollableContentAtBottom()) {
                        this.adapter.addClass(constants_1.cssClasses.SCROLL_DIVIDER_FOOTER);
                      } else if (this.adapter.hasClass(constants_1.cssClasses.SCROLL_DIVIDER_FOOTER)) {
                        this.adapter.removeClass(constants_1.cssClasses.SCROLL_DIVIDER_FOOTER);
                      }
                    };
                    return MDCDialogFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCDialogFoundation = MDCDialogFoundation;
                exports2.default = MDCDialogFoundation;
              }
            ),
            /***/
            "./packages/mdc-dialog/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-dialog/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.util = void 0;
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-dialog/util.ts"
                ));
                exports2.util = util;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-dialog/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-dialog/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-dialog/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-dialog/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-dialog/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-dialog/types.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-dialog/types.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-dialog/util.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-dialog/util.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.areTopsMisaligned = exports2.isScrollAtBottom = exports2.isScrollAtTop = exports2.isScrollable = exports2.createFocusTrapInstance = void 0;
                function createFocusTrapInstance(surfaceEl, focusTrapFactory, initialFocusEl) {
                  return focusTrapFactory(surfaceEl, { initialFocusEl });
                }
                exports2.createFocusTrapInstance = createFocusTrapInstance;
                function isScrollable(el) {
                  return el ? el.scrollHeight > el.offsetHeight : false;
                }
                exports2.isScrollable = isScrollable;
                function isScrollAtTop(el) {
                  return el ? el.scrollTop === 0 : false;
                }
                exports2.isScrollAtTop = isScrollAtTop;
                function isScrollAtBottom(el) {
                  return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight : false;
                }
                exports2.isScrollAtBottom = isScrollAtBottom;
                function areTopsMisaligned(els) {
                  var tops = /* @__PURE__ */ new Set();
                  [].forEach.call(els, function(el) {
                    return tops.add(el.offsetTop);
                  });
                  return tops.size > 1;
                }
                exports2.areTopsMisaligned = areTopsMisaligned;
              }
            ),
            /***/
            "./packages/mdc-dom/announce.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-dom/announce.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.announce = exports2.DATA_MDC_DOM_ANNOUNCE = exports2.AnnouncerPriority = void 0;
                var AnnouncerPriority;
                (function(AnnouncerPriority2) {
                  AnnouncerPriority2["POLITE"] = "polite";
                  AnnouncerPriority2["ASSERTIVE"] = "assertive";
                })(AnnouncerPriority = exports2.AnnouncerPriority || (exports2.AnnouncerPriority = {}));
                exports2.DATA_MDC_DOM_ANNOUNCE = "data-mdc-dom-announce";
                function announce(message, options) {
                  Announcer.getInstance().say(message, options);
                }
                exports2.announce = announce;
                var Announcer = (
                  /** @class */
                  function() {
                    function Announcer2() {
                      this.liveRegions = /* @__PURE__ */ new Map();
                    }
                    Announcer2.getInstance = function() {
                      if (!Announcer2.instance) {
                        Announcer2.instance = new Announcer2();
                      }
                      return Announcer2.instance;
                    };
                    Announcer2.prototype.say = function(message, options) {
                      var _a, _b;
                      var priority = (_a = options === null || options === void 0 ? void 0 : options.priority) !== null && _a !== void 0 ? _a : AnnouncerPriority.POLITE;
                      var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;
                      var liveRegion = this.getLiveRegion(priority, ownerDocument);
                      liveRegion.textContent = "";
                      setTimeout(function() {
                        liveRegion.textContent = message;
                        ownerDocument.addEventListener("click", clearLiveRegion);
                      }, 1);
                      function clearLiveRegion() {
                        liveRegion.textContent = "";
                        ownerDocument.removeEventListener("click", clearLiveRegion);
                      }
                    };
                    Announcer2.prototype.getLiveRegion = function(priority, ownerDocument) {
                      var documentLiveRegions = this.liveRegions.get(ownerDocument);
                      if (!documentLiveRegions) {
                        documentLiveRegions = /* @__PURE__ */ new Map();
                        this.liveRegions.set(ownerDocument, documentLiveRegions);
                      }
                      var existingLiveRegion = documentLiveRegions.get(priority);
                      if (existingLiveRegion && ownerDocument.body.contains(existingLiveRegion)) {
                        return existingLiveRegion;
                      }
                      var liveRegion = this.createLiveRegion(priority, ownerDocument);
                      documentLiveRegions.set(priority, liveRegion);
                      return liveRegion;
                    };
                    Announcer2.prototype.createLiveRegion = function(priority, ownerDocument) {
                      var el = ownerDocument.createElement("div");
                      el.style.position = "absolute";
                      el.style.top = "-9999px";
                      el.style.left = "-9999px";
                      el.style.height = "1px";
                      el.style.overflow = "hidden";
                      el.setAttribute("aria-atomic", "true");
                      el.setAttribute("aria-live", priority);
                      el.setAttribute(exports2.DATA_MDC_DOM_ANNOUNCE, "true");
                      ownerDocument.body.appendChild(el);
                      return el;
                    };
                    return Announcer2;
                  }()
                );
              }
            ),
            /***/
            "./packages/mdc-dom/events.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-dom/events.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.applyPassive = void 0;
                function applyPassive(globalObj) {
                  if (globalObj === void 0) {
                    globalObj = window;
                  }
                  return supportsPassiveOption(globalObj) ? { passive: true } : false;
                }
                exports2.applyPassive = applyPassive;
                function supportsPassiveOption(globalObj) {
                  if (globalObj === void 0) {
                    globalObj = window;
                  }
                  var passiveSupported = false;
                  try {
                    var options = {
                      // This function will be called when the browser
                      // attempts to access the passive property.
                      get passive() {
                        passiveSupported = true;
                        return false;
                      }
                    };
                    var handler = function handler2() {
                    };
                    globalObj.document.addEventListener("test", handler, options);
                    globalObj.document.removeEventListener("test", handler, options);
                  } catch (err) {
                    passiveSupported = false;
                  }
                  return passiveSupported;
                }
              }
            ),
            /***/
            "./packages/mdc-dom/focus-trap.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-dom/focus-trap.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.FocusTrap = void 0;
                var FOCUS_SENTINEL_CLASS = "mdc-dom-focus-sentinel";
                var FocusTrap = (
                  /** @class */
                  function() {
                    function FocusTrap2(root, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      this.root = root;
                      this.options = options;
                      this.elFocusedBeforeTrapFocus = null;
                    }
                    FocusTrap2.prototype.trapFocus = function() {
                      var focusableEls = this.getFocusableElements(this.root);
                      if (focusableEls.length === 0) {
                        throw new Error("FocusTrap: Element must have at least one focusable child.");
                      }
                      this.elFocusedBeforeTrapFocus = document.activeElement instanceof HTMLElement ? document.activeElement : null;
                      this.wrapTabFocus(this.root);
                      if (!this.options.skipInitialFocus) {
                        this.focusInitialElement(focusableEls, this.options.initialFocusEl);
                      }
                    };
                    FocusTrap2.prototype.releaseFocus = function() {
                      [].slice.call(this.root.querySelectorAll("." + FOCUS_SENTINEL_CLASS)).forEach(function(sentinelEl) {
                        sentinelEl.parentElement.removeChild(sentinelEl);
                      });
                      if (!this.options.skipRestoreFocus && this.elFocusedBeforeTrapFocus) {
                        this.elFocusedBeforeTrapFocus.focus();
                      }
                    };
                    FocusTrap2.prototype.wrapTabFocus = function(el) {
                      var _this = this;
                      var sentinelStart = this.createSentinel();
                      var sentinelEnd = this.createSentinel();
                      sentinelStart.addEventListener("focus", function() {
                        var focusableEls = _this.getFocusableElements(el);
                        if (focusableEls.length > 0) {
                          focusableEls[focusableEls.length - 1].focus();
                        }
                      });
                      sentinelEnd.addEventListener("focus", function() {
                        var focusableEls = _this.getFocusableElements(el);
                        if (focusableEls.length > 0) {
                          focusableEls[0].focus();
                        }
                      });
                      el.insertBefore(sentinelStart, el.children[0]);
                      el.appendChild(sentinelEnd);
                    };
                    FocusTrap2.prototype.focusInitialElement = function(focusableEls, initialFocusEl) {
                      var focusIndex = 0;
                      if (initialFocusEl) {
                        focusIndex = Math.max(focusableEls.indexOf(initialFocusEl), 0);
                      }
                      focusableEls[focusIndex].focus();
                    };
                    FocusTrap2.prototype.getFocusableElements = function(root) {
                      var focusableEls = [].slice.call(root.querySelectorAll("[autofocus], [tabindex], a, input, textarea, select, button"));
                      return focusableEls.filter(function(el) {
                        var isDisabledOrHidden = el.getAttribute("aria-disabled") === "true" || el.getAttribute("disabled") != null || el.getAttribute("hidden") != null || el.getAttribute("aria-hidden") === "true";
                        var isTabbableAndVisible = el.tabIndex >= 0 && el.getBoundingClientRect().width > 0 && !el.classList.contains(FOCUS_SENTINEL_CLASS) && !isDisabledOrHidden;
                        var isProgrammaticallyHidden = false;
                        if (isTabbableAndVisible) {
                          var style = getComputedStyle(el);
                          isProgrammaticallyHidden = style.display === "none" || style.visibility === "hidden";
                        }
                        return isTabbableAndVisible && !isProgrammaticallyHidden;
                      });
                    };
                    FocusTrap2.prototype.createSentinel = function() {
                      var sentinel = document.createElement("div");
                      sentinel.setAttribute("tabindex", "0");
                      sentinel.setAttribute("aria-hidden", "true");
                      sentinel.classList.add(FOCUS_SENTINEL_CLASS);
                      return sentinel;
                    };
                    return FocusTrap2;
                  }()
                );
                exports2.FocusTrap = FocusTrap;
              }
            ),
            /***/
            "./packages/mdc-dom/index.ts": (
              /*!***********************************!*\
                !*** ./packages/mdc-dom/index.ts ***!
                \***********************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.ponyfill = exports2.keyboard = exports2.focusTrap = exports2.events = void 0;
                var events = __importStar(__webpack_require__(
                  /*! ./events */
                  "./packages/mdc-dom/events.ts"
                ));
                exports2.events = events;
                var focusTrap = __importStar(__webpack_require__(
                  /*! ./focus-trap */
                  "./packages/mdc-dom/focus-trap.ts"
                ));
                exports2.focusTrap = focusTrap;
                var keyboard = __importStar(__webpack_require__(
                  /*! ./keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                ));
                exports2.keyboard = keyboard;
                var ponyfill = __importStar(__webpack_require__(
                  /*! ./ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                ));
                exports2.ponyfill = ponyfill;
              }
            ),
            /***/
            "./packages/mdc-dom/keyboard.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-dom/keyboard.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.isNavigationEvent = exports2.normalizeKey = exports2.KEY = void 0;
                exports2.KEY = {
                  UNKNOWN: "Unknown",
                  BACKSPACE: "Backspace",
                  ENTER: "Enter",
                  SPACEBAR: "Spacebar",
                  PAGE_UP: "PageUp",
                  PAGE_DOWN: "PageDown",
                  END: "End",
                  HOME: "Home",
                  ARROW_LEFT: "ArrowLeft",
                  ARROW_UP: "ArrowUp",
                  ARROW_RIGHT: "ArrowRight",
                  ARROW_DOWN: "ArrowDown",
                  DELETE: "Delete",
                  ESCAPE: "Escape",
                  TAB: "Tab"
                };
                var normalizedKeys = /* @__PURE__ */ new Set();
                normalizedKeys.add(exports2.KEY.BACKSPACE);
                normalizedKeys.add(exports2.KEY.ENTER);
                normalizedKeys.add(exports2.KEY.SPACEBAR);
                normalizedKeys.add(exports2.KEY.PAGE_UP);
                normalizedKeys.add(exports2.KEY.PAGE_DOWN);
                normalizedKeys.add(exports2.KEY.END);
                normalizedKeys.add(exports2.KEY.HOME);
                normalizedKeys.add(exports2.KEY.ARROW_LEFT);
                normalizedKeys.add(exports2.KEY.ARROW_UP);
                normalizedKeys.add(exports2.KEY.ARROW_RIGHT);
                normalizedKeys.add(exports2.KEY.ARROW_DOWN);
                normalizedKeys.add(exports2.KEY.DELETE);
                normalizedKeys.add(exports2.KEY.ESCAPE);
                normalizedKeys.add(exports2.KEY.TAB);
                var KEY_CODE = {
                  BACKSPACE: 8,
                  ENTER: 13,
                  SPACEBAR: 32,
                  PAGE_UP: 33,
                  PAGE_DOWN: 34,
                  END: 35,
                  HOME: 36,
                  ARROW_LEFT: 37,
                  ARROW_UP: 38,
                  ARROW_RIGHT: 39,
                  ARROW_DOWN: 40,
                  DELETE: 46,
                  ESCAPE: 27,
                  TAB: 9
                };
                var mappedKeyCodes = /* @__PURE__ */ new Map();
                mappedKeyCodes.set(KEY_CODE.BACKSPACE, exports2.KEY.BACKSPACE);
                mappedKeyCodes.set(KEY_CODE.ENTER, exports2.KEY.ENTER);
                mappedKeyCodes.set(KEY_CODE.SPACEBAR, exports2.KEY.SPACEBAR);
                mappedKeyCodes.set(KEY_CODE.PAGE_UP, exports2.KEY.PAGE_UP);
                mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, exports2.KEY.PAGE_DOWN);
                mappedKeyCodes.set(KEY_CODE.END, exports2.KEY.END);
                mappedKeyCodes.set(KEY_CODE.HOME, exports2.KEY.HOME);
                mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, exports2.KEY.ARROW_LEFT);
                mappedKeyCodes.set(KEY_CODE.ARROW_UP, exports2.KEY.ARROW_UP);
                mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, exports2.KEY.ARROW_RIGHT);
                mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, exports2.KEY.ARROW_DOWN);
                mappedKeyCodes.set(KEY_CODE.DELETE, exports2.KEY.DELETE);
                mappedKeyCodes.set(KEY_CODE.ESCAPE, exports2.KEY.ESCAPE);
                mappedKeyCodes.set(KEY_CODE.TAB, exports2.KEY.TAB);
                var navigationKeys = /* @__PURE__ */ new Set();
                navigationKeys.add(exports2.KEY.PAGE_UP);
                navigationKeys.add(exports2.KEY.PAGE_DOWN);
                navigationKeys.add(exports2.KEY.END);
                navigationKeys.add(exports2.KEY.HOME);
                navigationKeys.add(exports2.KEY.ARROW_LEFT);
                navigationKeys.add(exports2.KEY.ARROW_UP);
                navigationKeys.add(exports2.KEY.ARROW_RIGHT);
                navigationKeys.add(exports2.KEY.ARROW_DOWN);
                function normalizeKey(evt) {
                  var key = evt.key;
                  if (normalizedKeys.has(key)) {
                    return key;
                  }
                  var mappedKey = mappedKeyCodes.get(evt.keyCode);
                  if (mappedKey) {
                    return mappedKey;
                  }
                  return exports2.KEY.UNKNOWN;
                }
                exports2.normalizeKey = normalizeKey;
                function isNavigationEvent(evt) {
                  return navigationKeys.has(normalizeKey(evt));
                }
                exports2.isNavigationEvent = isNavigationEvent;
              }
            ),
            /***/
            "./packages/mdc-dom/ponyfill.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-dom/ponyfill.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.estimateScrollWidth = exports2.matches = exports2.closest = void 0;
                function closest(element, selector) {
                  if (element.closest) {
                    return element.closest(selector);
                  }
                  var el = element;
                  while (el) {
                    if (matches(el, selector)) {
                      return el;
                    }
                    el = el.parentElement;
                  }
                  return null;
                }
                exports2.closest = closest;
                function matches(element, selector) {
                  var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
                  return nativeMatches.call(element, selector);
                }
                exports2.matches = matches;
                function estimateScrollWidth(element) {
                  var htmlEl = element;
                  if (htmlEl.offsetParent !== null) {
                    return htmlEl.scrollWidth;
                  }
                  var clone = htmlEl.cloneNode(true);
                  clone.style.setProperty("position", "absolute");
                  clone.style.setProperty("transform", "translate(-9999px, -9999px)");
                  document.documentElement.appendChild(clone);
                  var scrollWidth = clone.scrollWidth;
                  document.documentElement.removeChild(clone);
                  return scrollWidth;
                }
                exports2.estimateScrollWidth = estimateScrollWidth;
              }
            ),
            /***/
            "./packages/mdc-drawer/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-drawer/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-drawer/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-drawer/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDrawer = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var focus_trap_1 = __webpack_require__(
                  /*! @material/dom/focus-trap */
                  "./packages/mdc-dom/focus-trap.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/list/component */
                  "./packages/mdc-list/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./dismissible/foundation */
                  "./packages/mdc-drawer/dismissible/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./modal/foundation */
                  "./packages/mdc-drawer/modal/foundation.ts"
                );
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-drawer/util.ts"
                ));
                var cssClasses = foundation_1.MDCDismissibleDrawerFoundation.cssClasses, strings = foundation_1.MDCDismissibleDrawerFoundation.strings;
                var MDCDrawer = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDrawer2, _super);
                    function MDCDrawer2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCDrawer2.attachTo = function(root) {
                      return new MDCDrawer2(root);
                    };
                    Object.defineProperty(MDCDrawer2.prototype, "open", {
                      /**
                       * @return boolean Proxies to the foundation's `open`/`close` methods.
                       * Also returns true if drawer is in the open position.
                       */
                      get: function get() {
                        return this.foundation.isOpen();
                      },
                      /**
                       * Toggles the drawer open and closed.
                       */
                      set: function set(isOpen) {
                        if (isOpen) {
                          this.foundation.open();
                        } else {
                          this.foundation.close();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDrawer2.prototype, "list", {
                      // initialSyncWithDOM()
                      get: function get() {
                        return this.innerList;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCDrawer2.prototype.initialize = function(focusTrapFactory, listFactory) {
                      if (focusTrapFactory === void 0) {
                        focusTrapFactory = function focusTrapFactory2(el) {
                          return new focus_trap_1.FocusTrap(el);
                        };
                      }
                      if (listFactory === void 0) {
                        listFactory = function listFactory2(el) {
                          return new component_2.MDCList(el);
                        };
                      }
                      var listEl = this.root.querySelector(strings.LIST_SELECTOR);
                      if (listEl) {
                        this.innerList = listFactory(listEl);
                        this.innerList.wrapFocus = true;
                      }
                      this.focusTrapFactory = focusTrapFactory;
                    };
                    MDCDrawer2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      var MODAL = cssClasses.MODAL;
                      var SCRIM_SELECTOR = strings.SCRIM_SELECTOR;
                      this.scrim = this.root.parentNode.querySelector(SCRIM_SELECTOR);
                      if (this.scrim && this.root.classList.contains(MODAL)) {
                        this.handleScrimClick = function() {
                          return _this.foundation.handleScrimClick();
                        };
                        this.scrim.addEventListener("click", this.handleScrimClick);
                        this.focusTrap = util.createFocusTrapInstance(this.root, this.focusTrapFactory);
                      }
                      this.handleKeydown = function(evt) {
                        _this.foundation.handleKeydown(evt);
                      };
                      this.handleTransitionEnd = function(evt) {
                        _this.foundation.handleTransitionEnd(evt);
                      };
                      this.listen("keydown", this.handleKeydown);
                      this.listen("transitionend", this.handleTransitionEnd);
                    };
                    MDCDrawer2.prototype.destroy = function() {
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten("transitionend", this.handleTransitionEnd);
                      if (this.innerList) {
                        this.innerList.destroy();
                      }
                      var MODAL = cssClasses.MODAL;
                      if (this.scrim && this.handleScrimClick && this.root.classList.contains(MODAL)) {
                        this.scrim.removeEventListener("click", this.handleScrimClick);
                        this.open = false;
                      }
                    };
                    MDCDrawer2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        elementHasClass: function elementHasClass(element, className) {
                          return element.classList.contains(className);
                        },
                        saveFocus: function saveFocus() {
                          _this.previousFocus = document.activeElement;
                        },
                        restoreFocus: function restoreFocus() {
                          var previousFocus = _this.previousFocus;
                          if (previousFocus && previousFocus.focus && _this.root.contains(document.activeElement)) {
                            previousFocus.focus();
                          }
                        },
                        focusActiveNavigationItem: function focusActiveNavigationItem() {
                          var activeNavItemEl = _this.root.querySelector(strings.LIST_ITEM_ACTIVATED_SELECTOR);
                          if (activeNavItemEl) {
                            activeNavItemEl.focus();
                          }
                        },
                        notifyClose: function notifyClose() {
                          _this.emit(
                            strings.CLOSE_EVENT,
                            {},
                            true
                            /* shouldBubble */
                          );
                        },
                        notifyOpen: function notifyOpen() {
                          _this.emit(
                            strings.OPEN_EVENT,
                            {},
                            true
                            /* shouldBubble */
                          );
                        },
                        trapFocus: function trapFocus() {
                          _this.focusTrap.trapFocus();
                        },
                        releaseFocus: function releaseFocus() {
                          _this.focusTrap.releaseFocus();
                        }
                      };
                      var DISMISSIBLE = cssClasses.DISMISSIBLE, MODAL = cssClasses.MODAL;
                      if (this.root.classList.contains(DISMISSIBLE)) {
                        return new foundation_1.MDCDismissibleDrawerFoundation(adapter);
                      } else if (this.root.classList.contains(MODAL)) {
                        return new foundation_2.MDCModalDrawerFoundation(adapter);
                      } else {
                        throw new Error("MDCDrawer: Failed to instantiate component. Supported variants are " + DISMISSIBLE + " and " + MODAL + ".");
                      }
                    };
                    return MDCDrawer2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCDrawer = MDCDrawer;
              }
            ),
            /***/
            "./packages/mdc-drawer/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-drawer/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ANIMATE: "mdc-drawer--animate",
                  CLOSING: "mdc-drawer--closing",
                  DISMISSIBLE: "mdc-drawer--dismissible",
                  MODAL: "mdc-drawer--modal",
                  OPEN: "mdc-drawer--open",
                  OPENING: "mdc-drawer--opening",
                  ROOT: "mdc-drawer"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  APP_CONTENT_SELECTOR: ".mdc-drawer-app-content",
                  CLOSE_EVENT: "MDCDrawer:closed",
                  OPEN_EVENT: "MDCDrawer:opened",
                  SCRIM_SELECTOR: ".mdc-drawer-scrim",
                  LIST_SELECTOR: ".mdc-list,.mdc-deprecated-list",
                  LIST_ITEM_ACTIVATED_SELECTOR: ".mdc-list-item--activated,.mdc-deprecated-list-item--activated"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-drawer/dismissible/foundation.ts": (
              /*!*******************************************************!*\
                !*** ./packages/mdc-drawer/dismissible/foundation.ts ***!
                \*******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCDismissibleDrawerFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ../constants */
                  "./packages/mdc-drawer/constants.ts"
                );
                var MDCDismissibleDrawerFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCDismissibleDrawerFoundation2, _super);
                    function MDCDismissibleDrawerFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation2.defaultAdapter), adapter)) || this;
                      _this.animationFrame = 0;
                      _this.animationTimer = 0;
                      return _this;
                    }
                    Object.defineProperty(MDCDismissibleDrawerFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDismissibleDrawerFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCDismissibleDrawerFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          elementHasClass: function elementHasClass() {
                            return false;
                          },
                          notifyClose: function notifyClose() {
                            return void 0;
                          },
                          notifyOpen: function notifyOpen() {
                            return void 0;
                          },
                          saveFocus: function saveFocus() {
                            return void 0;
                          },
                          restoreFocus: function restoreFocus() {
                            return void 0;
                          },
                          focusActiveNavigationItem: function focusActiveNavigationItem() {
                            return void 0;
                          },
                          trapFocus: function trapFocus() {
                            return void 0;
                          },
                          releaseFocus: function releaseFocus() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCDismissibleDrawerFoundation2.prototype.destroy = function() {
                      if (this.animationFrame) {
                        cancelAnimationFrame(this.animationFrame);
                      }
                      if (this.animationTimer) {
                        clearTimeout(this.animationTimer);
                      }
                    };
                    MDCDismissibleDrawerFoundation2.prototype.open = function() {
                      var _this = this;
                      if (this.isOpen() || this.isOpening() || this.isClosing()) {
                        return;
                      }
                      this.adapter.addClass(constants_1.cssClasses.OPEN);
                      this.adapter.addClass(constants_1.cssClasses.ANIMATE);
                      this.runNextAnimationFrame(function() {
                        _this.adapter.addClass(constants_1.cssClasses.OPENING);
                      });
                      this.adapter.saveFocus();
                    };
                    MDCDismissibleDrawerFoundation2.prototype.close = function() {
                      if (!this.isOpen() || this.isOpening() || this.isClosing()) {
                        return;
                      }
                      this.adapter.addClass(constants_1.cssClasses.CLOSING);
                    };
                    MDCDismissibleDrawerFoundation2.prototype.isOpen = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.OPEN);
                    };
                    MDCDismissibleDrawerFoundation2.prototype.isOpening = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.OPENING) || this.adapter.hasClass(constants_1.cssClasses.ANIMATE);
                    };
                    MDCDismissibleDrawerFoundation2.prototype.isClosing = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.CLOSING);
                    };
                    MDCDismissibleDrawerFoundation2.prototype.handleKeydown = function(evt) {
                      var keyCode = evt.keyCode, key = evt.key;
                      var isEscape = key === "Escape" || keyCode === 27;
                      if (isEscape) {
                        this.close();
                      }
                    };
                    MDCDismissibleDrawerFoundation2.prototype.handleTransitionEnd = function(evt) {
                      var OPENING = constants_1.cssClasses.OPENING, CLOSING = constants_1.cssClasses.CLOSING, OPEN = constants_1.cssClasses.OPEN, ANIMATE = constants_1.cssClasses.ANIMATE, ROOT = constants_1.cssClasses.ROOT;
                      var isRootElement = this.isElement(evt.target) && this.adapter.elementHasClass(evt.target, ROOT);
                      if (!isRootElement) {
                        return;
                      }
                      if (this.isClosing()) {
                        this.adapter.removeClass(OPEN);
                        this.closed();
                        this.adapter.restoreFocus();
                        this.adapter.notifyClose();
                      } else {
                        this.adapter.focusActiveNavigationItem();
                        this.opened();
                        this.adapter.notifyOpen();
                      }
                      this.adapter.removeClass(ANIMATE);
                      this.adapter.removeClass(OPENING);
                      this.adapter.removeClass(CLOSING);
                    };
                    MDCDismissibleDrawerFoundation2.prototype.opened = function() {
                    };
                    MDCDismissibleDrawerFoundation2.prototype.closed = function() {
                    };
                    MDCDismissibleDrawerFoundation2.prototype.runNextAnimationFrame = function(callback) {
                      var _this = this;
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = requestAnimationFrame(function() {
                        _this.animationFrame = 0;
                        clearTimeout(_this.animationTimer);
                        _this.animationTimer = setTimeout(callback, 0);
                      });
                    };
                    MDCDismissibleDrawerFoundation2.prototype.isElement = function(element) {
                      return Boolean(element.classList);
                    };
                    return MDCDismissibleDrawerFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCDismissibleDrawerFoundation = MDCDismissibleDrawerFoundation;
                exports2.default = MDCDismissibleDrawerFoundation;
              }
            ),
            /***/
            "./packages/mdc-drawer/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-drawer/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.util = void 0;
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-drawer/util.ts"
                ));
                exports2.util = util;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-drawer/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-drawer/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-drawer/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./dismissible/foundation */
                  "./packages/mdc-drawer/dismissible/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./modal/foundation */
                  "./packages/mdc-drawer/modal/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-drawer/modal/foundation.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-drawer/modal/foundation.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCModalDrawerFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! ../dismissible/foundation */
                  "./packages/mdc-drawer/dismissible/foundation.ts"
                );
                var MDCModalDrawerFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCModalDrawerFoundation2, _super);
                    function MDCModalDrawerFoundation2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCModalDrawerFoundation2.prototype.handleScrimClick = function() {
                      this.close();
                    };
                    MDCModalDrawerFoundation2.prototype.opened = function() {
                      this.adapter.trapFocus();
                    };
                    MDCModalDrawerFoundation2.prototype.closed = function() {
                      this.adapter.releaseFocus();
                    };
                    return MDCModalDrawerFoundation2;
                  }(foundation_1.MDCDismissibleDrawerFoundation)
                );
                exports2.MDCModalDrawerFoundation = MDCModalDrawerFoundation;
                exports2.default = MDCModalDrawerFoundation;
              }
            ),
            /***/
            "./packages/mdc-drawer/util.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-drawer/util.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.createFocusTrapInstance = void 0;
                function createFocusTrapInstance(surfaceEl, focusTrapFactory) {
                  return focusTrapFactory(surfaceEl, {
                    // Component handles focusing on active nav item.
                    skipInitialFocus: true
                  });
                }
                exports2.createFocusTrapInstance = createFocusTrapInstance;
              }
            ),
            /***/
            "./packages/mdc-floating-label/adapter.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-floating-label/adapter.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-floating-label/component.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-floating-label/component.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFloatingLabel = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-floating-label/foundation.ts"
                );
                var MDCFloatingLabel = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFloatingLabel2, _super);
                    function MDCFloatingLabel2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCFloatingLabel2.attachTo = function(root) {
                      return new MDCFloatingLabel2(root);
                    };
                    MDCFloatingLabel2.prototype.shake = function(shouldShake) {
                      this.foundation.shake(shouldShake);
                    };
                    MDCFloatingLabel2.prototype.float = function(shouldFloat) {
                      this.foundation.float(shouldFloat);
                    };
                    MDCFloatingLabel2.prototype.setRequired = function(isRequired) {
                      this.foundation.setRequired(isRequired);
                    };
                    MDCFloatingLabel2.prototype.getWidth = function() {
                      return this.foundation.getWidth();
                    };
                    MDCFloatingLabel2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        getWidth: function getWidth() {
                          return ponyfill_1.estimateScrollWidth(_this.root);
                        },
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          return _this.listen(evtType, handler);
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          return _this.unlisten(evtType, handler);
                        }
                      };
                      return new foundation_1.MDCFloatingLabelFoundation(adapter);
                    };
                    return MDCFloatingLabel2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCFloatingLabel = MDCFloatingLabel;
              }
            ),
            /***/
            "./packages/mdc-floating-label/constants.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-floating-label/constants.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  LABEL_FLOAT_ABOVE: "mdc-floating-label--float-above",
                  LABEL_REQUIRED: "mdc-floating-label--required",
                  LABEL_SHAKE: "mdc-floating-label--shake",
                  ROOT: "mdc-floating-label"
                };
              }
            ),
            /***/
            "./packages/mdc-floating-label/foundation.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-floating-label/foundation.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFloatingLabelFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-floating-label/constants.ts"
                );
                var MDCFloatingLabelFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFloatingLabelFoundation2, _super);
                    function MDCFloatingLabelFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation2.defaultAdapter), adapter)) || this;
                      _this.shakeAnimationEndHandler = function() {
                        _this.handleShakeAnimationEnd();
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCFloatingLabelFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFloatingLabelFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          getWidth: function getWidth() {
                            return 0;
                          },
                          registerInteractionHandler: function registerInteractionHandler() {
                            return void 0;
                          },
                          deregisterInteractionHandler: function deregisterInteractionHandler() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCFloatingLabelFoundation2.prototype.init = function() {
                      this.adapter.registerInteractionHandler("animationend", this.shakeAnimationEndHandler);
                    };
                    MDCFloatingLabelFoundation2.prototype.destroy = function() {
                      this.adapter.deregisterInteractionHandler("animationend", this.shakeAnimationEndHandler);
                    };
                    MDCFloatingLabelFoundation2.prototype.getWidth = function() {
                      return this.adapter.getWidth();
                    };
                    MDCFloatingLabelFoundation2.prototype.shake = function(shouldShake) {
                      var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
                      if (shouldShake) {
                        this.adapter.addClass(LABEL_SHAKE);
                      } else {
                        this.adapter.removeClass(LABEL_SHAKE);
                      }
                    };
                    MDCFloatingLabelFoundation2.prototype.float = function(shouldFloat) {
                      var _a = MDCFloatingLabelFoundation2.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
                      if (shouldFloat) {
                        this.adapter.addClass(LABEL_FLOAT_ABOVE);
                      } else {
                        this.adapter.removeClass(LABEL_FLOAT_ABOVE);
                        this.adapter.removeClass(LABEL_SHAKE);
                      }
                    };
                    MDCFloatingLabelFoundation2.prototype.setRequired = function(isRequired) {
                      var LABEL_REQUIRED = MDCFloatingLabelFoundation2.cssClasses.LABEL_REQUIRED;
                      if (isRequired) {
                        this.adapter.addClass(LABEL_REQUIRED);
                      } else {
                        this.adapter.removeClass(LABEL_REQUIRED);
                      }
                    };
                    MDCFloatingLabelFoundation2.prototype.handleShakeAnimationEnd = function() {
                      var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
                      this.adapter.removeClass(LABEL_SHAKE);
                    };
                    return MDCFloatingLabelFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCFloatingLabelFoundation = MDCFloatingLabelFoundation;
                exports2.default = MDCFloatingLabelFoundation;
              }
            ),
            /***/
            "./packages/mdc-floating-label/index.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-floating-label/index.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-floating-label/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-floating-label/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-floating-label/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-floating-label/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-form-field/adapter.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-form-field/adapter.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-form-field/component.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-form-field/component.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFormField = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-form-field/foundation.ts"
                );
                var MDCFormField = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFormField2, _super);
                    function MDCFormField2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCFormField2.attachTo = function(root) {
                      return new MDCFormField2(root);
                    };
                    MDCFormField2.prototype.labelEl = function() {
                      var LABEL_SELECTOR = foundation_1.MDCFormFieldFoundation.strings.LABEL_SELECTOR;
                      return this.root.querySelector(LABEL_SELECTOR);
                    };
                    MDCFormField2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        activateInputRipple: function activateInputRipple() {
                          if (_this.input && _this.input.ripple) {
                            _this.input.ripple.activate();
                          }
                        },
                        deactivateInputRipple: function deactivateInputRipple() {
                          if (_this.input && _this.input.ripple) {
                            _this.input.ripple.deactivate();
                          }
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          var labelEl = _this.labelEl();
                          if (labelEl) {
                            labelEl.removeEventListener(evtType, handler);
                          }
                        },
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          var labelEl = _this.labelEl();
                          if (labelEl) {
                            labelEl.addEventListener(evtType, handler);
                          }
                        }
                      };
                      return new foundation_1.MDCFormFieldFoundation(adapter);
                    };
                    return MDCFormField2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCFormField = MDCFormField;
              }
            ),
            /***/
            "./packages/mdc-form-field/constants.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-form-field/constants.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  ROOT: "mdc-form-field"
                };
                exports2.strings = {
                  LABEL_SELECTOR: ".mdc-form-field > label"
                };
              }
            ),
            /***/
            "./packages/mdc-form-field/foundation.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-form-field/foundation.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFormFieldFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-form-field/constants.ts"
                );
                var MDCFormFieldFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFormFieldFoundation2, _super);
                    function MDCFormFieldFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation2.defaultAdapter), adapter)) || this;
                      _this.click = function() {
                        _this.handleClick();
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCFormFieldFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFormFieldFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCFormFieldFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          activateInputRipple: function activateInputRipple() {
                            return void 0;
                          },
                          deactivateInputRipple: function deactivateInputRipple() {
                            return void 0;
                          },
                          deregisterInteractionHandler: function deregisterInteractionHandler() {
                            return void 0;
                          },
                          registerInteractionHandler: function registerInteractionHandler() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCFormFieldFoundation2.prototype.init = function() {
                      this.adapter.registerInteractionHandler("click", this.click);
                    };
                    MDCFormFieldFoundation2.prototype.destroy = function() {
                      this.adapter.deregisterInteractionHandler("click", this.click);
                    };
                    MDCFormFieldFoundation2.prototype.handleClick = function() {
                      var _this = this;
                      this.adapter.activateInputRipple();
                      requestAnimationFrame(function() {
                        _this.adapter.deactivateInputRipple();
                      });
                    };
                    return MDCFormFieldFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCFormFieldFoundation = MDCFormFieldFoundation;
                exports2.default = MDCFormFieldFoundation;
              }
            ),
            /***/
            "./packages/mdc-form-field/index.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-form-field/index.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-form-field/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-form-field/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-form-field/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-form-field/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-icon-button/adapter.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-icon-button/adapter.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-icon-button/component.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-icon-button/component.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCIconButtonToggle = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-icon-button/foundation.ts"
                );
                var strings = foundation_1.MDCIconButtonToggleFoundation.strings;
                var MDCIconButtonToggle = (
                  /** @class */
                  function(_super) {
                    __extends(MDCIconButtonToggle2, _super);
                    function MDCIconButtonToggle2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.rippleComponent = _this.createRipple();
                      return _this;
                    }
                    MDCIconButtonToggle2.attachTo = function(root) {
                      return new MDCIconButtonToggle2(root);
                    };
                    MDCIconButtonToggle2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleClick = function() {
                        _this.foundation.handleClick();
                      };
                      this.listen("click", this.handleClick);
                    };
                    MDCIconButtonToggle2.prototype.destroy = function() {
                      this.unlisten("click", this.handleClick);
                      this.ripple.destroy();
                      _super.prototype.destroy.call(this);
                    };
                    MDCIconButtonToggle2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        notifyChange: function notifyChange(evtData) {
                          _this.emit(strings.CHANGE_EVENT, evtData);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        getAttr: function getAttr(attrName) {
                          return _this.root.getAttribute(attrName);
                        },
                        setAttr: function setAttr(attrName, attrValue) {
                          return _this.root.setAttribute(attrName, attrValue);
                        }
                      };
                      return new foundation_1.MDCIconButtonToggleFoundation(adapter);
                    };
                    Object.defineProperty(MDCIconButtonToggle2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleComponent;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCIconButtonToggle2.prototype, "on", {
                      get: function get() {
                        return this.foundation.isOn();
                      },
                      set: function set(isOn) {
                        this.foundation.toggle(isOn);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCIconButtonToggle2.prototype.createRipple = function() {
                      var ripple = new component_2.MDCRipple(this.root);
                      ripple.unbounded = true;
                      return ripple;
                    };
                    return MDCIconButtonToggle2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCIconButtonToggle = MDCIconButtonToggle;
              }
            ),
            /***/
            "./packages/mdc-icon-button/constants.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-icon-button/constants.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  ICON_BUTTON_ON: "mdc-icon-button--on",
                  ROOT: "mdc-icon-button"
                };
                exports2.strings = {
                  ARIA_LABEL: "aria-label",
                  ARIA_PRESSED: "aria-pressed",
                  DATA_ARIA_LABEL_OFF: "data-aria-label-off",
                  DATA_ARIA_LABEL_ON: "data-aria-label-on",
                  CHANGE_EVENT: "MDCIconButtonToggle:change"
                };
              }
            ),
            /***/
            "./packages/mdc-icon-button/foundation.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-icon-button/foundation.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCIconButtonToggleFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-icon-button/constants.ts"
                );
                var MDCIconButtonToggleFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCIconButtonToggleFoundation2, _super);
                    function MDCIconButtonToggleFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation2.defaultAdapter), adapter)) || this;
                      _this.hasToggledAriaLabel = false;
                      return _this;
                    }
                    Object.defineProperty(MDCIconButtonToggleFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCIconButtonToggleFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCIconButtonToggleFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          notifyChange: function notifyChange() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          getAttr: function getAttr() {
                            return null;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCIconButtonToggleFoundation2.prototype.init = function() {
                      var ariaLabelOn = this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_ON);
                      var ariaLabelOff = this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_OFF);
                      if (ariaLabelOn && ariaLabelOff) {
                        if (this.adapter.getAttr(constants_1.strings.ARIA_PRESSED) !== null) {
                          throw new Error("MDCIconButtonToggleFoundation: Button should not set `aria-pressed` if it has a toggled aria label.");
                        }
                        this.hasToggledAriaLabel = true;
                      } else {
                        this.adapter.setAttr(constants_1.strings.ARIA_PRESSED, String(this.isOn()));
                      }
                    };
                    MDCIconButtonToggleFoundation2.prototype.handleClick = function() {
                      this.toggle();
                      this.adapter.notifyChange({ isOn: this.isOn() });
                    };
                    MDCIconButtonToggleFoundation2.prototype.isOn = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.ICON_BUTTON_ON);
                    };
                    MDCIconButtonToggleFoundation2.prototype.toggle = function(isOn) {
                      if (isOn === void 0) {
                        isOn = !this.isOn();
                      }
                      if (isOn) {
                        this.adapter.addClass(constants_1.cssClasses.ICON_BUTTON_ON);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.ICON_BUTTON_ON);
                      }
                      if (this.hasToggledAriaLabel) {
                        var ariaLabel = isOn ? this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_ON) : this.adapter.getAttr(constants_1.strings.DATA_ARIA_LABEL_OFF);
                        this.adapter.setAttr(constants_1.strings.ARIA_LABEL, ariaLabel || "");
                      } else {
                        this.adapter.setAttr(constants_1.strings.ARIA_PRESSED, "" + isOn);
                      }
                    };
                    return MDCIconButtonToggleFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCIconButtonToggleFoundation = MDCIconButtonToggleFoundation;
                exports2.default = MDCIconButtonToggleFoundation;
              }
            ),
            /***/
            "./packages/mdc-icon-button/index.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-icon-button/index.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-icon-button/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-icon-button/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-icon-button/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-icon-button/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-icon-button/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-icon-button/types.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-icon-button/types.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-line-ripple/adapter.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-line-ripple/adapter.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-line-ripple/component.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-line-ripple/component.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCLineRipple = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-line-ripple/foundation.ts"
                );
                var MDCLineRipple = (
                  /** @class */
                  function(_super) {
                    __extends(MDCLineRipple2, _super);
                    function MDCLineRipple2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCLineRipple2.attachTo = function(root) {
                      return new MDCLineRipple2(root);
                    };
                    MDCLineRipple2.prototype.activate = function() {
                      this.foundation.activate();
                    };
                    MDCLineRipple2.prototype.deactivate = function() {
                      this.foundation.deactivate();
                    };
                    MDCLineRipple2.prototype.setRippleCenter = function(xCoordinate) {
                      this.foundation.setRippleCenter(xCoordinate);
                    };
                    MDCLineRipple2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        setStyle: function setStyle(propertyName, value) {
                          return _this.root.style.setProperty(propertyName, value);
                        },
                        registerEventHandler: function registerEventHandler(evtType, handler) {
                          return _this.listen(evtType, handler);
                        },
                        deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
                          return _this.unlisten(evtType, handler);
                        }
                      };
                      return new foundation_1.MDCLineRippleFoundation(adapter);
                    };
                    return MDCLineRipple2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCLineRipple = MDCLineRipple;
              }
            ),
            /***/
            "./packages/mdc-line-ripple/constants.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-line-ripple/constants.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = void 0;
                var cssClasses = {
                  LINE_RIPPLE_ACTIVE: "mdc-line-ripple--active",
                  LINE_RIPPLE_DEACTIVATING: "mdc-line-ripple--deactivating"
                };
                exports2.cssClasses = cssClasses;
              }
            ),
            /***/
            "./packages/mdc-line-ripple/foundation.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-line-ripple/foundation.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCLineRippleFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-line-ripple/constants.ts"
                );
                var MDCLineRippleFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCLineRippleFoundation2, _super);
                    function MDCLineRippleFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation2.defaultAdapter), adapter)) || this;
                      _this.transitionEndHandler = function(evt) {
                        _this.handleTransitionEnd(evt);
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCLineRippleFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCLineRippleFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          setStyle: function setStyle() {
                            return void 0;
                          },
                          registerEventHandler: function registerEventHandler() {
                            return void 0;
                          },
                          deregisterEventHandler: function deregisterEventHandler() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCLineRippleFoundation2.prototype.init = function() {
                      this.adapter.registerEventHandler("transitionend", this.transitionEndHandler);
                    };
                    MDCLineRippleFoundation2.prototype.destroy = function() {
                      this.adapter.deregisterEventHandler("transitionend", this.transitionEndHandler);
                    };
                    MDCLineRippleFoundation2.prototype.activate = function() {
                      this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
                      this.adapter.addClass(constants_1.cssClasses.LINE_RIPPLE_ACTIVE);
                    };
                    MDCLineRippleFoundation2.prototype.setRippleCenter = function(xCoordinate) {
                      this.adapter.setStyle("transform-origin", xCoordinate + "px center");
                    };
                    MDCLineRippleFoundation2.prototype.deactivate = function() {
                      this.adapter.addClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
                    };
                    MDCLineRippleFoundation2.prototype.handleTransitionEnd = function(evt) {
                      var isDeactivating = this.adapter.hasClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
                      if (evt.propertyName === "opacity") {
                        if (isDeactivating) {
                          this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_ACTIVE);
                          this.adapter.removeClass(constants_1.cssClasses.LINE_RIPPLE_DEACTIVATING);
                        }
                      }
                    };
                    return MDCLineRippleFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCLineRippleFoundation = MDCLineRippleFoundation;
                exports2.default = MDCLineRippleFoundation;
              }
            ),
            /***/
            "./packages/mdc-line-ripple/index.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-line-ripple/index.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-line-ripple/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-line-ripple/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-line-ripple/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-line-ripple/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-linear-progress/adapter.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-linear-progress/adapter.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-linear-progress/component.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-linear-progress/component.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCLinearProgress = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-linear-progress/foundation.ts"
                );
                var MDCLinearProgress = (
                  /** @class */
                  function(_super) {
                    __extends(MDCLinearProgress2, _super);
                    function MDCLinearProgress2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCLinearProgress2.attachTo = function(root) {
                      return new MDCLinearProgress2(root);
                    };
                    Object.defineProperty(MDCLinearProgress2.prototype, "determinate", {
                      set: function set(value) {
                        this.foundation.setDeterminate(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCLinearProgress2.prototype, "progress", {
                      set: function set(value) {
                        this.foundation.setProgress(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCLinearProgress2.prototype, "buffer", {
                      set: function set(value) {
                        this.foundation.setBuffer(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCLinearProgress2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCLinearProgress2.prototype.close = function() {
                      this.foundation.close();
                    };
                    MDCLinearProgress2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.root.addEventListener("transitionend", function() {
                        _this.foundation.handleTransitionEnd();
                      });
                    };
                    MDCLinearProgress2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        forceLayout: function forceLayout() {
                          _this.root.getBoundingClientRect();
                        },
                        setBufferBarStyle: function setBufferBarStyle(styleProperty, value) {
                          var bufferBar = _this.root.querySelector(foundation_1.MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);
                          if (bufferBar) {
                            bufferBar.style.setProperty(styleProperty, value);
                          }
                        },
                        setPrimaryBarStyle: function setPrimaryBarStyle(styleProperty, value) {
                          var primaryBar = _this.root.querySelector(foundation_1.MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
                          if (primaryBar) {
                            primaryBar.style.setProperty(styleProperty, value);
                          }
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        removeAttribute: function removeAttribute(attributeName) {
                          _this.root.removeAttribute(attributeName);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        setAttribute: function setAttribute(attributeName, value) {
                          _this.root.setAttribute(attributeName, value);
                        },
                        setStyle: function setStyle(name, value) {
                          _this.root.style.setProperty(name, value);
                        },
                        attachResizeObserver: function attachResizeObserver(callback) {
                          var RO = window.ResizeObserver;
                          if (RO) {
                            var ro = new RO(callback);
                            ro.observe(_this.root);
                            return ro;
                          }
                          return null;
                        },
                        getWidth: function getWidth() {
                          return _this.root.offsetWidth;
                        }
                      };
                      return new foundation_1.MDCLinearProgressFoundation(adapter);
                    };
                    return MDCLinearProgress2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCLinearProgress = MDCLinearProgress;
              }
            ),
            /***/
            "./packages/mdc-linear-progress/constants.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-linear-progress/constants.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.animationDimensionPercentages = exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  CLOSED_CLASS: "mdc-linear-progress--closed",
                  CLOSED_ANIMATION_OFF_CLASS: "mdc-linear-progress--closed-animation-off",
                  INDETERMINATE_CLASS: "mdc-linear-progress--indeterminate",
                  REVERSED_CLASS: "mdc-linear-progress--reversed",
                  ANIMATION_READY_CLASS: "mdc-linear-progress--animation-ready"
                };
                exports2.strings = {
                  ARIA_HIDDEN: "aria-hidden",
                  ARIA_VALUEMAX: "aria-valuemax",
                  ARIA_VALUEMIN: "aria-valuemin",
                  ARIA_VALUENOW: "aria-valuenow",
                  BUFFER_BAR_SELECTOR: ".mdc-linear-progress__buffer-bar",
                  FLEX_BASIS: "flex-basis",
                  PRIMARY_BAR_SELECTOR: ".mdc-linear-progress__primary-bar"
                };
                exports2.animationDimensionPercentages = {
                  PRIMARY_HALF: 0.8367142,
                  PRIMARY_FULL: 2.00611057,
                  SECONDARY_QUARTER: 0.37651913,
                  SECONDARY_HALF: 0.84386165,
                  SECONDARY_FULL: 1.60277782
                };
              }
            ),
            /***/
            "./packages/mdc-linear-progress/foundation.ts": (
              /*!****************************************************!*\
                !*** ./packages/mdc-linear-progress/foundation.ts ***!
                \****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCLinearProgressFoundation = void 0;
                var util_1 = __webpack_require__(
                  /*! @material/animation/util */
                  "./packages/mdc-animation/util.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-linear-progress/constants.ts"
                );
                var MDCLinearProgressFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCLinearProgressFoundation2, _super);
                    function MDCLinearProgressFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation2.defaultAdapter), adapter)) || this;
                      _this.observer = null;
                      return _this;
                    }
                    Object.defineProperty(MDCLinearProgressFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCLinearProgressFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCLinearProgressFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          attachResizeObserver: function attachResizeObserver() {
                            return null;
                          },
                          forceLayout: function forceLayout() {
                            return void 0;
                          },
                          getWidth: function getWidth() {
                            return 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          setBufferBarStyle: function setBufferBarStyle() {
                            return null;
                          },
                          setPrimaryBarStyle: function setPrimaryBarStyle() {
                            return null;
                          },
                          setStyle: function setStyle() {
                            return void 0;
                          },
                          removeAttribute: function removeAttribute() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          setAttribute: function setAttribute() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCLinearProgressFoundation2.prototype.init = function() {
                      var _this = this;
                      this.determinate = !this.adapter.hasClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                      this.adapter.addClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
                      this.progress = 0;
                      this.buffer = 1;
                      this.observer = this.adapter.attachResizeObserver(function(entries) {
                        var e_1, _a;
                        if (_this.determinate) {
                          return;
                        }
                        try {
                          for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                            var entry = entries_1_1.value;
                            if (entry.contentRect) {
                              _this.calculateAndSetDimensions(entry.contentRect.width);
                            }
                          }
                        } catch (e_1_1) {
                          e_1 = { error: e_1_1 };
                        } finally {
                          try {
                            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return))
                              _a.call(entries_1);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                        }
                      });
                      if (!this.determinate && this.observer) {
                        this.calculateAndSetDimensions(this.adapter.getWidth());
                      }
                    };
                    MDCLinearProgressFoundation2.prototype.setDeterminate = function(isDeterminate) {
                      this.determinate = isDeterminate;
                      if (this.determinate) {
                        this.adapter.removeClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, this.progress.toString());
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUEMAX, "1");
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUEMIN, "0");
                        this.setPrimaryBarProgress(this.progress);
                        this.setBufferBarProgress(this.buffer);
                        return;
                      }
                      if (this.observer) {
                        this.calculateAndSetDimensions(this.adapter.getWidth());
                      }
                      this.adapter.addClass(constants_1.cssClasses.INDETERMINATE_CLASS);
                      this.adapter.removeAttribute(constants_1.strings.ARIA_VALUENOW);
                      this.adapter.removeAttribute(constants_1.strings.ARIA_VALUEMAX);
                      this.adapter.removeAttribute(constants_1.strings.ARIA_VALUEMIN);
                      this.setPrimaryBarProgress(1);
                      this.setBufferBarProgress(1);
                    };
                    MDCLinearProgressFoundation2.prototype.isDeterminate = function() {
                      return this.determinate;
                    };
                    MDCLinearProgressFoundation2.prototype.setProgress = function(value) {
                      this.progress = value;
                      if (this.determinate) {
                        this.setPrimaryBarProgress(value);
                        this.adapter.setAttribute(constants_1.strings.ARIA_VALUENOW, value.toString());
                      }
                    };
                    MDCLinearProgressFoundation2.prototype.getProgress = function() {
                      return this.progress;
                    };
                    MDCLinearProgressFoundation2.prototype.setBuffer = function(value) {
                      this.buffer = value;
                      if (this.determinate) {
                        this.setBufferBarProgress(value);
                      }
                    };
                    MDCLinearProgressFoundation2.prototype.getBuffer = function() {
                      return this.buffer;
                    };
                    MDCLinearProgressFoundation2.prototype.open = function() {
                      this.adapter.removeClass(constants_1.cssClasses.CLOSED_CLASS);
                      this.adapter.removeClass(constants_1.cssClasses.CLOSED_ANIMATION_OFF_CLASS);
                      this.adapter.removeAttribute(constants_1.strings.ARIA_HIDDEN);
                    };
                    MDCLinearProgressFoundation2.prototype.close = function() {
                      this.adapter.addClass(constants_1.cssClasses.CLOSED_CLASS);
                      this.adapter.setAttribute(constants_1.strings.ARIA_HIDDEN, "true");
                    };
                    MDCLinearProgressFoundation2.prototype.isClosed = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.CLOSED_CLASS);
                    };
                    MDCLinearProgressFoundation2.prototype.handleTransitionEnd = function() {
                      if (this.adapter.hasClass(constants_1.cssClasses.CLOSED_CLASS)) {
                        this.adapter.addClass(constants_1.cssClasses.CLOSED_ANIMATION_OFF_CLASS);
                      }
                    };
                    MDCLinearProgressFoundation2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      if (this.observer) {
                        this.observer.disconnect();
                      }
                    };
                    MDCLinearProgressFoundation2.prototype.restartAnimation = function() {
                      this.adapter.removeClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
                      this.adapter.forceLayout();
                      this.adapter.addClass(constants_1.cssClasses.ANIMATION_READY_CLASS);
                    };
                    MDCLinearProgressFoundation2.prototype.setPrimaryBarProgress = function(progressValue) {
                      var value = "scaleX(" + progressValue + ")";
                      var transformProp = typeof window !== "undefined" ? util_1.getCorrectPropertyName(window, "transform") : "transform";
                      this.adapter.setPrimaryBarStyle(transformProp, value);
                    };
                    MDCLinearProgressFoundation2.prototype.setBufferBarProgress = function(progressValue) {
                      var value = progressValue * 100 + "%";
                      this.adapter.setBufferBarStyle(constants_1.strings.FLEX_BASIS, value);
                    };
                    MDCLinearProgressFoundation2.prototype.calculateAndSetDimensions = function(width) {
                      var primaryHalf = width * constants_1.animationDimensionPercentages.PRIMARY_HALF;
                      var primaryFull = width * constants_1.animationDimensionPercentages.PRIMARY_FULL;
                      var secondaryQuarter = width * constants_1.animationDimensionPercentages.SECONDARY_QUARTER;
                      var secondaryHalf = width * constants_1.animationDimensionPercentages.SECONDARY_HALF;
                      var secondaryFull = width * constants_1.animationDimensionPercentages.SECONDARY_FULL;
                      this.adapter.setStyle("--mdc-linear-progress-primary-half", primaryHalf + "px");
                      this.adapter.setStyle("--mdc-linear-progress-primary-half-neg", -primaryHalf + "px");
                      this.adapter.setStyle("--mdc-linear-progress-primary-full", primaryFull + "px");
                      this.adapter.setStyle("--mdc-linear-progress-primary-full-neg", -primaryFull + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-quarter", secondaryQuarter + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-quarter-neg", -secondaryQuarter + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-half", secondaryHalf + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-half-neg", -secondaryHalf + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-full", secondaryFull + "px");
                      this.adapter.setStyle("--mdc-linear-progress-secondary-full-neg", -secondaryFull + "px");
                      this.restartAnimation();
                    };
                    return MDCLinearProgressFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCLinearProgressFoundation = MDCLinearProgressFoundation;
                exports2.default = MDCLinearProgressFoundation;
              }
            ),
            /***/
            "./packages/mdc-linear-progress/index.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-linear-progress/index.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-linear-progress/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-linear-progress/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-linear-progress/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-linear-progress/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-linear-progress/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-linear-progress/types.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-linear-progress/types.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-list/adapter.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-list/adapter.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-list/component.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-list/component.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCList = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-list/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-list/foundation.ts"
                );
                var MDCList = (
                  /** @class */
                  function(_super) {
                    __extends(MDCList2, _super);
                    function MDCList2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(MDCList2.prototype, "vertical", {
                      set: function set(value) {
                        this.foundation.setVerticalOrientation(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "listElements", {
                      get: function get() {
                        return Array.from(this.root.querySelectorAll("." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS]));
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "wrapFocus", {
                      set: function set(value) {
                        this.foundation.setWrapFocus(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "typeaheadInProgress", {
                      /**
                       * @return Whether typeahead is currently matching a user-specified prefix.
                       */
                      get: function get() {
                        return this.foundation.isTypeaheadInProgress();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "hasTypeahead", {
                      /**
                       * Sets whether typeahead functionality is enabled on the list.
                       * @param hasTypeahead Whether typeahead is enabled.
                       */
                      set: function set(hasTypeahead) {
                        this.foundation.setHasTypeahead(hasTypeahead);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "singleSelection", {
                      set: function set(isSingleSelectionList) {
                        this.foundation.setSingleSelection(isSingleSelectionList);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "disabledItemsFocusable", {
                      set: function set(areDisabledItemsFocusable) {
                        this.foundation.setDisabledItemsFocusable(areDisabledItemsFocusable);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCList2.prototype, "selectedIndex", {
                      get: function get() {
                        return this.foundation.getSelectedIndex();
                      },
                      set: function set(index) {
                        this.foundation.setSelectedIndex(index);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCList2.attachTo = function(root) {
                      return new MDCList2(root);
                    };
                    MDCList2.prototype.initialSyncWithDOM = function() {
                      this.isEvolutionEnabled = constants_1.evolutionAttribute in this.root.dataset;
                      if (this.isEvolutionEnabled) {
                        this.classNameMap = constants_1.evolutionClassNameMap;
                      } else if (ponyfill_1.matches(this.root, constants_1.strings.DEPRECATED_SELECTOR)) {
                        this.classNameMap = constants_1.deprecatedClassNameMap;
                      } else {
                        this.classNameMap = Object.values(constants_1.cssClasses).reduce(function(obj, className) {
                          obj[className] = className;
                          return obj;
                        }, {});
                      }
                      this.handleClick = this.handleClickEvent.bind(this);
                      this.handleKeydown = this.handleKeydownEvent.bind(this);
                      this.focusInEventListener = this.handleFocusInEvent.bind(this);
                      this.focusOutEventListener = this.handleFocusOutEvent.bind(this);
                      this.listen("keydown", this.handleKeydown);
                      this.listen("click", this.handleClick);
                      this.listen("focusin", this.focusInEventListener);
                      this.listen("focusout", this.focusOutEventListener);
                      this.layout();
                      this.initializeListType();
                      this.ensureFocusable();
                    };
                    MDCList2.prototype.destroy = function() {
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten("click", this.handleClick);
                      this.unlisten("focusin", this.focusInEventListener);
                      this.unlisten("focusout", this.focusOutEventListener);
                    };
                    MDCList2.prototype.layout = function() {
                      var direction = this.root.getAttribute(constants_1.strings.ARIA_ORIENTATION);
                      this.vertical = direction !== constants_1.strings.ARIA_ORIENTATION_HORIZONTAL;
                      var itemSelector = "." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS] + ":not([tabindex])";
                      var childSelector = constants_1.strings.FOCUSABLE_CHILD_ELEMENTS;
                      var itemEls = this.root.querySelectorAll(itemSelector);
                      if (itemEls.length) {
                        Array.prototype.forEach.call(itemEls, function(el) {
                          el.setAttribute("tabindex", "-1");
                        });
                      }
                      var focusableChildEls = this.root.querySelectorAll(childSelector);
                      if (focusableChildEls.length) {
                        Array.prototype.forEach.call(focusableChildEls, function(el) {
                          el.setAttribute("tabindex", "-1");
                        });
                      }
                      if (this.isEvolutionEnabled) {
                        this.foundation.setUseSelectedAttribute(true);
                      }
                      this.foundation.layout();
                    };
                    MDCList2.prototype.getPrimaryText = function(item) {
                      var _a;
                      var primaryText = item.querySelector("." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS]);
                      if (this.isEvolutionEnabled || primaryText) {
                        return (_a = primaryText === null || primaryText === void 0 ? void 0 : primaryText.textContent) !== null && _a !== void 0 ? _a : "";
                      }
                      var singleLineText = item.querySelector("." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_TEXT_CLASS]);
                      return singleLineText && singleLineText.textContent || "";
                    };
                    MDCList2.prototype.initializeListType = function() {
                      var _this = this;
                      this.isInteractive = ponyfill_1.matches(this.root, constants_1.strings.ARIA_INTERACTIVE_ROLES_SELECTOR);
                      if (this.isEvolutionEnabled && this.isInteractive) {
                        var selection = Array.from(this.root.querySelectorAll(constants_1.strings.SELECTED_ITEM_SELECTOR), function(listItem) {
                          return _this.listElements.indexOf(listItem);
                        });
                        if (ponyfill_1.matches(this.root, constants_1.strings.ARIA_MULTI_SELECTABLE_SELECTOR)) {
                          this.selectedIndex = selection;
                        } else if (selection.length > 0) {
                          this.selectedIndex = selection[0];
                        }
                        return;
                      }
                      var checkboxListItems = this.root.querySelectorAll(constants_1.strings.ARIA_ROLE_CHECKBOX_SELECTOR);
                      var radioSelectedListItem = this.root.querySelector(constants_1.strings.ARIA_CHECKED_RADIO_SELECTOR);
                      if (checkboxListItems.length) {
                        var preselectedItems = this.root.querySelectorAll(constants_1.strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
                        this.selectedIndex = Array.from(preselectedItems, function(listItem) {
                          return _this.listElements.indexOf(listItem);
                        });
                      } else if (radioSelectedListItem) {
                        this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
                      }
                    };
                    MDCList2.prototype.setEnabled = function(itemIndex, isEnabled) {
                      this.foundation.setEnabled(itemIndex, isEnabled);
                    };
                    MDCList2.prototype.typeaheadMatchItem = function(nextChar, startingIndex) {
                      return this.foundation.typeaheadMatchItem(
                        nextChar,
                        startingIndex,
                        /** skipFocus */
                        true
                      );
                    };
                    MDCList2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClassForElementIndex: function addClassForElementIndex(index, className) {
                          var element = _this.listElements[index];
                          if (element) {
                            element.classList.add(_this.classNameMap[className]);
                          }
                        },
                        focusItemAtIndex: function focusItemAtIndex(index) {
                          var element = _this.listElements[index];
                          if (element) {
                            element.focus();
                          }
                        },
                        getAttributeForElementIndex: function getAttributeForElementIndex(index, attr) {
                          return _this.listElements[index].getAttribute(attr);
                        },
                        getFocusedElementIndex: function getFocusedElementIndex() {
                          return _this.listElements.indexOf(document.activeElement);
                        },
                        getListItemCount: function getListItemCount() {
                          return _this.listElements.length;
                        },
                        getPrimaryTextAtIndex: function getPrimaryTextAtIndex(index) {
                          return _this.getPrimaryText(_this.listElements[index]);
                        },
                        hasCheckboxAtIndex: function hasCheckboxAtIndex(index) {
                          var listItem = _this.listElements[index];
                          return !!listItem.querySelector(constants_1.strings.CHECKBOX_SELECTOR);
                        },
                        hasRadioAtIndex: function hasRadioAtIndex(index) {
                          var listItem = _this.listElements[index];
                          return !!listItem.querySelector(constants_1.strings.RADIO_SELECTOR);
                        },
                        isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex(index) {
                          var listItem = _this.listElements[index];
                          var toggleEl = listItem.querySelector(constants_1.strings.CHECKBOX_SELECTOR);
                          return toggleEl.checked;
                        },
                        isFocusInsideList: function isFocusInsideList() {
                          return _this.root !== document.activeElement && _this.root.contains(document.activeElement);
                        },
                        isRootFocused: function isRootFocused() {
                          return document.activeElement === _this.root;
                        },
                        listItemAtIndexHasClass: function listItemAtIndexHasClass(index, className) {
                          return _this.listElements[index].classList.contains(_this.classNameMap[className]);
                        },
                        notifyAction: function notifyAction(index) {
                          _this.emit(
                            constants_1.strings.ACTION_EVENT,
                            { index },
                            /** shouldBubble */
                            true
                          );
                        },
                        notifySelectionChange: function notifySelectionChange(changedIndices) {
                          _this.emit(
                            constants_1.strings.SELECTION_CHANGE_EVENT,
                            { changedIndices },
                            /** shouldBubble */
                            true
                          );
                        },
                        removeClassForElementIndex: function removeClassForElementIndex(index, className) {
                          var element = _this.listElements[index];
                          if (element) {
                            element.classList.remove(_this.classNameMap[className]);
                          }
                        },
                        setAttributeForElementIndex: function setAttributeForElementIndex(index, attr, value) {
                          var element = _this.listElements[index];
                          if (element) {
                            element.setAttribute(attr, value);
                          }
                        },
                        setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex(index, isChecked) {
                          var listItem = _this.listElements[index];
                          var toggleEl = listItem.querySelector(constants_1.strings.CHECKBOX_RADIO_SELECTOR);
                          toggleEl.checked = isChecked;
                          var event = document.createEvent("Event");
                          event.initEvent("change", true, true);
                          toggleEl.dispatchEvent(event);
                        },
                        setTabIndexForListItemChildren: function setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {
                          var element = _this.listElements[listItemIndex];
                          var selector = constants_1.strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;
                          Array.prototype.forEach.call(element.querySelectorAll(selector), function(el) {
                            el.setAttribute("tabindex", tabIndexValue);
                          });
                        }
                      };
                      return new foundation_1.MDCListFoundation(adapter);
                    };
                    MDCList2.prototype.ensureFocusable = function() {
                      if (this.isEvolutionEnabled && this.isInteractive) {
                        if (!this.root.querySelector("." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS] + '[tabindex="0"]')) {
                          var index = this.initialFocusIndex();
                          if (index !== -1) {
                            this.listElements[index].tabIndex = 0;
                          }
                        }
                      }
                    };
                    MDCList2.prototype.initialFocusIndex = function() {
                      if (this.selectedIndex instanceof Array && this.selectedIndex.length > 0) {
                        return this.selectedIndex[0];
                      }
                      if (typeof this.selectedIndex === "number" && this.selectedIndex !== constants_1.numbers.UNSET_INDEX) {
                        return this.selectedIndex;
                      }
                      var el = this.root.querySelector("." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS] + ":not(." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS] + ")");
                      if (el === null) {
                        return -1;
                      }
                      return this.getListItemIndex(el);
                    };
                    MDCList2.prototype.getListItemIndex = function(el) {
                      var nearestParent = ponyfill_1.closest(el, "." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS] + ", ." + this.classNameMap[constants_1.cssClasses.ROOT]);
                      if (nearestParent && ponyfill_1.matches(nearestParent, "." + this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS])) {
                        return this.listElements.indexOf(nearestParent);
                      }
                      return -1;
                    };
                    MDCList2.prototype.handleFocusInEvent = function(evt) {
                      var index = this.getListItemIndex(evt.target);
                      this.foundation.handleFocusIn(index);
                    };
                    MDCList2.prototype.handleFocusOutEvent = function(evt) {
                      var index = this.getListItemIndex(evt.target);
                      this.foundation.handleFocusOut(index);
                    };
                    MDCList2.prototype.handleKeydownEvent = function(evt) {
                      var index = this.getListItemIndex(evt.target);
                      var target = evt.target;
                      this.foundation.handleKeydown(evt, target.classList.contains(this.classNameMap[constants_1.cssClasses.LIST_ITEM_CLASS]), index);
                    };
                    MDCList2.prototype.handleClickEvent = function(evt) {
                      var index = this.getListItemIndex(evt.target);
                      var target = evt.target;
                      var toggleCheckbox = !ponyfill_1.matches(target, constants_1.strings.CHECKBOX_RADIO_SELECTOR);
                      this.foundation.handleClick(index, toggleCheckbox, evt);
                    };
                    return MDCList2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCList = MDCList;
              }
            ),
            /***/
            "./packages/mdc-list/constants.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-list/constants.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var _a, _b;
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.evolutionClassNameMap = exports2.evolutionAttribute = exports2.deprecatedClassNameMap = exports2.numbers = exports2.cssClasses = exports2.strings = void 0;
                var cssClasses = {
                  LIST_ITEM_ACTIVATED_CLASS: "mdc-list-item--activated",
                  LIST_ITEM_CLASS: "mdc-list-item",
                  LIST_ITEM_DISABLED_CLASS: "mdc-list-item--disabled",
                  LIST_ITEM_SELECTED_CLASS: "mdc-list-item--selected",
                  LIST_ITEM_TEXT_CLASS: "mdc-list-item__text",
                  LIST_ITEM_PRIMARY_TEXT_CLASS: "mdc-list-item__primary-text",
                  ROOT: "mdc-list"
                };
                exports2.cssClasses = cssClasses;
                var evolutionClassNameMap = (_a = {}, _a["" + cssClasses.LIST_ITEM_ACTIVATED_CLASS] = "mdc-list-item--activated", _a["" + cssClasses.LIST_ITEM_CLASS] = "mdc-list-item", _a["" + cssClasses.LIST_ITEM_DISABLED_CLASS] = "mdc-list-item--disabled", _a["" + cssClasses.LIST_ITEM_SELECTED_CLASS] = "mdc-list-item--selected", _a["" + cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS] = "mdc-list-item__primary-text", _a["" + cssClasses.ROOT] = "mdc-list", _a);
                exports2.evolutionClassNameMap = evolutionClassNameMap;
                var deprecatedClassNameMap = (_b = {}, _b["" + cssClasses.LIST_ITEM_ACTIVATED_CLASS] = "mdc-deprecated-list-item--activated", _b["" + cssClasses.LIST_ITEM_CLASS] = "mdc-deprecated-list-item", _b["" + cssClasses.LIST_ITEM_DISABLED_CLASS] = "mdc-deprecated-list-item--disabled", _b["" + cssClasses.LIST_ITEM_SELECTED_CLASS] = "mdc-deprecated-list-item--selected", _b["" + cssClasses.LIST_ITEM_TEXT_CLASS] = "mdc-deprecated-list-item__text", _b["" + cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS] = "mdc-deprecated-list-item__primary-text", _b["" + cssClasses.ROOT] = "mdc-deprecated-list", _b);
                exports2.deprecatedClassNameMap = deprecatedClassNameMap;
                var strings = {
                  ACTION_EVENT: "MDCList:action",
                  SELECTION_CHANGE_EVENT: "MDCList:selectionChange",
                  ARIA_CHECKED: "aria-checked",
                  ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
                  ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
                  ARIA_CURRENT: "aria-current",
                  ARIA_DISABLED: "aria-disabled",
                  ARIA_ORIENTATION: "aria-orientation",
                  ARIA_ORIENTATION_HORIZONTAL: "horizontal",
                  ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
                  ARIA_SELECTED: "aria-selected",
                  ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
                  ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
                  CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
                  CHECKBOX_SELECTOR: 'input[type="checkbox"]',
                  CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " a\n  ",
                  DEPRECATED_SELECTOR: ".mdc-deprecated-list",
                  FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a,\n    ." + cssClasses.LIST_ITEM_CLASS + ' input[type="radio"]:not(:disabled),\n    .' + cssClasses.LIST_ITEM_CLASS + ' input[type="checkbox"]:not(:disabled),\n    .' + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + ' input[type="radio"]:not(:disabled),\n    .' + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + ' input[type="checkbox"]:not(:disabled)\n  ',
                  RADIO_SELECTOR: 'input[type="radio"]',
                  SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]'
                };
                exports2.strings = strings;
                var numbers = {
                  UNSET_INDEX: -1,
                  TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
                };
                exports2.numbers = numbers;
                var evolutionAttribute = "evolution";
                exports2.evolutionAttribute = evolutionAttribute;
              }
            ),
            /***/
            "./packages/mdc-list/events.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-list/events.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.preventDefaultEvent = void 0;
                var ELEMENTS_KEY_ALLOWED_IN = ["input", "button", "textarea", "select"];
                var preventDefaultEvent = function preventDefaultEvent2(evt) {
                  var target = evt.target;
                  if (!target) {
                    return;
                  }
                  var tagName = ("" + target.tagName).toLowerCase();
                  if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
                    evt.preventDefault();
                  }
                };
                exports2.preventDefaultEvent = preventDefaultEvent;
              }
            ),
            /***/
            "./packages/mdc-list/foundation.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-list/foundation.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                var __spreadArray = this && this.__spreadArray || function(to, from) {
                  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
                    to[j] = from[i];
                  }
                  return to;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCListFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var keyboard_1 = __webpack_require__(
                  /*! @material/dom/keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-list/constants.ts"
                );
                var events_1 = __webpack_require__(
                  /*! ./events */
                  "./packages/mdc-list/events.ts"
                );
                var typeahead = __importStar(__webpack_require__(
                  /*! ./typeahead */
                  "./packages/mdc-list/typeahead.ts"
                ));
                function isNumberArray(selectedIndex) {
                  return selectedIndex instanceof Array;
                }
                var handledModifierKeys = ["Alt", "Control", "Meta", "Shift"];
                function createModifierChecker(event) {
                  var eventModifiers = new Set(event ? handledModifierKeys.filter(function(m) {
                    return event.getModifierState(m);
                  }) : []);
                  return function(modifiers) {
                    return modifiers.every(function(m) {
                      return eventModifiers.has(m);
                    }) && modifiers.length === eventModifiers.size;
                  };
                }
                var MDCListFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCListFoundation2, _super);
                    function MDCListFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCListFoundation2.defaultAdapter), adapter)) || this;
                      _this.wrapFocus = false;
                      _this.isVertical = true;
                      _this.isSingleSelectionList = false;
                      _this.areDisabledItemsFocusable = true;
                      _this.selectedIndex = constants_1.numbers.UNSET_INDEX;
                      _this.focusedItemIndex = constants_1.numbers.UNSET_INDEX;
                      _this.useActivatedClass = false;
                      _this.useSelectedAttr = false;
                      _this.ariaCurrentAttrValue = null;
                      _this.isCheckboxList = false;
                      _this.isRadioList = false;
                      _this.lastSelectedIndex = null;
                      _this.hasTypeahead = false;
                      _this.typeaheadState = typeahead.initState();
                      _this.sortedIndexByFirstChar = /* @__PURE__ */ new Map();
                      return _this;
                    }
                    Object.defineProperty(MDCListFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCListFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCListFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCListFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClassForElementIndex: function addClassForElementIndex() {
                            return void 0;
                          },
                          focusItemAtIndex: function focusItemAtIndex() {
                            return void 0;
                          },
                          getAttributeForElementIndex: function getAttributeForElementIndex() {
                            return null;
                          },
                          getFocusedElementIndex: function getFocusedElementIndex() {
                            return 0;
                          },
                          getListItemCount: function getListItemCount() {
                            return 0;
                          },
                          hasCheckboxAtIndex: function hasCheckboxAtIndex() {
                            return false;
                          },
                          hasRadioAtIndex: function hasRadioAtIndex() {
                            return false;
                          },
                          isCheckboxCheckedAtIndex: function isCheckboxCheckedAtIndex() {
                            return false;
                          },
                          isFocusInsideList: function isFocusInsideList() {
                            return false;
                          },
                          isRootFocused: function isRootFocused() {
                            return false;
                          },
                          listItemAtIndexHasClass: function listItemAtIndexHasClass() {
                            return false;
                          },
                          notifyAction: function notifyAction() {
                            return void 0;
                          },
                          notifySelectionChange: function notifySelectionChange() {
                          },
                          removeClassForElementIndex: function removeClassForElementIndex() {
                            return void 0;
                          },
                          setAttributeForElementIndex: function setAttributeForElementIndex() {
                            return void 0;
                          },
                          setCheckedCheckboxOrRadioAtIndex: function setCheckedCheckboxOrRadioAtIndex() {
                            return void 0;
                          },
                          setTabIndexForListItemChildren: function setTabIndexForListItemChildren() {
                            return void 0;
                          },
                          getPrimaryTextAtIndex: function getPrimaryTextAtIndex() {
                            return "";
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCListFoundation2.prototype.layout = function() {
                      if (this.adapter.getListItemCount() === 0) {
                        return;
                      }
                      if (this.adapter.hasCheckboxAtIndex(0)) {
                        this.isCheckboxList = true;
                      } else if (this.adapter.hasRadioAtIndex(0)) {
                        this.isRadioList = true;
                      } else {
                        this.maybeInitializeSingleSelection();
                      }
                      if (this.hasTypeahead) {
                        this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
                      }
                    };
                    MDCListFoundation2.prototype.getFocusedItemIndex = function() {
                      return this.focusedItemIndex;
                    };
                    MDCListFoundation2.prototype.setWrapFocus = function(value) {
                      this.wrapFocus = value;
                    };
                    MDCListFoundation2.prototype.setVerticalOrientation = function(value) {
                      this.isVertical = value;
                    };
                    MDCListFoundation2.prototype.setSingleSelection = function(value) {
                      this.isSingleSelectionList = value;
                      if (value) {
                        this.maybeInitializeSingleSelection();
                        this.selectedIndex = this.getSelectedIndexFromDOM();
                      }
                    };
                    MDCListFoundation2.prototype.setDisabledItemsFocusable = function(value) {
                      this.areDisabledItemsFocusable = value;
                    };
                    MDCListFoundation2.prototype.maybeInitializeSingleSelection = function() {
                      var selectedItemIndex = this.getSelectedIndexFromDOM();
                      if (selectedItemIndex === constants_1.numbers.UNSET_INDEX)
                        return;
                      var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, constants_1.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
                      if (hasActivatedClass) {
                        this.setUseActivatedClass(true);
                      }
                      this.isSingleSelectionList = true;
                      this.selectedIndex = selectedItemIndex;
                    };
                    MDCListFoundation2.prototype.getSelectedIndexFromDOM = function() {
                      var selectedIndex = constants_1.numbers.UNSET_INDEX;
                      var listItemsCount = this.adapter.getListItemCount();
                      for (var i = 0; i < listItemsCount; i++) {
                        var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, constants_1.cssClasses.LIST_ITEM_SELECTED_CLASS);
                        var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, constants_1.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
                        if (!(hasSelectedClass || hasActivatedClass)) {
                          continue;
                        }
                        selectedIndex = i;
                        break;
                      }
                      return selectedIndex;
                    };
                    MDCListFoundation2.prototype.setHasTypeahead = function(hasTypeahead) {
                      this.hasTypeahead = hasTypeahead;
                      if (hasTypeahead) {
                        this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
                      }
                    };
                    MDCListFoundation2.prototype.isTypeaheadInProgress = function() {
                      return this.hasTypeahead && typeahead.isTypingInProgress(this.typeaheadState);
                    };
                    MDCListFoundation2.prototype.setUseActivatedClass = function(useActivated) {
                      this.useActivatedClass = useActivated;
                    };
                    MDCListFoundation2.prototype.setUseSelectedAttribute = function(useSelected) {
                      this.useSelectedAttr = useSelected;
                    };
                    MDCListFoundation2.prototype.getSelectedIndex = function() {
                      return this.selectedIndex;
                    };
                    MDCListFoundation2.prototype.setSelectedIndex = function(index, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      if (!this.isIndexValid(index)) {
                        return;
                      }
                      if (this.isCheckboxList) {
                        this.setCheckboxAtIndex(index, options);
                      } else if (this.isRadioList) {
                        this.setRadioAtIndex(index, options);
                      } else {
                        this.setSingleSelectionAtIndex(index, options);
                      }
                    };
                    MDCListFoundation2.prototype.handleFocusIn = function(listItemIndex) {
                      if (listItemIndex >= 0) {
                        this.focusedItemIndex = listItemIndex;
                        this.adapter.setAttributeForElementIndex(listItemIndex, "tabindex", "0");
                        this.adapter.setTabIndexForListItemChildren(listItemIndex, "0");
                      }
                    };
                    MDCListFoundation2.prototype.handleFocusOut = function(listItemIndex) {
                      var _this = this;
                      if (listItemIndex >= 0) {
                        this.adapter.setAttributeForElementIndex(listItemIndex, "tabindex", "-1");
                        this.adapter.setTabIndexForListItemChildren(listItemIndex, "-1");
                      }
                      setTimeout(function() {
                        if (!_this.adapter.isFocusInsideList()) {
                          _this.setTabindexToFirstSelectedOrFocusedItem();
                        }
                      }, 0);
                    };
                    MDCListFoundation2.prototype.isIndexDisabled = function(index) {
                      return this.adapter.listItemAtIndexHasClass(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                    };
                    MDCListFoundation2.prototype.handleKeydown = function(event, isRootListItem, listItemIndex) {
                      var _this = this;
                      var _a;
                      var isArrowLeft = keyboard_1.normalizeKey(event) === "ArrowLeft";
                      var isArrowUp = keyboard_1.normalizeKey(event) === "ArrowUp";
                      var isArrowRight = keyboard_1.normalizeKey(event) === "ArrowRight";
                      var isArrowDown = keyboard_1.normalizeKey(event) === "ArrowDown";
                      var isHome = keyboard_1.normalizeKey(event) === "Home";
                      var isEnd = keyboard_1.normalizeKey(event) === "End";
                      var isEnter = keyboard_1.normalizeKey(event) === "Enter";
                      var isSpace = keyboard_1.normalizeKey(event) === "Spacebar";
                      var isForward = this.isVertical && isArrowDown || !this.isVertical && isArrowRight;
                      var isBack = this.isVertical && isArrowUp || !this.isVertical && isArrowLeft;
                      var isLetterA = event.key === "A" || event.key === "a";
                      var eventHasModifiers = createModifierChecker(event);
                      if (this.adapter.isRootFocused()) {
                        if ((isBack || isEnd) && eventHasModifiers([])) {
                          event.preventDefault();
                          this.focusLastElement();
                        } else if ((isForward || isHome) && eventHasModifiers([])) {
                          event.preventDefault();
                          this.focusFirstElement();
                        } else if (isBack && eventHasModifiers(["Shift"]) && this.isCheckboxList) {
                          event.preventDefault();
                          var focusedIndex = this.focusLastElement();
                          if (focusedIndex !== -1) {
                            this.setSelectedIndexOnAction(focusedIndex, false);
                          }
                        } else if (isForward && eventHasModifiers(["Shift"]) && this.isCheckboxList) {
                          event.preventDefault();
                          var focusedIndex = this.focusFirstElement();
                          if (focusedIndex !== -1) {
                            this.setSelectedIndexOnAction(focusedIndex, false);
                          }
                        }
                        if (this.hasTypeahead) {
                          var handleKeydownOpts = {
                            event,
                            focusItemAtIndex: function focusItemAtIndex(index) {
                              _this.focusItemAtIndex(index);
                            },
                            focusedItemIndex: -1,
                            isTargetListItem: isRootListItem,
                            sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                            isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                              return _this.isIndexDisabled(index);
                            }
                          };
                          typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
                        }
                        return;
                      }
                      var currentIndex = this.adapter.getFocusedElementIndex();
                      if (currentIndex === -1) {
                        currentIndex = listItemIndex;
                        if (currentIndex < 0) {
                          return;
                        }
                      }
                      if (isForward && eventHasModifiers([])) {
                        events_1.preventDefaultEvent(event);
                        this.focusNextElement(currentIndex);
                      } else if (isBack && eventHasModifiers([])) {
                        events_1.preventDefaultEvent(event);
                        this.focusPrevElement(currentIndex);
                      } else if (isForward && eventHasModifiers(["Shift"]) && this.isCheckboxList) {
                        events_1.preventDefaultEvent(event);
                        var focusedIndex = this.focusNextElement(currentIndex);
                        if (focusedIndex !== -1) {
                          this.setSelectedIndexOnAction(focusedIndex, false);
                        }
                      } else if (isBack && eventHasModifiers(["Shift"]) && this.isCheckboxList) {
                        events_1.preventDefaultEvent(event);
                        var focusedIndex = this.focusPrevElement(currentIndex);
                        if (focusedIndex !== -1) {
                          this.setSelectedIndexOnAction(focusedIndex, false);
                        }
                      } else if (isHome && eventHasModifiers([])) {
                        events_1.preventDefaultEvent(event);
                        this.focusFirstElement();
                      } else if (isEnd && eventHasModifiers([])) {
                        events_1.preventDefaultEvent(event);
                        this.focusLastElement();
                      } else if (isHome && eventHasModifiers(["Control", "Shift"]) && this.isCheckboxList) {
                        events_1.preventDefaultEvent(event);
                        if (this.isIndexDisabled(currentIndex)) {
                          return;
                        }
                        this.focusFirstElement();
                        this.toggleCheckboxRange(0, currentIndex, currentIndex);
                      } else if (isEnd && eventHasModifiers(["Control", "Shift"]) && this.isCheckboxList) {
                        events_1.preventDefaultEvent(event);
                        if (this.isIndexDisabled(currentIndex)) {
                          return;
                        }
                        this.focusLastElement();
                        this.toggleCheckboxRange(currentIndex, this.adapter.getListItemCount() - 1, currentIndex);
                      } else if (isLetterA && eventHasModifiers(["Control"]) && this.isCheckboxList) {
                        event.preventDefault();
                        this.checkboxListToggleAll(this.selectedIndex === constants_1.numbers.UNSET_INDEX ? [] : this.selectedIndex, true);
                      } else if ((isEnter || isSpace) && eventHasModifiers([])) {
                        if (isRootListItem) {
                          var target = event.target;
                          if (target && target.tagName === "A" && isEnter) {
                            return;
                          }
                          events_1.preventDefaultEvent(event);
                          if (this.isIndexDisabled(currentIndex)) {
                            return;
                          }
                          if (!this.isTypeaheadInProgress()) {
                            if (this.isSelectableList()) {
                              this.setSelectedIndexOnAction(currentIndex, false);
                            }
                            this.adapter.notifyAction(currentIndex);
                          }
                        }
                      } else if ((isEnter || isSpace) && eventHasModifiers(["Shift"]) && this.isCheckboxList) {
                        var target = event.target;
                        if (target && target.tagName === "A" && isEnter) {
                          return;
                        }
                        events_1.preventDefaultEvent(event);
                        if (this.isIndexDisabled(currentIndex)) {
                          return;
                        }
                        if (!this.isTypeaheadInProgress()) {
                          this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : currentIndex, currentIndex, currentIndex);
                          this.adapter.notifyAction(currentIndex);
                        }
                      }
                      if (this.hasTypeahead) {
                        var handleKeydownOpts = {
                          event,
                          focusItemAtIndex: function focusItemAtIndex(index) {
                            _this.focusItemAtIndex(index);
                          },
                          focusedItemIndex: this.focusedItemIndex,
                          isTargetListItem: isRootListItem,
                          sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                          isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                            return _this.isIndexDisabled(index);
                          }
                        };
                        typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
                      }
                    };
                    MDCListFoundation2.prototype.handleClick = function(index, isCheckboxAlreadyUpdatedInAdapter, event) {
                      var _a;
                      var eventHasModifiers = createModifierChecker(event);
                      if (index === constants_1.numbers.UNSET_INDEX) {
                        return;
                      }
                      if (this.isIndexDisabled(index)) {
                        return;
                      }
                      if (eventHasModifiers([])) {
                        if (this.isSelectableList()) {
                          this.setSelectedIndexOnAction(index, isCheckboxAlreadyUpdatedInAdapter);
                        }
                        this.adapter.notifyAction(index);
                      } else if (this.isCheckboxList && eventHasModifiers(["Shift"])) {
                        this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : index, index, index);
                        this.adapter.notifyAction(index);
                      }
                    };
                    MDCListFoundation2.prototype.focusNextElement = function(index) {
                      var count = this.adapter.getListItemCount();
                      var nextIndex = index;
                      var firstChecked = null;
                      do {
                        nextIndex++;
                        if (nextIndex >= count) {
                          if (this.wrapFocus) {
                            nextIndex = 0;
                          } else {
                            return index;
                          }
                        }
                        if (nextIndex === firstChecked) {
                          return -1;
                        }
                        firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : nextIndex;
                      } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(nextIndex));
                      this.focusItemAtIndex(nextIndex);
                      return nextIndex;
                    };
                    MDCListFoundation2.prototype.focusPrevElement = function(index) {
                      var count = this.adapter.getListItemCount();
                      var prevIndex = index;
                      var firstChecked = null;
                      do {
                        prevIndex--;
                        if (prevIndex < 0) {
                          if (this.wrapFocus) {
                            prevIndex = count - 1;
                          } else {
                            return index;
                          }
                        }
                        if (prevIndex === firstChecked) {
                          return -1;
                        }
                        firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : prevIndex;
                      } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(prevIndex));
                      this.focusItemAtIndex(prevIndex);
                      return prevIndex;
                    };
                    MDCListFoundation2.prototype.focusFirstElement = function() {
                      return this.focusNextElement(-1);
                    };
                    MDCListFoundation2.prototype.focusLastElement = function() {
                      return this.focusPrevElement(this.adapter.getListItemCount());
                    };
                    MDCListFoundation2.prototype.focusInitialElement = function() {
                      var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
                      this.focusItemAtIndex(initialIndex);
                      return initialIndex;
                    };
                    MDCListFoundation2.prototype.setEnabled = function(itemIndex, isEnabled) {
                      if (!this.isIndexValid(itemIndex, false)) {
                        return;
                      }
                      if (isEnabled) {
                        this.adapter.removeClassForElementIndex(itemIndex, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                        this.adapter.setAttributeForElementIndex(itemIndex, constants_1.strings.ARIA_DISABLED, "false");
                      } else {
                        this.adapter.addClassForElementIndex(itemIndex, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                        this.adapter.setAttributeForElementIndex(itemIndex, constants_1.strings.ARIA_DISABLED, "true");
                      }
                    };
                    MDCListFoundation2.prototype.setSingleSelectionAtIndex = function(index, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      if (this.selectedIndex === index && !options.forceUpdate) {
                        return;
                      }
                      var selectedClassName = constants_1.cssClasses.LIST_ITEM_SELECTED_CLASS;
                      if (this.useActivatedClass) {
                        selectedClassName = constants_1.cssClasses.LIST_ITEM_ACTIVATED_CLASS;
                      }
                      if (this.selectedIndex !== constants_1.numbers.UNSET_INDEX) {
                        this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);
                      }
                      this.setAriaForSingleSelectionAtIndex(index);
                      this.setTabindexAtIndex(index);
                      if (index !== constants_1.numbers.UNSET_INDEX) {
                        this.adapter.addClassForElementIndex(index, selectedClassName);
                      }
                      this.selectedIndex = index;
                      if (options.isUserInteraction && !options.forceUpdate) {
                        this.adapter.notifySelectionChange([index]);
                      }
                    };
                    MDCListFoundation2.prototype.setAriaForSingleSelectionAtIndex = function(index) {
                      if (this.selectedIndex === constants_1.numbers.UNSET_INDEX) {
                        this.ariaCurrentAttrValue = this.adapter.getAttributeForElementIndex(index, constants_1.strings.ARIA_CURRENT);
                      }
                      var isAriaCurrent = this.ariaCurrentAttrValue !== null;
                      var ariaAttribute = isAriaCurrent ? constants_1.strings.ARIA_CURRENT : constants_1.strings.ARIA_SELECTED;
                      if (this.selectedIndex !== constants_1.numbers.UNSET_INDEX) {
                        this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, "false");
                      }
                      if (index !== constants_1.numbers.UNSET_INDEX) {
                        var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : "true";
                        this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
                      }
                    };
                    MDCListFoundation2.prototype.getSelectionAttribute = function() {
                      return this.useSelectedAttr ? constants_1.strings.ARIA_SELECTED : constants_1.strings.ARIA_CHECKED;
                    };
                    MDCListFoundation2.prototype.setRadioAtIndex = function(index, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      var selectionAttribute = this.getSelectionAttribute();
                      this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
                      if (this.selectedIndex === index && !options.forceUpdate) {
                        return;
                      }
                      if (this.selectedIndex !== constants_1.numbers.UNSET_INDEX) {
                        this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, "false");
                      }
                      this.adapter.setAttributeForElementIndex(index, selectionAttribute, "true");
                      this.selectedIndex = index;
                      if (options.isUserInteraction && !options.forceUpdate) {
                        this.adapter.notifySelectionChange([index]);
                      }
                    };
                    MDCListFoundation2.prototype.setCheckboxAtIndex = function(index, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      var currentIndex = this.selectedIndex;
                      var currentlySelected = options.isUserInteraction ? new Set(currentIndex === constants_1.numbers.UNSET_INDEX ? [] : currentIndex) : null;
                      var selectionAttribute = this.getSelectionAttribute();
                      var changedIndices = [];
                      for (var i = 0; i < this.adapter.getListItemCount(); i++) {
                        var previousIsChecked = currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(i);
                        var newIsChecked = index.indexOf(i) >= 0;
                        if (newIsChecked !== previousIsChecked) {
                          changedIndices.push(i);
                        }
                        this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);
                        this.adapter.setAttributeForElementIndex(i, selectionAttribute, newIsChecked ? "true" : "false");
                      }
                      this.selectedIndex = index;
                      if (options.isUserInteraction && changedIndices.length) {
                        this.adapter.notifySelectionChange(changedIndices);
                      }
                    };
                    MDCListFoundation2.prototype.toggleCheckboxRange = function(fromIndex, toIndex, toggleIndex) {
                      this.lastSelectedIndex = toggleIndex;
                      var currentlySelected = new Set(this.selectedIndex === constants_1.numbers.UNSET_INDEX ? [] : this.selectedIndex);
                      var newIsChecked = !(currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(toggleIndex));
                      var _a = __read([fromIndex, toIndex].sort(), 2), startIndex = _a[0], endIndex = _a[1];
                      var selectionAttribute = this.getSelectionAttribute();
                      var changedIndices = [];
                      for (var i = startIndex; i <= endIndex; i++) {
                        if (this.isIndexDisabled(i)) {
                          continue;
                        }
                        var previousIsChecked = currentlySelected.has(i);
                        if (newIsChecked !== previousIsChecked) {
                          changedIndices.push(i);
                          this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);
                          this.adapter.setAttributeForElementIndex(i, selectionAttribute, "" + newIsChecked);
                          if (newIsChecked) {
                            currentlySelected.add(i);
                          } else {
                            currentlySelected.delete(i);
                          }
                        }
                      }
                      if (changedIndices.length) {
                        this.selectedIndex = __spreadArray([], __read(currentlySelected));
                        this.adapter.notifySelectionChange(changedIndices);
                      }
                    };
                    MDCListFoundation2.prototype.setTabindexAtIndex = function(index) {
                      if (this.focusedItemIndex === constants_1.numbers.UNSET_INDEX && index !== 0) {
                        this.adapter.setAttributeForElementIndex(0, "tabindex", "-1");
                      } else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {
                        this.adapter.setAttributeForElementIndex(this.focusedItemIndex, "tabindex", "-1");
                      }
                      if (!(this.selectedIndex instanceof Array) && this.selectedIndex !== index) {
                        this.adapter.setAttributeForElementIndex(this.selectedIndex, "tabindex", "-1");
                      }
                      if (index !== constants_1.numbers.UNSET_INDEX) {
                        this.adapter.setAttributeForElementIndex(index, "tabindex", "0");
                      }
                    };
                    MDCListFoundation2.prototype.isSelectableList = function() {
                      return this.isSingleSelectionList || this.isCheckboxList || this.isRadioList;
                    };
                    MDCListFoundation2.prototype.setTabindexToFirstSelectedOrFocusedItem = function() {
                      var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
                      this.setTabindexAtIndex(targetIndex);
                    };
                    MDCListFoundation2.prototype.getFirstSelectedOrFocusedItemIndex = function() {
                      if (!this.isSelectableList()) {
                        return Math.max(this.focusedItemIndex, 0);
                      }
                      if (typeof this.selectedIndex === "number" && this.selectedIndex !== constants_1.numbers.UNSET_INDEX) {
                        return this.selectedIndex;
                      }
                      if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {
                        return this.selectedIndex.reduce(function(minIndex, currentIndex) {
                          return Math.min(minIndex, currentIndex);
                        });
                      }
                      return 0;
                    };
                    MDCListFoundation2.prototype.isIndexValid = function(index, validateListType) {
                      var _this = this;
                      if (validateListType === void 0) {
                        validateListType = true;
                      }
                      if (index instanceof Array) {
                        if (!this.isCheckboxList && validateListType) {
                          throw new Error("MDCListFoundation: Array of index is only supported for checkbox based list");
                        }
                        if (index.length === 0) {
                          return true;
                        } else {
                          return index.some(function(i) {
                            return _this.isIndexInRange(i);
                          });
                        }
                      } else if (typeof index === "number") {
                        if (this.isCheckboxList && validateListType) {
                          throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
                        }
                        return this.isIndexInRange(index) || this.isSingleSelectionList && index === constants_1.numbers.UNSET_INDEX;
                      } else {
                        return false;
                      }
                    };
                    MDCListFoundation2.prototype.isIndexInRange = function(index) {
                      var listSize = this.adapter.getListItemCount();
                      return index >= 0 && index < listSize;
                    };
                    MDCListFoundation2.prototype.setSelectedIndexOnAction = function(index, isCheckboxAlreadyUpdatedInAdapter) {
                      this.lastSelectedIndex = index;
                      if (this.isCheckboxList) {
                        this.toggleCheckboxAtIndex(index, isCheckboxAlreadyUpdatedInAdapter);
                        this.adapter.notifySelectionChange([index]);
                      } else {
                        this.setSelectedIndex(index, { isUserInteraction: true });
                      }
                    };
                    MDCListFoundation2.prototype.toggleCheckboxAtIndex = function(index, isCheckboxAlreadyUpdatedInAdapter) {
                      var selectionAttribute = this.getSelectionAttribute();
                      var adapterIsChecked = this.adapter.isCheckboxCheckedAtIndex(index);
                      var newCheckedValue;
                      if (isCheckboxAlreadyUpdatedInAdapter) {
                        newCheckedValue = adapterIsChecked;
                      } else {
                        newCheckedValue = !adapterIsChecked;
                        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, newCheckedValue);
                      }
                      this.adapter.setAttributeForElementIndex(index, selectionAttribute, newCheckedValue ? "true" : "false");
                      var selectedIndexes = this.selectedIndex === constants_1.numbers.UNSET_INDEX ? [] : this.selectedIndex.slice();
                      if (newCheckedValue) {
                        selectedIndexes.push(index);
                      } else {
                        selectedIndexes = selectedIndexes.filter(function(i) {
                          return i !== index;
                        });
                      }
                      this.selectedIndex = selectedIndexes;
                    };
                    MDCListFoundation2.prototype.focusItemAtIndex = function(index) {
                      this.adapter.focusItemAtIndex(index);
                      this.focusedItemIndex = index;
                    };
                    MDCListFoundation2.prototype.checkboxListToggleAll = function(currentlySelectedIndexes, isUserInteraction) {
                      var count = this.adapter.getListItemCount();
                      if (currentlySelectedIndexes.length === count) {
                        this.setCheckboxAtIndex([], { isUserInteraction });
                      } else {
                        var allIndexes = [];
                        for (var i = 0; i < count; i++) {
                          if (!this.isIndexDisabled(i) || currentlySelectedIndexes.indexOf(i) > -1) {
                            allIndexes.push(i);
                          }
                        }
                        this.setCheckboxAtIndex(allIndexes, { isUserInteraction });
                      }
                    };
                    MDCListFoundation2.prototype.typeaheadMatchItem = function(nextChar, startingIndex, skipFocus) {
                      var _this = this;
                      if (skipFocus === void 0) {
                        skipFocus = false;
                      }
                      var opts = {
                        focusItemAtIndex: function focusItemAtIndex(index) {
                          _this.focusItemAtIndex(index);
                        },
                        focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
                        nextChar,
                        sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                        skipFocus,
                        isItemAtIndexDisabled: function isItemAtIndexDisabled(index) {
                          return _this.isIndexDisabled(index);
                        }
                      };
                      return typeahead.matchItem(opts, this.typeaheadState);
                    };
                    MDCListFoundation2.prototype.typeaheadInitSortedIndex = function() {
                      return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
                    };
                    MDCListFoundation2.prototype.clearTypeaheadBuffer = function() {
                      typeahead.clearBuffer(this.typeaheadState);
                    };
                    return MDCListFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCListFoundation = MDCListFoundation;
                exports2.default = MDCListFoundation;
              }
            ),
            /***/
            "./packages/mdc-list/index.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-list/index.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-list/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-list/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-list/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-list/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-list/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-list/typeahead.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-list/typeahead.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.handleKeydown = exports2.clearBuffer = exports2.isTypingInProgress = exports2.matchItem = exports2.initSortedIndex = exports2.initState = void 0;
                var keyboard_1 = __webpack_require__(
                  /*! @material/dom/keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-list/constants.ts"
                );
                var events_1 = __webpack_require__(
                  /*! ./events */
                  "./packages/mdc-list/events.ts"
                );
                function initState() {
                  var state = {
                    bufferClearTimeout: 0,
                    currentFirstChar: "",
                    sortedIndexCursor: 0,
                    typeaheadBuffer: ""
                  };
                  return state;
                }
                exports2.initState = initState;
                function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
                  var sortedIndexByFirstChar = /* @__PURE__ */ new Map();
                  for (var i = 0; i < listItemCount; i++) {
                    var primaryText = getPrimaryTextByItemIndex(i).trim();
                    if (!primaryText) {
                      continue;
                    }
                    var firstChar = primaryText[0].toLowerCase();
                    if (!sortedIndexByFirstChar.has(firstChar)) {
                      sortedIndexByFirstChar.set(firstChar, []);
                    }
                    sortedIndexByFirstChar.get(firstChar).push({ text: primaryText.toLowerCase(), index: i });
                  }
                  sortedIndexByFirstChar.forEach(function(values) {
                    values.sort(function(first, second) {
                      return first.index - second.index;
                    });
                  });
                  return sortedIndexByFirstChar;
                }
                exports2.initSortedIndex = initSortedIndex;
                function matchItem(opts, state) {
                  var nextChar = opts.nextChar, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, focusedItemIndex = opts.focusedItemIndex, skipFocus = opts.skipFocus, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
                  clearTimeout(state.bufferClearTimeout);
                  state.bufferClearTimeout = setTimeout(function() {
                    clearBuffer(state);
                  }, constants_1.numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
                  state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
                  var index;
                  if (state.typeaheadBuffer.length === 1) {
                    index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
                  } else {
                    index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
                  }
                  if (index !== -1 && !skipFocus) {
                    focusItemAtIndex(index);
                  }
                  return index;
                }
                exports2.matchItem = matchItem;
                function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
                  var firstChar = state.typeaheadBuffer[0];
                  var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
                  if (!itemsMatchingFirstChar) {
                    return -1;
                  }
                  if (firstChar === state.currentFirstChar && itemsMatchingFirstChar[state.sortedIndexCursor].index === focusedItemIndex) {
                    state.sortedIndexCursor = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
                    var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
                    if (!isItemAtIndexDisabled(newIndex)) {
                      return newIndex;
                    }
                  }
                  state.currentFirstChar = firstChar;
                  var newCursorPosition = -1;
                  var cursorPosition;
                  for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
                    if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                      newCursorPosition = cursorPosition;
                      break;
                    }
                  }
                  for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
                    if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex && !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
                      newCursorPosition = cursorPosition;
                      break;
                    }
                  }
                  if (newCursorPosition !== -1) {
                    state.sortedIndexCursor = newCursorPosition;
                    return itemsMatchingFirstChar[state.sortedIndexCursor].index;
                  }
                  return -1;
                }
                function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
                  var firstChar = state.typeaheadBuffer[0];
                  var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
                  if (!itemsMatchingFirstChar) {
                    return -1;
                  }
                  var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
                  if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 && !isItemAtIndexDisabled(startingItem.index)) {
                    return startingItem.index;
                  }
                  var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
                  var nextCursorPosition = -1;
                  while (cursorPosition !== state.sortedIndexCursor) {
                    var currentItem = itemsMatchingFirstChar[cursorPosition];
                    var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
                    var isEnabled = !isItemAtIndexDisabled(currentItem.index);
                    if (matches && isEnabled) {
                      nextCursorPosition = cursorPosition;
                      break;
                    }
                    cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
                  }
                  if (nextCursorPosition !== -1) {
                    state.sortedIndexCursor = nextCursorPosition;
                    return itemsMatchingFirstChar[state.sortedIndexCursor].index;
                  }
                  return -1;
                }
                function isTypingInProgress(state) {
                  return state.typeaheadBuffer.length > 0;
                }
                exports2.isTypingInProgress = isTypingInProgress;
                function clearBuffer(state) {
                  state.typeaheadBuffer = "";
                }
                exports2.clearBuffer = clearBuffer;
                function handleKeydown(opts, state) {
                  var event = opts.event, isTargetListItem = opts.isTargetListItem, focusedItemIndex = opts.focusedItemIndex, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
                  var isArrowLeft = keyboard_1.normalizeKey(event) === "ArrowLeft";
                  var isArrowUp = keyboard_1.normalizeKey(event) === "ArrowUp";
                  var isArrowRight = keyboard_1.normalizeKey(event) === "ArrowRight";
                  var isArrowDown = keyboard_1.normalizeKey(event) === "ArrowDown";
                  var isHome = keyboard_1.normalizeKey(event) === "Home";
                  var isEnd = keyboard_1.normalizeKey(event) === "End";
                  var isEnter = keyboard_1.normalizeKey(event) === "Enter";
                  var isSpace = keyboard_1.normalizeKey(event) === "Spacebar";
                  if (event.altKey || event.ctrlKey || event.metaKey || isArrowLeft || isArrowUp || isArrowRight || isArrowDown || isHome || isEnd || isEnter) {
                    return -1;
                  }
                  var isCharacterKey = !isSpace && event.key.length === 1;
                  if (isCharacterKey) {
                    events_1.preventDefaultEvent(event);
                    var matchItemOpts = {
                      focusItemAtIndex,
                      focusedItemIndex,
                      nextChar: event.key.toLowerCase(),
                      sortedIndexByFirstChar,
                      skipFocus: false,
                      isItemAtIndexDisabled
                    };
                    return matchItem(matchItemOpts, state);
                  }
                  if (!isSpace) {
                    return -1;
                  }
                  if (isTargetListItem) {
                    events_1.preventDefaultEvent(event);
                  }
                  var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
                  if (typeaheadOnListItem) {
                    var matchItemOpts = {
                      focusItemAtIndex,
                      focusedItemIndex,
                      nextChar: " ",
                      sortedIndexByFirstChar,
                      skipFocus: false,
                      isItemAtIndexDisabled
                    };
                    return matchItem(matchItemOpts, state);
                  }
                  return -1;
                }
                exports2.handleKeydown = handleKeydown;
              }
            ),
            /***/
            "./packages/mdc-list/types.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-list/types.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-menu-surface/adapter.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-menu-surface/adapter.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-menu-surface/component.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-menu-surface/component.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCMenuSurface = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu-surface/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-menu-surface/foundation.ts"
                );
                var util_1 = __webpack_require__(
                  /*! @material/animation/util */
                  "./packages/mdc-animation/util.ts"
                );
                var MDCMenuSurface = (
                  /** @class */
                  function(_super) {
                    __extends(MDCMenuSurface2, _super);
                    function MDCMenuSurface2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCMenuSurface2.attachTo = function(root) {
                      return new MDCMenuSurface2(root);
                    };
                    MDCMenuSurface2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      var parentEl = this.root.parentElement;
                      this.anchorElement = parentEl && parentEl.classList.contains(constants_1.cssClasses.ANCHOR) ? parentEl : null;
                      if (this.root.classList.contains(constants_1.cssClasses.FIXED)) {
                        this.setFixedPosition(true);
                      }
                      this.handleKeydown = function(event) {
                        _this.foundation.handleKeydown(event);
                      };
                      this.handleBodyClick = function(event) {
                        _this.foundation.handleBodyClick(event);
                      };
                      this.registerBodyClickListener = function() {
                        document.body.addEventListener("click", _this.handleBodyClick, { capture: true });
                      };
                      this.deregisterBodyClickListener = function() {
                        document.body.removeEventListener("click", _this.handleBodyClick, { capture: true });
                      };
                      this.listen("keydown", this.handleKeydown);
                      this.listen(constants_1.strings.OPENED_EVENT, this.registerBodyClickListener);
                      this.listen(constants_1.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
                    };
                    MDCMenuSurface2.prototype.destroy = function() {
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten(constants_1.strings.OPENED_EVENT, this.registerBodyClickListener);
                      this.unlisten(constants_1.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
                      _super.prototype.destroy.call(this);
                    };
                    MDCMenuSurface2.prototype.isOpen = function() {
                      return this.foundation.isOpen();
                    };
                    MDCMenuSurface2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCMenuSurface2.prototype.close = function(skipRestoreFocus) {
                      if (skipRestoreFocus === void 0) {
                        skipRestoreFocus = false;
                      }
                      this.foundation.close(skipRestoreFocus);
                    };
                    Object.defineProperty(MDCMenuSurface2.prototype, "quickOpen", {
                      set: function set(quickOpen) {
                        this.foundation.setQuickOpen(quickOpen);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCMenuSurface2.prototype.setIsHoisted = function(isHoisted) {
                      this.foundation.setIsHoisted(isHoisted);
                    };
                    MDCMenuSurface2.prototype.setMenuSurfaceAnchorElement = function(element) {
                      this.anchorElement = element;
                    };
                    MDCMenuSurface2.prototype.setFixedPosition = function(isFixed) {
                      if (isFixed) {
                        this.root.classList.add(constants_1.cssClasses.FIXED);
                      } else {
                        this.root.classList.remove(constants_1.cssClasses.FIXED);
                      }
                      this.foundation.setFixedPosition(isFixed);
                    };
                    MDCMenuSurface2.prototype.setAbsolutePosition = function(x, y) {
                      this.foundation.setAbsolutePosition(x, y);
                      this.setIsHoisted(true);
                    };
                    MDCMenuSurface2.prototype.setAnchorCorner = function(corner) {
                      this.foundation.setAnchorCorner(corner);
                    };
                    MDCMenuSurface2.prototype.setAnchorMargin = function(margin) {
                      this.foundation.setAnchorMargin(margin);
                    };
                    MDCMenuSurface2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        hasAnchor: function hasAnchor() {
                          return !!_this.anchorElement;
                        },
                        notifyClose: function notifyClose() {
                          return _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
                        },
                        notifyClosing: function notifyClosing() {
                          _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {});
                        },
                        notifyOpen: function notifyOpen() {
                          return _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
                        },
                        notifyOpening: function notifyOpening() {
                          return _this.emit(foundation_1.MDCMenuSurfaceFoundation.strings.OPENING_EVENT, {});
                        },
                        isElementInContainer: function isElementInContainer(el) {
                          return _this.root.contains(el);
                        },
                        isRtl: function isRtl() {
                          return getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
                        },
                        setTransformOrigin: function setTransformOrigin(origin) {
                          var propertyName = util_1.getCorrectPropertyName(window, "transform") + "-origin";
                          _this.root.style.setProperty(propertyName, origin);
                        },
                        isFocused: function isFocused() {
                          return document.activeElement === _this.root;
                        },
                        saveFocus: function saveFocus() {
                          _this.previousFocus = document.activeElement;
                        },
                        restoreFocus: function restoreFocus() {
                          if (_this.root.contains(document.activeElement)) {
                            if (_this.previousFocus && _this.previousFocus.focus) {
                              _this.previousFocus.focus();
                            }
                          }
                        },
                        getInnerDimensions: function getInnerDimensions() {
                          return {
                            width: _this.root.offsetWidth,
                            height: _this.root.offsetHeight
                          };
                        },
                        getAnchorDimensions: function getAnchorDimensions() {
                          return _this.anchorElement ? _this.anchorElement.getBoundingClientRect() : null;
                        },
                        getWindowDimensions: function getWindowDimensions() {
                          return { width: window.innerWidth, height: window.innerHeight };
                        },
                        getBodyDimensions: function getBodyDimensions() {
                          return { width: document.body.clientWidth, height: document.body.clientHeight };
                        },
                        getWindowScroll: function getWindowScroll() {
                          return { x: window.pageXOffset, y: window.pageYOffset };
                        },
                        setPosition: function setPosition(position) {
                          var rootHTML = _this.root;
                          rootHTML.style.left = "left" in position ? position.left + "px" : "";
                          rootHTML.style.right = "right" in position ? position.right + "px" : "";
                          rootHTML.style.top = "top" in position ? position.top + "px" : "";
                          rootHTML.style.bottom = "bottom" in position ? position.bottom + "px" : "";
                        },
                        setMaxHeight: function setMaxHeight(height) {
                          _this.root.style.maxHeight = height;
                        }
                      };
                      return new foundation_1.MDCMenuSurfaceFoundation(adapter);
                    };
                    return MDCMenuSurface2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCMenuSurface = MDCMenuSurface;
              }
            ),
            /***/
            "./packages/mdc-menu-surface/constants.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-menu-surface/constants.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.Corner = exports2.CornerBit = exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ANCHOR: "mdc-menu-surface--anchor",
                  ANIMATING_CLOSED: "mdc-menu-surface--animating-closed",
                  ANIMATING_OPEN: "mdc-menu-surface--animating-open",
                  FIXED: "mdc-menu-surface--fixed",
                  IS_OPEN_BELOW: "mdc-menu-surface--is-open-below",
                  OPEN: "mdc-menu-surface--open",
                  ROOT: "mdc-menu-surface"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  CLOSED_EVENT: "MDCMenuSurface:closed",
                  CLOSING_EVENT: "MDCMenuSurface:closing",
                  OPENED_EVENT: "MDCMenuSurface:opened",
                  OPENING_EVENT: "MDCMenuSurface:opening",
                  FOCUSABLE_ELEMENTS: ["button:not(:disabled)", '[href]:not([aria-disabled="true"])', "input:not(:disabled)", "select:not(:disabled)", "textarea:not(:disabled)", '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(", ")
                };
                exports2.strings = strings;
                var numbers = {
                  /** Total duration of menu-surface open animation. */
                  TRANSITION_OPEN_DURATION: 120,
                  /** Total duration of menu-surface close animation. */
                  TRANSITION_CLOSE_DURATION: 75,
                  /**
                   * Margin left to the edge of the viewport when menu-surface is at maximum
                   * possible height. Also used as a viewport margin.
                   */
                  MARGIN_TO_EDGE: 32,
                  /**
                   * Ratio of anchor width to menu-surface width for switching from corner
                   * positioning to center positioning.
                   */
                  ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
                  /**
                   * Amount of time to wait before restoring focus when closing the menu
                   * surface. This is important because if a touch event triggered the menu
                   * close, and the subsequent mouse event occurs after focus is restored, then
                   * the restored focus would be lost.
                   */
                  TOUCH_EVENT_WAIT_MS: 30
                };
                exports2.numbers = numbers;
                var CornerBit;
                (function(CornerBit2) {
                  CornerBit2[CornerBit2["BOTTOM"] = 1] = "BOTTOM";
                  CornerBit2[CornerBit2["CENTER"] = 2] = "CENTER";
                  CornerBit2[CornerBit2["RIGHT"] = 4] = "RIGHT";
                  CornerBit2[CornerBit2["FLIP_RTL"] = 8] = "FLIP_RTL";
                })(CornerBit || (CornerBit = {}));
                exports2.CornerBit = CornerBit;
                var Corner;
                (function(Corner2) {
                  Corner2[Corner2["TOP_LEFT"] = 0] = "TOP_LEFT";
                  Corner2[Corner2["TOP_RIGHT"] = 4] = "TOP_RIGHT";
                  Corner2[Corner2["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
                  Corner2[Corner2["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
                  Corner2[Corner2["TOP_START"] = 8] = "TOP_START";
                  Corner2[Corner2["TOP_END"] = 12] = "TOP_END";
                  Corner2[Corner2["BOTTOM_START"] = 9] = "BOTTOM_START";
                  Corner2[Corner2["BOTTOM_END"] = 13] = "BOTTOM_END";
                })(Corner || (Corner = {}));
                exports2.Corner = Corner;
              }
            ),
            /***/
            "./packages/mdc-menu-surface/foundation.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-menu-surface/foundation.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCMenuSurfaceFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu-surface/constants.ts"
                );
                var MDCMenuSurfaceFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCMenuSurfaceFoundation2, _super);
                    function MDCMenuSurfaceFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation2.defaultAdapter), adapter)) || this;
                      _this.isSurfaceOpen = false;
                      _this.isQuickOpen = false;
                      _this.isHoistedElement = false;
                      _this.isFixedPosition = false;
                      _this.isHorizontallyCenteredOnViewport = false;
                      _this.maxHeight = 0;
                      _this.openBottomBias = 0;
                      _this.openAnimationEndTimerId = 0;
                      _this.closeAnimationEndTimerId = 0;
                      _this.animationRequestId = 0;
                      _this.anchorCorner = constants_1.Corner.TOP_START;
                      _this.originCorner = constants_1.Corner.TOP_START;
                      _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
                      _this.position = { x: 0, y: 0 };
                      return _this;
                    }
                    Object.defineProperty(MDCMenuSurfaceFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuSurfaceFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuSurfaceFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuSurfaceFoundation2, "Corner", {
                      get: function get() {
                        return constants_1.Corner;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuSurfaceFoundation2, "defaultAdapter", {
                      /**
                       * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          hasAnchor: function hasAnchor() {
                            return false;
                          },
                          isElementInContainer: function isElementInContainer() {
                            return false;
                          },
                          isFocused: function isFocused() {
                            return false;
                          },
                          isRtl: function isRtl() {
                            return false;
                          },
                          getInnerDimensions: function getInnerDimensions() {
                            return { height: 0, width: 0 };
                          },
                          getAnchorDimensions: function getAnchorDimensions() {
                            return null;
                          },
                          getWindowDimensions: function getWindowDimensions() {
                            return { height: 0, width: 0 };
                          },
                          getBodyDimensions: function getBodyDimensions() {
                            return { height: 0, width: 0 };
                          },
                          getWindowScroll: function getWindowScroll() {
                            return { x: 0, y: 0 };
                          },
                          setPosition: function setPosition() {
                            return void 0;
                          },
                          setMaxHeight: function setMaxHeight() {
                            return void 0;
                          },
                          setTransformOrigin: function setTransformOrigin() {
                            return void 0;
                          },
                          saveFocus: function saveFocus() {
                            return void 0;
                          },
                          restoreFocus: function restoreFocus() {
                            return void 0;
                          },
                          notifyClose: function notifyClose() {
                            return void 0;
                          },
                          notifyClosing: function notifyClosing() {
                            return void 0;
                          },
                          notifyOpen: function notifyOpen() {
                            return void 0;
                          },
                          notifyOpening: function notifyOpening() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCMenuSurfaceFoundation2.prototype.init = function() {
                      var _a = MDCMenuSurfaceFoundation2.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
                      if (!this.adapter.hasClass(ROOT)) {
                        throw new Error(ROOT + " class required in root element.");
                      }
                      if (this.adapter.hasClass(OPEN)) {
                        this.isSurfaceOpen = true;
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.destroy = function() {
                      clearTimeout(this.openAnimationEndTimerId);
                      clearTimeout(this.closeAnimationEndTimerId);
                      cancelAnimationFrame(this.animationRequestId);
                    };
                    MDCMenuSurfaceFoundation2.prototype.setAnchorCorner = function(corner) {
                      this.anchorCorner = corner;
                    };
                    MDCMenuSurfaceFoundation2.prototype.flipCornerHorizontally = function() {
                      this.originCorner = this.originCorner ^ constants_1.CornerBit.RIGHT;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setAnchorMargin = function(margin) {
                      this.anchorMargin.top = margin.top || 0;
                      this.anchorMargin.right = margin.right || 0;
                      this.anchorMargin.bottom = margin.bottom || 0;
                      this.anchorMargin.left = margin.left || 0;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setIsHoisted = function(isHoisted) {
                      this.isHoistedElement = isHoisted;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setFixedPosition = function(isFixedPosition) {
                      this.isFixedPosition = isFixedPosition;
                    };
                    MDCMenuSurfaceFoundation2.prototype.isFixed = function() {
                      return this.isFixedPosition;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setAbsolutePosition = function(x, y) {
                      this.position.x = this.isFinite(x) ? x : 0;
                      this.position.y = this.isFinite(y) ? y : 0;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setIsHorizontallyCenteredOnViewport = function(isCentered) {
                      this.isHorizontallyCenteredOnViewport = isCentered;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setQuickOpen = function(quickOpen) {
                      this.isQuickOpen = quickOpen;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setMaxHeight = function(maxHeight) {
                      this.maxHeight = maxHeight;
                    };
                    MDCMenuSurfaceFoundation2.prototype.setOpenBottomBias = function(bias) {
                      this.openBottomBias = bias;
                    };
                    MDCMenuSurfaceFoundation2.prototype.isOpen = function() {
                      return this.isSurfaceOpen;
                    };
                    MDCMenuSurfaceFoundation2.prototype.open = function() {
                      var _this = this;
                      if (this.isSurfaceOpen) {
                        return;
                      }
                      this.adapter.notifyOpening();
                      this.adapter.saveFocus();
                      if (this.isQuickOpen) {
                        this.isSurfaceOpen = true;
                        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
                        this.dimensions = this.adapter.getInnerDimensions();
                        this.autoposition();
                        this.adapter.notifyOpen();
                      } else {
                        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_OPEN);
                        this.animationRequestId = requestAnimationFrame(function() {
                          _this.dimensions = _this.adapter.getInnerDimensions();
                          _this.autoposition();
                          _this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
                          _this.openAnimationEndTimerId = setTimeout(function() {
                            _this.openAnimationEndTimerId = 0;
                            _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_OPEN);
                            _this.adapter.notifyOpen();
                          }, constants_1.numbers.TRANSITION_OPEN_DURATION);
                        });
                        this.isSurfaceOpen = true;
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.close = function(skipRestoreFocus) {
                      var _this = this;
                      if (skipRestoreFocus === void 0) {
                        skipRestoreFocus = false;
                      }
                      if (!this.isSurfaceOpen) {
                        return;
                      }
                      this.adapter.notifyClosing();
                      if (this.isQuickOpen) {
                        this.isSurfaceOpen = false;
                        if (!skipRestoreFocus) {
                          this.maybeRestoreFocus();
                        }
                        this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
                        this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
                        this.adapter.notifyClose();
                        return;
                      }
                      this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_CLOSED);
                      requestAnimationFrame(function() {
                        _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
                        _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
                        _this.closeAnimationEndTimerId = setTimeout(function() {
                          _this.closeAnimationEndTimerId = 0;
                          _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_CLOSED);
                          _this.adapter.notifyClose();
                        }, constants_1.numbers.TRANSITION_CLOSE_DURATION);
                      });
                      this.isSurfaceOpen = false;
                      if (!skipRestoreFocus) {
                        this.maybeRestoreFocus();
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.handleBodyClick = function(evt) {
                      var el = evt.target;
                      if (this.adapter.isElementInContainer(el)) {
                        return;
                      }
                      this.close();
                    };
                    MDCMenuSurfaceFoundation2.prototype.handleKeydown = function(evt) {
                      var keyCode = evt.keyCode, key = evt.key;
                      var isEscape = key === "Escape" || keyCode === 27;
                      if (isEscape) {
                        this.close();
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.autoposition = function() {
                      var _a;
                      this.measurements = this.getAutoLayoutmeasurements();
                      var corner = this.getoriginCorner();
                      var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
                      var verticalAlignment = this.hasBit(corner, constants_1.CornerBit.BOTTOM) ? "bottom" : "top";
                      var horizontalAlignment = this.hasBit(corner, constants_1.CornerBit.RIGHT) ? "right" : "left";
                      var horizontalOffset = this.getHorizontalOriginOffset(corner);
                      var verticalOffset = this.getVerticalOriginOffset(corner);
                      var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
                      var position = (_a = {}, _a[horizontalAlignment] = horizontalOffset, _a[verticalAlignment] = verticalOffset, _a);
                      if (anchorSize.width / surfaceSize.width > constants_1.numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
                        horizontalAlignment = "center";
                      }
                      if (this.isHoistedElement || this.isFixedPosition) {
                        this.adjustPositionForHoistedElement(position);
                      }
                      this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
                      this.adapter.setPosition(position);
                      this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + "px" : "");
                      if (!this.hasBit(corner, constants_1.CornerBit.BOTTOM)) {
                        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.getAutoLayoutmeasurements = function() {
                      var anchorRect = this.adapter.getAnchorDimensions();
                      var bodySize = this.adapter.getBodyDimensions();
                      var viewportSize = this.adapter.getWindowDimensions();
                      var windowScroll = this.adapter.getWindowScroll();
                      if (!anchorRect) {
                        anchorRect = {
                          top: this.position.y,
                          right: this.position.x,
                          bottom: this.position.y,
                          left: this.position.x,
                          width: 0,
                          height: 0
                        };
                      }
                      return {
                        anchorSize: anchorRect,
                        bodySize,
                        surfaceSize: this.dimensions,
                        viewportDistance: {
                          // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                          top: anchorRect.top,
                          right: viewportSize.width - anchorRect.right,
                          bottom: viewportSize.height - anchorRect.bottom,
                          left: anchorRect.left
                        },
                        viewportSize,
                        windowScroll
                      };
                    };
                    MDCMenuSurfaceFoundation2.prototype.getoriginCorner = function() {
                      var corner = this.originCorner;
                      var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
                      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation2.numbers.MARGIN_TO_EDGE;
                      var isAnchoredToBottom = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
                      var availableTop;
                      var availableBottom;
                      if (isAnchoredToBottom) {
                        availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
                        availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
                      } else {
                        availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
                        availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE + anchorSize.height - this.anchorMargin.top;
                      }
                      var isAvailableBottom = availableBottom - surfaceSize.height > 0;
                      if (!isAvailableBottom && availableTop > availableBottom + this.openBottomBias) {
                        corner = this.setBit(corner, constants_1.CornerBit.BOTTOM);
                      }
                      var isRtl = this.adapter.isRtl();
                      var isFlipRtl = this.hasBit(this.anchorCorner, constants_1.CornerBit.FLIP_RTL);
                      var hasRightBit = this.hasBit(this.anchorCorner, constants_1.CornerBit.RIGHT) || this.hasBit(corner, constants_1.CornerBit.RIGHT);
                      var isAnchoredToRight = false;
                      if (isRtl && isFlipRtl) {
                        isAnchoredToRight = !hasRightBit;
                      } else {
                        isAnchoredToRight = hasRightBit;
                      }
                      var availableLeft;
                      var availableRight;
                      if (isAnchoredToRight) {
                        availableLeft = viewportDistance.left + anchorSize.width + this.anchorMargin.right;
                        availableRight = viewportDistance.right - this.anchorMargin.right;
                      } else {
                        availableLeft = viewportDistance.left + this.anchorMargin.left;
                        availableRight = viewportDistance.right + anchorSize.width - this.anchorMargin.left;
                      }
                      var isAvailableLeft = availableLeft - surfaceSize.width > 0;
                      var isAvailableRight = availableRight - surfaceSize.width > 0;
                      var isOriginCornerAlignedToEnd = this.hasBit(corner, constants_1.CornerBit.FLIP_RTL) && this.hasBit(corner, constants_1.CornerBit.RIGHT);
                      if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl || !isAvailableLeft && isOriginCornerAlignedToEnd) {
                        corner = this.unsetBit(corner, constants_1.CornerBit.RIGHT);
                      } else if (isAvailableLeft && isAnchoredToRight && isRtl || isAvailableLeft && !isAnchoredToRight && hasRightBit || !isAvailableRight && availableLeft >= availableRight) {
                        corner = this.setBit(corner, constants_1.CornerBit.RIGHT);
                      }
                      return corner;
                    };
                    MDCMenuSurfaceFoundation2.prototype.getMenuSurfaceMaxHeight = function(corner) {
                      if (this.maxHeight > 0) {
                        return this.maxHeight;
                      }
                      var viewportDistance = this.measurements.viewportDistance;
                      var maxHeight = 0;
                      var isBottomAligned = this.hasBit(corner, constants_1.CornerBit.BOTTOM);
                      var isBottomAnchored = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
                      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation2.numbers.MARGIN_TO_EDGE;
                      if (isBottomAligned) {
                        maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
                        if (!isBottomAnchored) {
                          maxHeight += this.measurements.anchorSize.height;
                        }
                      } else {
                        maxHeight = viewportDistance.bottom - this.anchorMargin.bottom + this.measurements.anchorSize.height - MARGIN_TO_EDGE;
                        if (isBottomAnchored) {
                          maxHeight -= this.measurements.anchorSize.height;
                        }
                      }
                      return maxHeight;
                    };
                    MDCMenuSurfaceFoundation2.prototype.getHorizontalOriginOffset = function(corner) {
                      var anchorSize = this.measurements.anchorSize;
                      var isRightAligned = this.hasBit(corner, constants_1.CornerBit.RIGHT);
                      var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, constants_1.CornerBit.RIGHT);
                      if (isRightAligned) {
                        var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.left : this.anchorMargin.right;
                        if (this.isHoistedElement || this.isFixedPosition) {
                          return rightOffset - (this.measurements.viewportSize.width - this.measurements.bodySize.width);
                        }
                        return rightOffset;
                      }
                      return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right : this.anchorMargin.left;
                    };
                    MDCMenuSurfaceFoundation2.prototype.getVerticalOriginOffset = function(corner) {
                      var anchorSize = this.measurements.anchorSize;
                      var isBottomAligned = this.hasBit(corner, constants_1.CornerBit.BOTTOM);
                      var avoidVerticalOverlap = this.hasBit(this.anchorCorner, constants_1.CornerBit.BOTTOM);
                      var y = 0;
                      if (isBottomAligned) {
                        y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top : -this.anchorMargin.bottom;
                      } else {
                        y = avoidVerticalOverlap ? anchorSize.height + this.anchorMargin.bottom : this.anchorMargin.top;
                      }
                      return y;
                    };
                    MDCMenuSurfaceFoundation2.prototype.adjustPositionForHoistedElement = function(position) {
                      var e_1, _a;
                      var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
                      var props = Object.keys(position);
                      try {
                        for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                          var prop = props_1_1.value;
                          var value = position[prop] || 0;
                          if (this.isHorizontallyCenteredOnViewport && (prop === "left" || prop === "right")) {
                            position[prop] = (viewportSize.width - surfaceSize.width) / 2;
                            continue;
                          }
                          value += viewportDistance[prop];
                          if (!this.isFixedPosition) {
                            if (prop === "top") {
                              value += windowScroll.y;
                            } else if (prop === "bottom") {
                              value -= windowScroll.y;
                            } else if (prop === "left") {
                              value += windowScroll.x;
                            } else {
                              value -= windowScroll.x;
                            }
                          }
                          position[prop] = value;
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                            _a.call(props_1);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.maybeRestoreFocus = function() {
                      var _this = this;
                      var isRootFocused = this.adapter.isFocused();
                      var ownerDocument = this.adapter.getOwnerDocument ? this.adapter.getOwnerDocument() : document;
                      var childHasFocus = ownerDocument.activeElement && this.adapter.isElementInContainer(ownerDocument.activeElement);
                      if (isRootFocused || childHasFocus) {
                        setTimeout(function() {
                          _this.adapter.restoreFocus();
                        }, constants_1.numbers.TOUCH_EVENT_WAIT_MS);
                      }
                    };
                    MDCMenuSurfaceFoundation2.prototype.hasBit = function(corner, bit) {
                      return Boolean(corner & bit);
                    };
                    MDCMenuSurfaceFoundation2.prototype.setBit = function(corner, bit) {
                      return corner | bit;
                    };
                    MDCMenuSurfaceFoundation2.prototype.unsetBit = function(corner, bit) {
                      return corner ^ bit;
                    };
                    MDCMenuSurfaceFoundation2.prototype.isFinite = function(num) {
                      return typeof num === "number" && isFinite(num);
                    };
                    return MDCMenuSurfaceFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCMenuSurfaceFoundation = MDCMenuSurfaceFoundation;
                exports2.default = MDCMenuSurfaceFoundation;
              }
            ),
            /***/
            "./packages/mdc-menu-surface/index.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-menu-surface/index.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-menu-surface/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-menu-surface/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu-surface/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-menu-surface/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-menu-surface/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-menu-surface/types.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-menu-surface/types.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-menu/adapter.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-menu/adapter.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-menu/component.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-menu/component.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCMenu = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/list/component */
                  "./packages/mdc-list/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! @material/list/constants */
                  "./packages/mdc-list/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/list/foundation */
                  "./packages/mdc-list/foundation.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/menu-surface/component */
                  "./packages/mdc-menu-surface/component.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! @material/menu-surface/foundation */
                  "./packages/mdc-menu-surface/foundation.ts"
                );
                var constants_2 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu/constants.ts"
                );
                var foundation_3 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-menu/foundation.ts"
                );
                var MDCMenu = (
                  /** @class */
                  function(_super) {
                    __extends(MDCMenu2, _super);
                    function MDCMenu2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCMenu2.attachTo = function(root) {
                      return new MDCMenu2(root);
                    };
                    MDCMenu2.prototype.initialize = function(menuSurfaceFactory, listFactory) {
                      if (menuSurfaceFactory === void 0) {
                        menuSurfaceFactory = function menuSurfaceFactory2(el) {
                          return new component_3.MDCMenuSurface(el);
                        };
                      }
                      if (listFactory === void 0) {
                        listFactory = function listFactory2(el) {
                          return new component_2.MDCList(el);
                        };
                      }
                      this.menuSurfaceFactory = menuSurfaceFactory;
                      this.listFactory = listFactory;
                    };
                    MDCMenu2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.menuSurface = this.menuSurfaceFactory(this.root);
                      var list = this.root.querySelector(constants_2.strings.LIST_SELECTOR);
                      if (list) {
                        this.list = this.listFactory(list);
                        this.list.wrapFocus = true;
                      } else {
                        this.list = null;
                      }
                      this.handleKeydown = function(evt) {
                        _this.foundation.handleKeydown(evt);
                      };
                      this.handleItemAction = function(evt) {
                        _this.foundation.handleItemAction(_this.items[evt.detail.index]);
                      };
                      this.handleMenuSurfaceOpened = function() {
                        _this.foundation.handleMenuSurfaceOpened();
                      };
                      this.menuSurface.listen(foundation_2.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
                      this.listen("keydown", this.handleKeydown);
                      this.listen(foundation_1.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
                    };
                    MDCMenu2.prototype.destroy = function() {
                      if (this.list) {
                        this.list.destroy();
                      }
                      this.menuSurface.destroy();
                      this.menuSurface.unlisten(foundation_2.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
                      this.unlisten("keydown", this.handleKeydown);
                      this.unlisten(foundation_1.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
                      _super.prototype.destroy.call(this);
                    };
                    Object.defineProperty(MDCMenu2.prototype, "open", {
                      get: function get() {
                        return this.menuSurface.isOpen();
                      },
                      set: function set(value) {
                        if (value) {
                          this.menuSurface.open();
                        } else {
                          this.menuSurface.close();
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "wrapFocus", {
                      get: function get() {
                        return this.list ? this.list.wrapFocus : false;
                      },
                      set: function set(value) {
                        if (this.list) {
                          this.list.wrapFocus = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "hasTypeahead", {
                      /**
                       * Sets whether the menu has typeahead functionality.
                       * @param value Whether typeahead is enabled.
                       */
                      set: function set(value) {
                        if (this.list) {
                          this.list.hasTypeahead = value;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "typeaheadInProgress", {
                      /**
                       * @return Whether typeahead logic is currently matching some user prefix.
                       */
                      get: function get() {
                        return this.list ? this.list.typeaheadInProgress : false;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCMenu2.prototype.typeaheadMatchItem = function(nextChar, startingIndex) {
                      if (this.list) {
                        return this.list.typeaheadMatchItem(nextChar, startingIndex);
                      }
                      return -1;
                    };
                    MDCMenu2.prototype.layout = function() {
                      if (this.list) {
                        this.list.layout();
                      }
                    };
                    Object.defineProperty(MDCMenu2.prototype, "items", {
                      /**
                       * Return the items within the menu. Note that this only contains the set of elements within
                       * the items container that are proper list items, and not supplemental / presentational DOM
                       * elements.
                       */
                      get: function get() {
                        return this.list ? this.list.listElements : [];
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "singleSelection", {
                      /**
                       * Turns on/off the underlying list's single selection mode. Used mainly
                       * by select menu.
                       *
                       * @param singleSelection Whether to enable single selection mode.
                       */
                      set: function set(singleSelection) {
                        if (this.list) {
                          this.list.singleSelection = singleSelection;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "selectedIndex", {
                      /**
                       * Retrieves the selected index. Only applicable to select menus.
                       * @return The selected index, which is a number for single selection and
                       *     radio lists, and an array of numbers for checkbox lists.
                       */
                      get: function get() {
                        return this.list ? this.list.selectedIndex : constants_1.numbers.UNSET_INDEX;
                      },
                      /**
                       * Sets the selected index of the list. Only applicable to select menus.
                       * @param index The selected index, which is a number for single selection and
                       *     radio lists, and an array of numbers for checkbox lists.
                       */
                      set: function set(index) {
                        if (this.list) {
                          this.list.selectedIndex = index;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenu2.prototype, "quickOpen", {
                      set: function set(quickOpen) {
                        this.menuSurface.quickOpen = quickOpen;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCMenu2.prototype.setDefaultFocusState = function(focusState) {
                      this.foundation.setDefaultFocusState(focusState);
                    };
                    MDCMenu2.prototype.setAnchorCorner = function(corner) {
                      this.menuSurface.setAnchorCorner(corner);
                    };
                    MDCMenu2.prototype.setAnchorMargin = function(margin) {
                      this.menuSurface.setAnchorMargin(margin);
                    };
                    MDCMenu2.prototype.setSelectedIndex = function(index) {
                      this.foundation.setSelectedIndex(index);
                    };
                    MDCMenu2.prototype.setEnabled = function(index, isEnabled) {
                      this.foundation.setEnabled(index, isEnabled);
                    };
                    MDCMenu2.prototype.getOptionByIndex = function(index) {
                      var items = this.items;
                      if (index < items.length) {
                        return this.items[index];
                      } else {
                        return null;
                      }
                    };
                    MDCMenu2.prototype.getPrimaryTextAtIndex = function(index) {
                      var item = this.getOptionByIndex(index);
                      if (item && this.list) {
                        return this.list.getPrimaryText(item) || "";
                      }
                      return "";
                    };
                    MDCMenu2.prototype.setFixedPosition = function(isFixed) {
                      this.menuSurface.setFixedPosition(isFixed);
                    };
                    MDCMenu2.prototype.setIsHoisted = function(isHoisted) {
                      this.menuSurface.setIsHoisted(isHoisted);
                    };
                    MDCMenu2.prototype.setAbsolutePosition = function(x, y) {
                      this.menuSurface.setAbsolutePosition(x, y);
                    };
                    MDCMenu2.prototype.setAnchorElement = function(element) {
                      this.menuSurface.anchorElement = element;
                    };
                    MDCMenu2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClassToElementAtIndex: function addClassToElementAtIndex(index, className) {
                          var list = _this.items;
                          list[index].classList.add(className);
                        },
                        removeClassFromElementAtIndex: function removeClassFromElementAtIndex(index, className) {
                          var list = _this.items;
                          list[index].classList.remove(className);
                        },
                        addAttributeToElementAtIndex: function addAttributeToElementAtIndex(index, attr, value) {
                          var list = _this.items;
                          list[index].setAttribute(attr, value);
                        },
                        removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex(index, attr) {
                          var list = _this.items;
                          list[index].removeAttribute(attr);
                        },
                        getAttributeFromElementAtIndex: function getAttributeFromElementAtIndex(index, attr) {
                          var list = _this.items;
                          return list[index].getAttribute(attr);
                        },
                        elementContainsClass: function elementContainsClass(element, className) {
                          return element.classList.contains(className);
                        },
                        closeSurface: function closeSurface(skipRestoreFocus) {
                          _this.menuSurface.close(skipRestoreFocus);
                        },
                        getElementIndex: function getElementIndex(element) {
                          return _this.items.indexOf(element);
                        },
                        notifySelected: function notifySelected(evtData) {
                          _this.emit(constants_2.strings.SELECTED_EVENT, {
                            index: evtData.index,
                            item: _this.items[evtData.index]
                          });
                        },
                        getMenuItemCount: function getMenuItemCount() {
                          return _this.items.length;
                        },
                        focusItemAtIndex: function focusItemAtIndex(index) {
                          _this.items[index].focus();
                        },
                        focusListRoot: function focusListRoot() {
                          _this.root.querySelector(constants_2.strings.LIST_SELECTOR).focus();
                        },
                        isSelectableItemAtIndex: function isSelectableItemAtIndex(index) {
                          return !!ponyfill_1.closest(_this.items[index], "." + constants_2.cssClasses.MENU_SELECTION_GROUP);
                        },
                        getSelectedSiblingOfItemAtIndex: function getSelectedSiblingOfItemAtIndex(index) {
                          var selectionGroupEl = ponyfill_1.closest(_this.items[index], "." + constants_2.cssClasses.MENU_SELECTION_GROUP);
                          var selectedItemEl = selectionGroupEl.querySelector("." + constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
                          return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
                        }
                      };
                      return new foundation_3.MDCMenuFoundation(adapter);
                    };
                    return MDCMenu2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCMenu = MDCMenu;
              }
            ),
            /***/
            "./packages/mdc-menu/constants.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-menu/constants.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.DefaultFocusState = exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  MENU_SELECTED_LIST_ITEM: "mdc-menu-item--selected",
                  MENU_SELECTION_GROUP: "mdc-menu__selection-group",
                  ROOT: "mdc-menu"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ARIA_CHECKED_ATTR: "aria-checked",
                  ARIA_DISABLED_ATTR: "aria-disabled",
                  CHECKBOX_SELECTOR: 'input[type="checkbox"]',
                  LIST_SELECTOR: ".mdc-list,.mdc-deprecated-list",
                  SELECTED_EVENT: "MDCMenu:selected",
                  SKIP_RESTORE_FOCUS: "data-menu-item-skip-restore-focus"
                };
                exports2.strings = strings;
                var numbers = {
                  FOCUS_ROOT_INDEX: -1
                };
                exports2.numbers = numbers;
                var DefaultFocusState;
                (function(DefaultFocusState2) {
                  DefaultFocusState2[DefaultFocusState2["NONE"] = 0] = "NONE";
                  DefaultFocusState2[DefaultFocusState2["LIST_ROOT"] = 1] = "LIST_ROOT";
                  DefaultFocusState2[DefaultFocusState2["FIRST_ITEM"] = 2] = "FIRST_ITEM";
                  DefaultFocusState2[DefaultFocusState2["LAST_ITEM"] = 3] = "LAST_ITEM";
                })(DefaultFocusState || (DefaultFocusState = {}));
                exports2.DefaultFocusState = DefaultFocusState;
              }
            ),
            /***/
            "./packages/mdc-menu/foundation.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-menu/foundation.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCMenuFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! @material/list/constants */
                  "./packages/mdc-list/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! @material/menu-surface/foundation */
                  "./packages/mdc-menu-surface/foundation.ts"
                );
                var constants_2 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu/constants.ts"
                );
                var MDCMenuFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCMenuFoundation2, _super);
                    function MDCMenuFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation2.defaultAdapter), adapter)) || this;
                      _this.closeAnimationEndTimerId = 0;
                      _this.defaultFocusState = constants_2.DefaultFocusState.LIST_ROOT;
                      _this.selectedIndex = -1;
                      return _this;
                    }
                    Object.defineProperty(MDCMenuFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_2.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuFoundation2, "strings", {
                      get: function get() {
                        return constants_2.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuFoundation2, "numbers", {
                      get: function get() {
                        return constants_2.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCMenuFoundation2, "defaultAdapter", {
                      /**
                       * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClassToElementAtIndex: function addClassToElementAtIndex() {
                            return void 0;
                          },
                          removeClassFromElementAtIndex: function removeClassFromElementAtIndex() {
                            return void 0;
                          },
                          addAttributeToElementAtIndex: function addAttributeToElementAtIndex() {
                            return void 0;
                          },
                          removeAttributeFromElementAtIndex: function removeAttributeFromElementAtIndex() {
                            return void 0;
                          },
                          getAttributeFromElementAtIndex: function getAttributeFromElementAtIndex() {
                            return null;
                          },
                          elementContainsClass: function elementContainsClass() {
                            return false;
                          },
                          closeSurface: function closeSurface() {
                            return void 0;
                          },
                          getElementIndex: function getElementIndex() {
                            return -1;
                          },
                          notifySelected: function notifySelected() {
                            return void 0;
                          },
                          getMenuItemCount: function getMenuItemCount() {
                            return 0;
                          },
                          focusItemAtIndex: function focusItemAtIndex() {
                            return void 0;
                          },
                          focusListRoot: function focusListRoot() {
                            return void 0;
                          },
                          getSelectedSiblingOfItemAtIndex: function getSelectedSiblingOfItemAtIndex() {
                            return -1;
                          },
                          isSelectableItemAtIndex: function isSelectableItemAtIndex() {
                            return false;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCMenuFoundation2.prototype.destroy = function() {
                      if (this.closeAnimationEndTimerId) {
                        clearTimeout(this.closeAnimationEndTimerId);
                      }
                      this.adapter.closeSurface();
                    };
                    MDCMenuFoundation2.prototype.handleKeydown = function(evt) {
                      var key = evt.key, keyCode = evt.keyCode;
                      var isTab = key === "Tab" || keyCode === 9;
                      if (isTab) {
                        this.adapter.closeSurface(
                          /** skipRestoreFocus */
                          true
                        );
                      }
                    };
                    MDCMenuFoundation2.prototype.handleItemAction = function(listItem) {
                      var _this = this;
                      var index = this.adapter.getElementIndex(listItem);
                      if (index < 0) {
                        return;
                      }
                      this.adapter.notifySelected({ index });
                      var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, constants_2.strings.SKIP_RESTORE_FOCUS) === "true";
                      this.adapter.closeSurface(skipRestoreFocus);
                      this.closeAnimationEndTimerId = setTimeout(function() {
                        var recomputedIndex = _this.adapter.getElementIndex(listItem);
                        if (recomputedIndex >= 0 && _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
                          _this.setSelectedIndex(recomputedIndex);
                        }
                      }, foundation_2.MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
                    };
                    MDCMenuFoundation2.prototype.handleMenuSurfaceOpened = function() {
                      switch (this.defaultFocusState) {
                        case constants_2.DefaultFocusState.FIRST_ITEM:
                          this.adapter.focusItemAtIndex(0);
                          break;
                        case constants_2.DefaultFocusState.LAST_ITEM:
                          this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
                          break;
                        case constants_2.DefaultFocusState.NONE:
                          break;
                        default:
                          this.adapter.focusListRoot();
                          break;
                      }
                    };
                    MDCMenuFoundation2.prototype.setDefaultFocusState = function(focusState) {
                      this.defaultFocusState = focusState;
                    };
                    MDCMenuFoundation2.prototype.getSelectedIndex = function() {
                      return this.selectedIndex;
                    };
                    MDCMenuFoundation2.prototype.setSelectedIndex = function(index) {
                      this.validatedIndex(index);
                      if (!this.adapter.isSelectableItemAtIndex(index)) {
                        throw new Error("MDCMenuFoundation: No selection group at specified index.");
                      }
                      var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
                      if (prevSelectedIndex >= 0) {
                        this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, constants_2.strings.ARIA_CHECKED_ATTR);
                        this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
                      }
                      this.adapter.addClassToElementAtIndex(index, constants_2.cssClasses.MENU_SELECTED_LIST_ITEM);
                      this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_CHECKED_ATTR, "true");
                      this.selectedIndex = index;
                    };
                    MDCMenuFoundation2.prototype.setEnabled = function(index, isEnabled) {
                      this.validatedIndex(index);
                      if (isEnabled) {
                        this.adapter.removeClassFromElementAtIndex(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                        this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_DISABLED_ATTR, "false");
                      } else {
                        this.adapter.addClassToElementAtIndex(index, constants_1.cssClasses.LIST_ITEM_DISABLED_CLASS);
                        this.adapter.addAttributeToElementAtIndex(index, constants_2.strings.ARIA_DISABLED_ATTR, "true");
                      }
                    };
                    MDCMenuFoundation2.prototype.validatedIndex = function(index) {
                      var menuSize = this.adapter.getMenuItemCount();
                      var isIndexInRange = index >= 0 && index < menuSize;
                      if (!isIndexInRange) {
                        throw new Error("MDCMenuFoundation: No list item at specified index.");
                      }
                    };
                    return MDCMenuFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCMenuFoundation = MDCMenuFoundation;
                exports2.default = MDCMenuFoundation;
              }
            ),
            /***/
            "./packages/mdc-menu/index.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-menu/index.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.Corner = void 0;
                var constants_1 = __webpack_require__(
                  /*! @material/menu-surface/constants */
                  "./packages/mdc-menu-surface/constants.ts"
                );
                Object.defineProperty(exports2, "Corner", { enumerable: true, get: function get() {
                  return constants_1.Corner;
                } });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-menu/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-menu/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-menu/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-menu/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-menu/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-menu/types.ts": (
              /*!************************************!*\
                !*** ./packages/mdc-menu/types.ts ***!
                \************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-notched-outline/adapter.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-notched-outline/adapter.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-notched-outline/component.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-notched-outline/component.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCNotchedOutline = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/floating-label/foundation */
                  "./packages/mdc-floating-label/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-notched-outline/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-notched-outline/foundation.ts"
                );
                var MDCNotchedOutline = (
                  /** @class */
                  function(_super) {
                    __extends(MDCNotchedOutline2, _super);
                    function MDCNotchedOutline2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCNotchedOutline2.attachTo = function(root) {
                      return new MDCNotchedOutline2(root);
                    };
                    MDCNotchedOutline2.prototype.initialSyncWithDOM = function() {
                      this.notchElement = this.root.querySelector(constants_1.strings.NOTCH_ELEMENT_SELECTOR);
                      var label = this.root.querySelector("." + foundation_1.MDCFloatingLabelFoundation.cssClasses.ROOT);
                      if (label) {
                        label.style.transitionDuration = "0s";
                        this.root.classList.add(constants_1.cssClasses.OUTLINE_UPGRADED);
                        requestAnimationFrame(function() {
                          label.style.transitionDuration = "";
                        });
                      } else {
                        this.root.classList.add(constants_1.cssClasses.NO_LABEL);
                      }
                    };
                    MDCNotchedOutline2.prototype.notch = function(notchWidth) {
                      this.foundation.notch(notchWidth);
                    };
                    MDCNotchedOutline2.prototype.closeNotch = function() {
                      this.foundation.closeNotch();
                    };
                    MDCNotchedOutline2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        setNotchWidthProperty: function setNotchWidthProperty(width) {
                          _this.notchElement.style.setProperty("width", width + "px");
                        },
                        removeNotchWidthProperty: function removeNotchWidthProperty() {
                          _this.notchElement.style.removeProperty("width");
                        }
                      };
                      return new foundation_2.MDCNotchedOutlineFoundation(adapter);
                    };
                    return MDCNotchedOutline2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCNotchedOutline = MDCNotchedOutline;
              }
            ),
            /***/
            "./packages/mdc-notched-outline/constants.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-notched-outline/constants.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.numbers = exports2.cssClasses = void 0;
                var strings = {
                  NOTCH_ELEMENT_SELECTOR: ".mdc-notched-outline__notch"
                };
                exports2.strings = strings;
                var numbers = {
                  // This should stay in sync with $mdc-notched-outline-padding * 2.
                  NOTCH_ELEMENT_PADDING: 8
                };
                exports2.numbers = numbers;
                var cssClasses = {
                  NO_LABEL: "mdc-notched-outline--no-label",
                  OUTLINE_NOTCHED: "mdc-notched-outline--notched",
                  OUTLINE_UPGRADED: "mdc-notched-outline--upgraded"
                };
                exports2.cssClasses = cssClasses;
              }
            ),
            /***/
            "./packages/mdc-notched-outline/foundation.ts": (
              /*!****************************************************!*\
                !*** ./packages/mdc-notched-outline/foundation.ts ***!
                \****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCNotchedOutlineFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-notched-outline/constants.ts"
                );
                var MDCNotchedOutlineFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCNotchedOutlineFoundation2, _super);
                    function MDCNotchedOutlineFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCNotchedOutlineFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCNotchedOutlineFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCNotchedOutlineFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCNotchedOutlineFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          setNotchWidthProperty: function setNotchWidthProperty() {
                            return void 0;
                          },
                          removeNotchWidthProperty: function removeNotchWidthProperty() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCNotchedOutlineFoundation2.prototype.notch = function(notchWidth) {
                      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
                      if (notchWidth > 0) {
                        notchWidth += constants_1.numbers.NOTCH_ELEMENT_PADDING;
                      }
                      this.adapter.setNotchWidthProperty(notchWidth);
                      this.adapter.addClass(OUTLINE_NOTCHED);
                    };
                    MDCNotchedOutlineFoundation2.prototype.closeNotch = function() {
                      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
                      this.adapter.removeClass(OUTLINE_NOTCHED);
                      this.adapter.removeNotchWidthProperty();
                    };
                    return MDCNotchedOutlineFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCNotchedOutlineFoundation = MDCNotchedOutlineFoundation;
                exports2.default = MDCNotchedOutlineFoundation;
              }
            ),
            /***/
            "./packages/mdc-notched-outline/index.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-notched-outline/index.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-notched-outline/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-notched-outline/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-notched-outline/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-notched-outline/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-radio/adapter.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-radio/adapter.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-radio/component.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-radio/component.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCRadio = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-radio/foundation.ts"
                );
                var MDCRadio = (
                  /** @class */
                  function(_super) {
                    __extends(MDCRadio2, _super);
                    function MDCRadio2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.rippleSurface = _this.createRipple();
                      return _this;
                    }
                    MDCRadio2.attachTo = function(root) {
                      return new MDCRadio2(root);
                    };
                    Object.defineProperty(MDCRadio2.prototype, "checked", {
                      get: function get() {
                        return this.nativeControl.checked;
                      },
                      set: function set(checked) {
                        this.nativeControl.checked = checked;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRadio2.prototype, "disabled", {
                      get: function get() {
                        return this.nativeControl.disabled;
                      },
                      set: function set(disabled) {
                        this.foundation.setDisabled(disabled);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRadio2.prototype, "value", {
                      get: function get() {
                        return this.nativeControl.value;
                      },
                      set: function set(value) {
                        this.nativeControl.value = value;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRadio2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleSurface;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCRadio2.prototype.destroy = function() {
                      this.rippleSurface.destroy();
                      _super.prototype.destroy.call(this);
                    };
                    MDCRadio2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                          return _this.nativeControl.disabled = disabled;
                        }
                      };
                      return new foundation_2.MDCRadioFoundation(adapter);
                    };
                    MDCRadio2.prototype.createRipple = function() {
                      var _this = this;
                      var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), {
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          _this.nativeControl.addEventListener(evtType, handler, events_1.applyPassive());
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          _this.nativeControl.removeEventListener(evtType, handler, events_1.applyPassive());
                        },
                        // Radio buttons technically go "active" whenever there is *any* keyboard
                        // interaction. This is not the UI we desire.
                        isSurfaceActive: function isSurfaceActive() {
                          return false;
                        },
                        isUnbounded: function isUnbounded() {
                          return true;
                        }
                      });
                      return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
                    };
                    Object.defineProperty(MDCRadio2.prototype, "nativeControl", {
                      get: function get() {
                        var NATIVE_CONTROL_SELECTOR = foundation_2.MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;
                        var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
                        if (!el) {
                          throw new Error("Radio component requires a " + NATIVE_CONTROL_SELECTOR + " element");
                        }
                        return el;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    return MDCRadio2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCRadio = MDCRadio;
              }
            ),
            /***/
            "./packages/mdc-radio/constants.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-radio/constants.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                var strings = {
                  NATIVE_CONTROL_SELECTOR: ".mdc-radio__native-control"
                };
                exports2.strings = strings;
                var cssClasses = {
                  DISABLED: "mdc-radio--disabled",
                  ROOT: "mdc-radio"
                };
                exports2.cssClasses = cssClasses;
              }
            ),
            /***/
            "./packages/mdc-radio/foundation.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-radio/foundation.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCRadioFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-radio/constants.ts"
                );
                var MDCRadioFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCRadioFoundation2, _super);
                    function MDCRadioFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCRadioFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCRadioFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRadioFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRadioFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          setNativeControlDisabled: function setNativeControlDisabled() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCRadioFoundation2.prototype.setDisabled = function(disabled) {
                      var DISABLED = MDCRadioFoundation2.cssClasses.DISABLED;
                      this.adapter.setNativeControlDisabled(disabled);
                      if (disabled) {
                        this.adapter.addClass(DISABLED);
                      } else {
                        this.adapter.removeClass(DISABLED);
                      }
                    };
                    return MDCRadioFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCRadioFoundation = MDCRadioFoundation;
                exports2.default = MDCRadioFoundation;
              }
            ),
            /***/
            "./packages/mdc-radio/index.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-radio/index.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-radio/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-radio/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-radio/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-radio/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-ripple/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-ripple/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-ripple/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-ripple/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCRipple = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-ripple/util.ts"
                ));
                var MDCRipple = (
                  /** @class */
                  function(_super) {
                    __extends(MDCRipple2, _super);
                    function MDCRipple2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.disabled = false;
                      return _this;
                    }
                    MDCRipple2.attachTo = function(root, opts) {
                      if (opts === void 0) {
                        opts = {
                          isUnbounded: void 0
                        };
                      }
                      var ripple = new MDCRipple2(root);
                      if (opts.isUnbounded !== void 0) {
                        ripple.unbounded = opts.isUnbounded;
                      }
                      return ripple;
                    };
                    MDCRipple2.createAdapter = function(instance) {
                      return {
                        addClass: function addClass(className) {
                          return instance.root.classList.add(className);
                        },
                        browserSupportsCssVars: function browserSupportsCssVars() {
                          return util.supportsCssVariables(window);
                        },
                        computeBoundingRect: function computeBoundingRect() {
                          return instance.root.getBoundingClientRect();
                        },
                        containsEventTarget: function containsEventTarget(target) {
                          return instance.root.contains(target);
                        },
                        deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
                          return document.documentElement.removeEventListener(evtType, handler, events_1.applyPassive());
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          return instance.root.removeEventListener(evtType, handler, events_1.applyPassive());
                        },
                        deregisterResizeHandler: function deregisterResizeHandler(handler) {
                          return window.removeEventListener("resize", handler);
                        },
                        getWindowPageOffset: function getWindowPageOffset() {
                          return { x: window.pageXOffset, y: window.pageYOffset };
                        },
                        isSurfaceActive: function isSurfaceActive() {
                          return ponyfill_1.matches(instance.root, ":active");
                        },
                        isSurfaceDisabled: function isSurfaceDisabled() {
                          return Boolean(instance.disabled);
                        },
                        isUnbounded: function isUnbounded() {
                          return Boolean(instance.unbounded);
                        },
                        registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
                          return document.documentElement.addEventListener(evtType, handler, events_1.applyPassive());
                        },
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          return instance.root.addEventListener(evtType, handler, events_1.applyPassive());
                        },
                        registerResizeHandler: function registerResizeHandler(handler) {
                          return window.addEventListener("resize", handler);
                        },
                        removeClass: function removeClass(className) {
                          return instance.root.classList.remove(className);
                        },
                        updateCssVariable: function updateCssVariable(varName, value) {
                          return instance.root.style.setProperty(varName, value);
                        }
                      };
                    };
                    Object.defineProperty(MDCRipple2.prototype, "unbounded", {
                      get: function get() {
                        return Boolean(this.isUnbounded);
                      },
                      set: function set(unbounded) {
                        this.isUnbounded = Boolean(unbounded);
                        this.setUnbounded();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCRipple2.prototype.activate = function() {
                      this.foundation.activate();
                    };
                    MDCRipple2.prototype.deactivate = function() {
                      this.foundation.deactivate();
                    };
                    MDCRipple2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCRipple2.prototype.getDefaultFoundation = function() {
                      return new foundation_1.MDCRippleFoundation(MDCRipple2.createAdapter(this));
                    };
                    MDCRipple2.prototype.initialSyncWithDOM = function() {
                      var root = this.root;
                      this.isUnbounded = "mdcRippleIsUnbounded" in root.dataset;
                    };
                    MDCRipple2.prototype.setUnbounded = function() {
                      this.foundation.setUnbounded(Boolean(this.isUnbounded));
                    };
                    return MDCRipple2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCRipple = MDCRipple;
              }
            ),
            /***/
            "./packages/mdc-ripple/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-ripple/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
                  // given that it's an 'upgrade' to an existing component. That being said it is the root
                  // CSS class that all other CSS classes derive from.
                  BG_FOCUSED: "mdc-ripple-upgraded--background-focused",
                  FG_ACTIVATION: "mdc-ripple-upgraded--foreground-activation",
                  FG_DEACTIVATION: "mdc-ripple-upgraded--foreground-deactivation",
                  ROOT: "mdc-ripple-upgraded",
                  UNBOUNDED: "mdc-ripple-upgraded--unbounded"
                };
                exports2.strings = {
                  VAR_FG_SCALE: "--mdc-ripple-fg-scale",
                  VAR_FG_SIZE: "--mdc-ripple-fg-size",
                  VAR_FG_TRANSLATE_END: "--mdc-ripple-fg-translate-end",
                  VAR_FG_TRANSLATE_START: "--mdc-ripple-fg-translate-start",
                  VAR_LEFT: "--mdc-ripple-left",
                  VAR_TOP: "--mdc-ripple-top"
                };
                exports2.numbers = {
                  DEACTIVATION_TIMEOUT_MS: 225,
                  FG_DEACTIVATION_MS: 150,
                  INITIAL_ORIGIN_SCALE: 0.6,
                  PADDING: 10,
                  TAP_DELAY_MS: 300
                };
              }
            ),
            /***/
            "./packages/mdc-ripple/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-ripple/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCRippleFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-ripple/constants.ts"
                );
                var util_1 = __webpack_require__(
                  /*! ./util */
                  "./packages/mdc-ripple/util.ts"
                );
                var ACTIVATION_EVENT_TYPES = ["touchstart", "pointerdown", "mousedown", "keydown"];
                var POINTER_DEACTIVATION_EVENT_TYPES = ["touchend", "pointerup", "mouseup", "contextmenu"];
                var activatedTargets = [];
                var MDCRippleFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCRippleFoundation2, _super);
                    function MDCRippleFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation2.defaultAdapter), adapter)) || this;
                      _this.activationAnimationHasEnded = false;
                      _this.activationTimer = 0;
                      _this.fgDeactivationRemovalTimer = 0;
                      _this.fgScale = "0";
                      _this.frame = { width: 0, height: 0 };
                      _this.initialSize = 0;
                      _this.layoutFrame = 0;
                      _this.maxRadius = 0;
                      _this.unboundedCoords = { left: 0, top: 0 };
                      _this.activationState = _this.defaultActivationState();
                      _this.activationTimerCallback = function() {
                        _this.activationAnimationHasEnded = true;
                        _this.runDeactivationUXLogicIfReady();
                      };
                      _this.activateHandler = function(e) {
                        _this.activateImpl(e);
                      };
                      _this.deactivateHandler = function() {
                        _this.deactivateImpl();
                      };
                      _this.focusHandler = function() {
                        _this.handleFocus();
                      };
                      _this.blurHandler = function() {
                        _this.handleBlur();
                      };
                      _this.resizeHandler = function() {
                        _this.layout();
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCRippleFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRippleFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRippleFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCRippleFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          browserSupportsCssVars: function browserSupportsCssVars() {
                            return true;
                          },
                          computeBoundingRect: function computeBoundingRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          containsEventTarget: function containsEventTarget() {
                            return true;
                          },
                          deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler() {
                            return void 0;
                          },
                          deregisterInteractionHandler: function deregisterInteractionHandler() {
                            return void 0;
                          },
                          deregisterResizeHandler: function deregisterResizeHandler() {
                            return void 0;
                          },
                          getWindowPageOffset: function getWindowPageOffset() {
                            return { x: 0, y: 0 };
                          },
                          isSurfaceActive: function isSurfaceActive() {
                            return true;
                          },
                          isSurfaceDisabled: function isSurfaceDisabled() {
                            return true;
                          },
                          isUnbounded: function isUnbounded() {
                            return true;
                          },
                          registerDocumentInteractionHandler: function registerDocumentInteractionHandler() {
                            return void 0;
                          },
                          registerInteractionHandler: function registerInteractionHandler() {
                            return void 0;
                          },
                          registerResizeHandler: function registerResizeHandler() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          updateCssVariable: function updateCssVariable() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCRippleFoundation2.prototype.init = function() {
                      var _this = this;
                      var supportsPressRipple = this.supportsPressRipple();
                      this.registerRootHandlers(supportsPressRipple);
                      if (supportsPressRipple) {
                        var _a = MDCRippleFoundation2.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
                        requestAnimationFrame(function() {
                          _this.adapter.addClass(ROOT_1);
                          if (_this.adapter.isUnbounded()) {
                            _this.adapter.addClass(UNBOUNDED_1);
                            _this.layoutInternal();
                          }
                        });
                      }
                    };
                    MDCRippleFoundation2.prototype.destroy = function() {
                      var _this = this;
                      if (this.supportsPressRipple()) {
                        if (this.activationTimer) {
                          clearTimeout(this.activationTimer);
                          this.activationTimer = 0;
                          this.adapter.removeClass(MDCRippleFoundation2.cssClasses.FG_ACTIVATION);
                        }
                        if (this.fgDeactivationRemovalTimer) {
                          clearTimeout(this.fgDeactivationRemovalTimer);
                          this.fgDeactivationRemovalTimer = 0;
                          this.adapter.removeClass(MDCRippleFoundation2.cssClasses.FG_DEACTIVATION);
                        }
                        var _a = MDCRippleFoundation2.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
                        requestAnimationFrame(function() {
                          _this.adapter.removeClass(ROOT_2);
                          _this.adapter.removeClass(UNBOUNDED_2);
                          _this.removeCssVars();
                        });
                      }
                      this.deregisterRootHandlers();
                      this.deregisterDeactivationHandlers();
                    };
                    MDCRippleFoundation2.prototype.activate = function(evt) {
                      this.activateImpl(evt);
                    };
                    MDCRippleFoundation2.prototype.deactivate = function() {
                      this.deactivateImpl();
                    };
                    MDCRippleFoundation2.prototype.layout = function() {
                      var _this = this;
                      if (this.layoutFrame) {
                        cancelAnimationFrame(this.layoutFrame);
                      }
                      this.layoutFrame = requestAnimationFrame(function() {
                        _this.layoutInternal();
                        _this.layoutFrame = 0;
                      });
                    };
                    MDCRippleFoundation2.prototype.setUnbounded = function(unbounded) {
                      var UNBOUNDED = MDCRippleFoundation2.cssClasses.UNBOUNDED;
                      if (unbounded) {
                        this.adapter.addClass(UNBOUNDED);
                      } else {
                        this.adapter.removeClass(UNBOUNDED);
                      }
                    };
                    MDCRippleFoundation2.prototype.handleFocus = function() {
                      var _this = this;
                      requestAnimationFrame(function() {
                        return _this.adapter.addClass(MDCRippleFoundation2.cssClasses.BG_FOCUSED);
                      });
                    };
                    MDCRippleFoundation2.prototype.handleBlur = function() {
                      var _this = this;
                      requestAnimationFrame(function() {
                        return _this.adapter.removeClass(MDCRippleFoundation2.cssClasses.BG_FOCUSED);
                      });
                    };
                    MDCRippleFoundation2.prototype.supportsPressRipple = function() {
                      return this.adapter.browserSupportsCssVars();
                    };
                    MDCRippleFoundation2.prototype.defaultActivationState = function() {
                      return {
                        activationEvent: void 0,
                        hasDeactivationUXRun: false,
                        isActivated: false,
                        isProgrammatic: false,
                        wasActivatedByPointer: false,
                        wasElementMadeActive: false
                      };
                    };
                    MDCRippleFoundation2.prototype.registerRootHandlers = function(supportsPressRipple) {
                      var e_1, _a;
                      if (supportsPressRipple) {
                        try {
                          for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
                            var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                            this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                          }
                        } catch (e_1_1) {
                          e_1 = { error: e_1_1 };
                        } finally {
                          try {
                            if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return))
                              _a.call(ACTIVATION_EVENT_TYPES_1);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                        }
                        if (this.adapter.isUnbounded()) {
                          this.adapter.registerResizeHandler(this.resizeHandler);
                        }
                      }
                      this.adapter.registerInteractionHandler("focus", this.focusHandler);
                      this.adapter.registerInteractionHandler("blur", this.blurHandler);
                    };
                    MDCRippleFoundation2.prototype.registerDeactivationHandlers = function(evt) {
                      var e_2, _a;
                      if (evt.type === "keydown") {
                        this.adapter.registerInteractionHandler("keyup", this.deactivateHandler);
                      } else {
                        try {
                          for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
                            var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                            this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
                          }
                        } catch (e_2_1) {
                          e_2 = { error: e_2_1 };
                        } finally {
                          try {
                            if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return))
                              _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
                          } finally {
                            if (e_2)
                              throw e_2.error;
                          }
                        }
                      }
                    };
                    MDCRippleFoundation2.prototype.deregisterRootHandlers = function() {
                      var e_3, _a;
                      try {
                        for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
                          var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                          this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
                        }
                      } catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                      } finally {
                        try {
                          if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return))
                            _a.call(ACTIVATION_EVENT_TYPES_2);
                        } finally {
                          if (e_3)
                            throw e_3.error;
                        }
                      }
                      this.adapter.deregisterInteractionHandler("focus", this.focusHandler);
                      this.adapter.deregisterInteractionHandler("blur", this.blurHandler);
                      if (this.adapter.isUnbounded()) {
                        this.adapter.deregisterResizeHandler(this.resizeHandler);
                      }
                    };
                    MDCRippleFoundation2.prototype.deregisterDeactivationHandlers = function() {
                      var e_4, _a;
                      this.adapter.deregisterInteractionHandler("keyup", this.deactivateHandler);
                      try {
                        for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
                          var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                          this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
                        }
                      } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                      } finally {
                        try {
                          if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return))
                            _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
                        } finally {
                          if (e_4)
                            throw e_4.error;
                        }
                      }
                    };
                    MDCRippleFoundation2.prototype.removeCssVars = function() {
                      var _this = this;
                      var rippleStrings = MDCRippleFoundation2.strings;
                      var keys = Object.keys(rippleStrings);
                      keys.forEach(function(key) {
                        if (key.indexOf("VAR_") === 0) {
                          _this.adapter.updateCssVariable(rippleStrings[key], null);
                        }
                      });
                    };
                    MDCRippleFoundation2.prototype.activateImpl = function(evt) {
                      var _this = this;
                      if (this.adapter.isSurfaceDisabled()) {
                        return;
                      }
                      var activationState = this.activationState;
                      if (activationState.isActivated) {
                        return;
                      }
                      var previousActivationEvent = this.previousActivationEvent;
                      var isSameInteraction = previousActivationEvent && evt !== void 0 && previousActivationEvent.type !== evt.type;
                      if (isSameInteraction) {
                        return;
                      }
                      activationState.isActivated = true;
                      activationState.isProgrammatic = evt === void 0;
                      activationState.activationEvent = evt;
                      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== void 0 && (evt.type === "mousedown" || evt.type === "touchstart" || evt.type === "pointerdown");
                      var hasActivatedChild = evt !== void 0 && activatedTargets.length > 0 && activatedTargets.some(function(target) {
                        return _this.adapter.containsEventTarget(target);
                      });
                      if (hasActivatedChild) {
                        this.resetActivationState();
                        return;
                      }
                      if (evt !== void 0) {
                        activatedTargets.push(evt.target);
                        this.registerDeactivationHandlers(evt);
                      }
                      activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
                      if (activationState.wasElementMadeActive) {
                        this.animateActivation();
                      }
                      requestAnimationFrame(function() {
                        activatedTargets = [];
                        if (!activationState.wasElementMadeActive && evt !== void 0 && (evt.key === " " || evt.keyCode === 32)) {
                          activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                          if (activationState.wasElementMadeActive) {
                            _this.animateActivation();
                          }
                        }
                        if (!activationState.wasElementMadeActive) {
                          _this.activationState = _this.defaultActivationState();
                        }
                      });
                    };
                    MDCRippleFoundation2.prototype.checkElementMadeActive = function(evt) {
                      return evt !== void 0 && evt.type === "keydown" ? this.adapter.isSurfaceActive() : true;
                    };
                    MDCRippleFoundation2.prototype.animateActivation = function() {
                      var _this = this;
                      var _a = MDCRippleFoundation2.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
                      var _b = MDCRippleFoundation2.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
                      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation2.numbers.DEACTIVATION_TIMEOUT_MS;
                      this.layoutInternal();
                      var translateStart = "";
                      var translateEnd = "";
                      if (!this.adapter.isUnbounded()) {
                        var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
                        translateStart = startPoint.x + "px, " + startPoint.y + "px";
                        translateEnd = endPoint.x + "px, " + endPoint.y + "px";
                      }
                      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
                      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
                      clearTimeout(this.activationTimer);
                      clearTimeout(this.fgDeactivationRemovalTimer);
                      this.rmBoundedActivationClasses();
                      this.adapter.removeClass(FG_DEACTIVATION);
                      this.adapter.computeBoundingRect();
                      this.adapter.addClass(FG_ACTIVATION);
                      this.activationTimer = setTimeout(function() {
                        _this.activationTimerCallback();
                      }, DEACTIVATION_TIMEOUT_MS);
                    };
                    MDCRippleFoundation2.prototype.getFgTranslationCoordinates = function() {
                      var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
                      var startPoint;
                      if (wasActivatedByPointer) {
                        startPoint = util_1.getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
                      } else {
                        startPoint = {
                          x: this.frame.width / 2,
                          y: this.frame.height / 2
                        };
                      }
                      startPoint = {
                        x: startPoint.x - this.initialSize / 2,
                        y: startPoint.y - this.initialSize / 2
                      };
                      var endPoint = {
                        x: this.frame.width / 2 - this.initialSize / 2,
                        y: this.frame.height / 2 - this.initialSize / 2
                      };
                      return { startPoint, endPoint };
                    };
                    MDCRippleFoundation2.prototype.runDeactivationUXLogicIfReady = function() {
                      var _this = this;
                      var FG_DEACTIVATION = MDCRippleFoundation2.cssClasses.FG_DEACTIVATION;
                      var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
                      var activationHasEnded = hasDeactivationUXRun || !isActivated;
                      if (activationHasEnded && this.activationAnimationHasEnded) {
                        this.rmBoundedActivationClasses();
                        this.adapter.addClass(FG_DEACTIVATION);
                        this.fgDeactivationRemovalTimer = setTimeout(function() {
                          _this.adapter.removeClass(FG_DEACTIVATION);
                        }, constants_1.numbers.FG_DEACTIVATION_MS);
                      }
                    };
                    MDCRippleFoundation2.prototype.rmBoundedActivationClasses = function() {
                      var FG_ACTIVATION = MDCRippleFoundation2.cssClasses.FG_ACTIVATION;
                      this.adapter.removeClass(FG_ACTIVATION);
                      this.activationAnimationHasEnded = false;
                      this.adapter.computeBoundingRect();
                    };
                    MDCRippleFoundation2.prototype.resetActivationState = function() {
                      var _this = this;
                      this.previousActivationEvent = this.activationState.activationEvent;
                      this.activationState = this.defaultActivationState();
                      setTimeout(function() {
                        return _this.previousActivationEvent = void 0;
                      }, MDCRippleFoundation2.numbers.TAP_DELAY_MS);
                    };
                    MDCRippleFoundation2.prototype.deactivateImpl = function() {
                      var _this = this;
                      var activationState = this.activationState;
                      if (!activationState.isActivated) {
                        return;
                      }
                      var state = __assign({}, activationState);
                      if (activationState.isProgrammatic) {
                        requestAnimationFrame(function() {
                          _this.animateDeactivation(state);
                        });
                        this.resetActivationState();
                      } else {
                        this.deregisterDeactivationHandlers();
                        requestAnimationFrame(function() {
                          _this.activationState.hasDeactivationUXRun = true;
                          _this.animateDeactivation(state);
                          _this.resetActivationState();
                        });
                      }
                    };
                    MDCRippleFoundation2.prototype.animateDeactivation = function(_a) {
                      var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
                      if (wasActivatedByPointer || wasElementMadeActive) {
                        this.runDeactivationUXLogicIfReady();
                      }
                    };
                    MDCRippleFoundation2.prototype.layoutInternal = function() {
                      var _this = this;
                      this.frame = this.adapter.computeBoundingRect();
                      var maxDim = Math.max(this.frame.height, this.frame.width);
                      var getBoundedRadius = function getBoundedRadius2() {
                        var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
                        return hypotenuse + MDCRippleFoundation2.numbers.PADDING;
                      };
                      this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
                      var initialSize = Math.floor(maxDim * MDCRippleFoundation2.numbers.INITIAL_ORIGIN_SCALE);
                      if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
                        this.initialSize = initialSize - 1;
                      } else {
                        this.initialSize = initialSize;
                      }
                      this.fgScale = "" + this.maxRadius / this.initialSize;
                      this.updateLayoutCssVars();
                    };
                    MDCRippleFoundation2.prototype.updateLayoutCssVars = function() {
                      var _a = MDCRippleFoundation2.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
                      this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
                      this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
                      if (this.adapter.isUnbounded()) {
                        this.unboundedCoords = {
                          left: Math.round(this.frame.width / 2 - this.initialSize / 2),
                          top: Math.round(this.frame.height / 2 - this.initialSize / 2)
                        };
                        this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
                        this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
                      }
                    };
                    return MDCRippleFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCRippleFoundation = MDCRippleFoundation;
                exports2.default = MDCRippleFoundation;
              }
            ),
            /***/
            "./packages/mdc-ripple/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-ripple/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.util = void 0;
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-ripple/util.ts"
                ));
                exports2.util = util;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-ripple/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-ripple/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-ripple/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-ripple/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-ripple/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-ripple/types.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-ripple/types.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-ripple/util.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-ripple/util.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.getNormalizedEventCoords = exports2.supportsCssVariables = void 0;
                var supportsCssVariables_;
                function supportsCssVariables(windowObj, forceRefresh) {
                  if (forceRefresh === void 0) {
                    forceRefresh = false;
                  }
                  var CSS = windowObj.CSS;
                  var supportsCssVars = supportsCssVariables_;
                  if (typeof supportsCssVariables_ === "boolean" && !forceRefresh) {
                    return supportsCssVariables_;
                  }
                  var supportsFunctionPresent = CSS && typeof CSS.supports === "function";
                  if (!supportsFunctionPresent) {
                    return false;
                  }
                  var explicitlySupportsCssVars = CSS.supports("--css-vars", "yes");
                  var weAreFeatureDetectingSafari10plus = CSS.supports("(--css-vars: yes)") && CSS.supports("color", "#00000000");
                  supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
                  if (!forceRefresh) {
                    supportsCssVariables_ = supportsCssVars;
                  }
                  return supportsCssVars;
                }
                exports2.supportsCssVariables = supportsCssVariables;
                function getNormalizedEventCoords(evt, pageOffset, clientRect) {
                  if (!evt) {
                    return { x: 0, y: 0 };
                  }
                  var x = pageOffset.x, y = pageOffset.y;
                  var documentX = x + clientRect.left;
                  var documentY = y + clientRect.top;
                  var normalizedX;
                  var normalizedY;
                  if (evt.type === "touchstart") {
                    var touchEvent = evt;
                    normalizedX = touchEvent.changedTouches[0].pageX - documentX;
                    normalizedY = touchEvent.changedTouches[0].pageY - documentY;
                  } else {
                    var mouseEvent = evt;
                    normalizedX = mouseEvent.pageX - documentX;
                    normalizedY = mouseEvent.pageY - documentY;
                  }
                  return { x: normalizedX, y: normalizedY };
                }
                exports2.getNormalizedEventCoords = getNormalizedEventCoords;
              }
            ),
            /***/
            "./packages/mdc-segmented-button/index.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-segmented-button/index.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./segmented-button/index */
                  "./packages/mdc-segmented-button/segmented-button/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./segment/index */
                  "./packages/mdc-segmented-button/segment/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-segmented-button/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segment/adapter.ts": (
              /*!**********************************************************!*\
                !*** ./packages/mdc-segmented-button/segment/adapter.ts ***!
                \**********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segment/component.ts": (
              /*!************************************************************!*\
                !*** ./packages/mdc-segmented-button/segment/component.ts ***!
                \************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSegmentedButtonSegment = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-segmented-button/segment/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-segmented-button/segment/foundation.ts"
                );
                var MDCSegmentedButtonSegment = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSegmentedButtonSegment2, _super);
                    function MDCSegmentedButtonSegment2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    Object.defineProperty(MDCSegmentedButtonSegment2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleComponent;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSegmentedButtonSegment2.attachTo = function(root) {
                      return new MDCSegmentedButtonSegment2(root);
                    };
                    MDCSegmentedButtonSegment2.prototype.initialize = function(rippleFactory) {
                      var _this = this;
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el, foundation) {
                          return new component_2.MDCRipple(el, foundation);
                        };
                      }
                      var rippleAdapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                        return _this.foundation.getDimensions();
                      } });
                      this.rippleComponent = rippleFactory(this.root, new foundation_1.MDCRippleFoundation(rippleAdapter));
                    };
                    MDCSegmentedButtonSegment2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleClick = function() {
                        _this.foundation.handleClick();
                      };
                      this.listen(constants_1.events.CLICK, this.handleClick);
                    };
                    MDCSegmentedButtonSegment2.prototype.destroy = function() {
                      this.ripple.destroy();
                      this.unlisten(constants_1.events.CLICK, this.handleClick);
                      _super.prototype.destroy.call(this);
                    };
                    MDCSegmentedButtonSegment2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        isSingleSelect: function isSingleSelect() {
                          return _this.isSingleSelect;
                        },
                        getAttr: function getAttr(attrName) {
                          return _this.root.getAttribute(attrName);
                        },
                        setAttr: function setAttr(attrName, value) {
                          _this.root.setAttribute(attrName, value);
                        },
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        notifySelectedChange: function notifySelectedChange(selected) {
                          _this.emit(
                            constants_1.events.SELECTED,
                            {
                              index: _this.index,
                              selected,
                              segmentId: _this.getSegmentId()
                            },
                            true
                            /* shouldBubble */
                          );
                        },
                        getRootBoundingClientRect: function getRootBoundingClientRect() {
                          return _this.root.getBoundingClientRect();
                        }
                      };
                      return new foundation_2.MDCSegmentedButtonSegmentFoundation(adapter);
                    };
                    MDCSegmentedButtonSegment2.prototype.setIndex = function(index) {
                      this.index = index;
                    };
                    MDCSegmentedButtonSegment2.prototype.setIsSingleSelect = function(isSingleSelect) {
                      this.isSingleSelect = isSingleSelect;
                    };
                    MDCSegmentedButtonSegment2.prototype.isSelected = function() {
                      return this.foundation.isSelected();
                    };
                    MDCSegmentedButtonSegment2.prototype.setSelected = function() {
                      this.foundation.setSelected();
                    };
                    MDCSegmentedButtonSegment2.prototype.setUnselected = function() {
                      this.foundation.setUnselected();
                    };
                    MDCSegmentedButtonSegment2.prototype.getSegmentId = function() {
                      return this.foundation.getSegmentId();
                    };
                    return MDCSegmentedButtonSegment2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSegmentedButtonSegment = MDCSegmentedButtonSegment;
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segment/constants.ts": (
              /*!************************************************************!*\
                !*** ./packages/mdc-segmented-button/segment/constants.ts ***!
                \************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.events = exports2.attributes = exports2.booleans = void 0;
                exports2.booleans = {
                  TRUE: "true",
                  FALSE: "false"
                };
                exports2.attributes = {
                  ARIA_CHECKED: "aria-checked",
                  ARIA_PRESSED: "aria-pressed",
                  DATA_SEGMENT_ID: "data-segment-id"
                };
                exports2.events = {
                  CLICK: "click",
                  SELECTED: "selected"
                };
                exports2.cssClasses = {
                  SELECTED: "mdc-segmented-button__segment--selected"
                };
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segment/foundation.ts": (
              /*!*************************************************************!*\
                !*** ./packages/mdc-segmented-button/segment/foundation.ts ***!
                \*************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSegmentedButtonSegmentFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-segmented-button/segment/constants.ts"
                );
                var emptyClientRect = {
                  bottom: 0,
                  height: 0,
                  left: 0,
                  right: 0,
                  top: 0,
                  width: 0
                };
                var MDCSegmentedButtonSegmentFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSegmentedButtonSegmentFoundation2, _super);
                    function MDCSegmentedButtonSegmentFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCSegmentedButtonSegmentFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCSegmentedButtonSegmentFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          isSingleSelect: function isSingleSelect() {
                            return false;
                          },
                          getAttr: function getAttr() {
                            return "";
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          notifySelectedChange: function notifySelectedChange() {
                            return void 0;
                          },
                          getRootBoundingClientRect: function getRootBoundingClientRect() {
                            return emptyClientRect;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSegmentedButtonSegmentFoundation2.prototype.isSelected = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.SELECTED);
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.setSelected = function() {
                      this.adapter.addClass(constants_1.cssClasses.SELECTED);
                      this.setAriaAttr(constants_1.booleans.TRUE);
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.setUnselected = function() {
                      this.adapter.removeClass(constants_1.cssClasses.SELECTED);
                      this.setAriaAttr(constants_1.booleans.FALSE);
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.getSegmentId = function() {
                      var _a;
                      return (_a = this.adapter.getAttr(constants_1.attributes.DATA_SEGMENT_ID)) !== null && _a !== void 0 ? _a : void 0;
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.handleClick = function() {
                      if (this.adapter.isSingleSelect()) {
                        this.setSelected();
                      } else {
                        this.toggleSelection();
                      }
                      this.adapter.notifySelectedChange(this.isSelected());
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.getDimensions = function() {
                      return this.adapter.getRootBoundingClientRect();
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.toggleSelection = function() {
                      if (this.isSelected()) {
                        this.setUnselected();
                      } else {
                        this.setSelected();
                      }
                    };
                    MDCSegmentedButtonSegmentFoundation2.prototype.setAriaAttr = function(value) {
                      if (this.adapter.isSingleSelect()) {
                        this.adapter.setAttr(constants_1.attributes.ARIA_CHECKED, value);
                      } else {
                        this.adapter.setAttr(constants_1.attributes.ARIA_PRESSED, value);
                      }
                    };
                    return MDCSegmentedButtonSegmentFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSegmentedButtonSegmentFoundation = MDCSegmentedButtonSegmentFoundation;
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segment/index.ts": (
              /*!********************************************************!*\
                !*** ./packages/mdc-segmented-button/segment/index.ts ***!
                \********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-segmented-button/segment/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-segmented-button/segment/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-segmented-button/segment/component.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segmented-button/adapter.ts": (
              /*!*******************************************************************!*\
                !*** ./packages/mdc-segmented-button/segmented-button/adapter.ts ***!
                \*******************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segmented-button/component.ts": (
              /*!*********************************************************************!*\
                !*** ./packages/mdc-segmented-button/segmented-button/component.ts ***!
                \*********************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSegmentedButton = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! ../segment/component */
                  "./packages/mdc-segmented-button/segment/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-segmented-button/segmented-button/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-segmented-button/segmented-button/foundation.ts"
                );
                var MDCSegmentedButton = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSegmentedButton2, _super);
                    function MDCSegmentedButton2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSegmentedButton2.attachTo = function(root) {
                      return new MDCSegmentedButton2(root);
                    };
                    Object.defineProperty(MDCSegmentedButton2.prototype, "segments", {
                      get: function get() {
                        return this.segmentsList.slice();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSegmentedButton2.prototype.initialize = function(segmentFactory) {
                      if (segmentFactory === void 0) {
                        segmentFactory = function segmentFactory2(el) {
                          return new component_2.MDCSegmentedButtonSegment(el);
                        };
                      }
                      this.segmentFactory = segmentFactory;
                      this.segmentsList = this.instantiateSegments(this.segmentFactory);
                    };
                    MDCSegmentedButton2.prototype.instantiateSegments = function(segmentFactory) {
                      var segmentElements = [].slice.call(this.root.querySelectorAll(constants_1.selectors.SEGMENT));
                      return segmentElements.map(function(el) {
                        return segmentFactory(el);
                      });
                    };
                    MDCSegmentedButton2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleSelected = function(event) {
                        _this.foundation.handleSelected(event.detail);
                      };
                      this.listen(constants_1.events.SELECTED, this.handleSelected);
                      var isSingleSelect = this.foundation.isSingleSelect();
                      for (var i = 0; i < this.segmentsList.length; i++) {
                        var segment = this.segmentsList[i];
                        segment.setIndex(i);
                        segment.setIsSingleSelect(isSingleSelect);
                      }
                      var selectedSegments = this.segmentsList.filter(function(segment2) {
                        return segment2.isSelected();
                      });
                      if (isSingleSelect && selectedSegments.length === 0 && this.segmentsList.length > 0) {
                        throw new Error("No segment selected in singleSelect mdc-segmented-button");
                      } else if (isSingleSelect && selectedSegments.length > 1) {
                        throw new Error("Multiple segments selected in singleSelect mdc-segmented-button");
                      }
                    };
                    MDCSegmentedButton2.prototype.destroy = function() {
                      var e_1, _a;
                      try {
                        for (var _b = __values(this.segmentsList), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var segment = _c.value;
                          segment.destroy();
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      this.unlisten(constants_1.events.SELECTED, this.handleSelected);
                      _super.prototype.destroy.call(this);
                    };
                    MDCSegmentedButton2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        getSegments: function getSegments() {
                          return _this.mappedSegments();
                        },
                        selectSegment: function selectSegment(indexOrSegmentId) {
                          var segmentDetail = _this.mappedSegments().find(function(detail) {
                            return detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId;
                          });
                          if (segmentDetail) {
                            _this.segmentsList[segmentDetail.index].setSelected();
                          }
                        },
                        unselectSegment: function unselectSegment(indexOrSegmentId) {
                          var segmentDetail = _this.mappedSegments().find(function(detail) {
                            return detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId;
                          });
                          if (segmentDetail) {
                            _this.segmentsList[segmentDetail.index].setUnselected();
                          }
                        },
                        notifySelectedChange: function notifySelectedChange(detail) {
                          _this.emit(
                            constants_1.events.CHANGE,
                            detail,
                            true
                            /* shouldBubble */
                          );
                        }
                      };
                      return new foundation_1.MDCSegmentedButtonFoundation(adapter);
                    };
                    MDCSegmentedButton2.prototype.getSelectedSegments = function() {
                      return this.foundation.getSelectedSegments();
                    };
                    MDCSegmentedButton2.prototype.selectSegment = function(indexOrSegmentId) {
                      this.foundation.selectSegment(indexOrSegmentId);
                    };
                    MDCSegmentedButton2.prototype.unselectSegment = function(indexOrSegmentId) {
                      this.foundation.unselectSegment(indexOrSegmentId);
                    };
                    MDCSegmentedButton2.prototype.isSegmentSelected = function(indexOrSegmentId) {
                      return this.foundation.isSegmentSelected(indexOrSegmentId);
                    };
                    MDCSegmentedButton2.prototype.mappedSegments = function() {
                      return this.segmentsList.map(function(segment, index) {
                        return {
                          index,
                          selected: segment.isSelected(),
                          segmentId: segment.getSegmentId()
                        };
                      });
                    };
                    return MDCSegmentedButton2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSegmentedButton = MDCSegmentedButton;
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segmented-button/constants.ts": (
              /*!*********************************************************************!*\
                !*** ./packages/mdc-segmented-button/segmented-button/constants.ts ***!
                \*********************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.events = exports2.selectors = void 0;
                exports2.selectors = {
                  SEGMENT: ".mdc-segmented-button__segment"
                };
                exports2.events = {
                  SELECTED: "selected",
                  CHANGE: "change"
                };
                exports2.cssClasses = {
                  SINGLE_SELECT: "mdc-segmented-button--single-select"
                };
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segmented-button/foundation.ts": (
              /*!**********************************************************************!*\
                !*** ./packages/mdc-segmented-button/segmented-button/foundation.ts ***!
                \**********************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSegmentedButtonFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-segmented-button/segmented-button/constants.ts"
                );
                var MDCSegmentedButtonFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSegmentedButtonFoundation2, _super);
                    function MDCSegmentedButtonFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCSegmentedButtonFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCSegmentedButtonFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          hasClass: function hasClass() {
                            return false;
                          },
                          getSegments: function getSegments() {
                            return [];
                          },
                          selectSegment: function selectSegment() {
                            return void 0;
                          },
                          unselectSegment: function unselectSegment() {
                            return void 0;
                          },
                          notifySelectedChange: function notifySelectedChange() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSegmentedButtonFoundation2.prototype.selectSegment = function(indexOrSegmentId) {
                      this.adapter.selectSegment(indexOrSegmentId);
                    };
                    MDCSegmentedButtonFoundation2.prototype.unselectSegment = function(indexOrSegmentId) {
                      this.adapter.unselectSegment(indexOrSegmentId);
                    };
                    MDCSegmentedButtonFoundation2.prototype.getSelectedSegments = function() {
                      return this.adapter.getSegments().filter(function(segmentDetail) {
                        return segmentDetail.selected;
                      });
                    };
                    MDCSegmentedButtonFoundation2.prototype.isSegmentSelected = function(indexOrSegmentId) {
                      return this.adapter.getSegments().some(function(segmentDetail) {
                        return (segmentDetail.index === indexOrSegmentId || segmentDetail.segmentId === indexOrSegmentId) && segmentDetail.selected;
                      });
                    };
                    MDCSegmentedButtonFoundation2.prototype.isSingleSelect = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.SINGLE_SELECT);
                    };
                    MDCSegmentedButtonFoundation2.prototype.handleSelected = function(detail) {
                      if (this.isSingleSelect()) {
                        this.unselectPrevSelected(detail.index);
                      }
                      this.adapter.notifySelectedChange(detail);
                    };
                    MDCSegmentedButtonFoundation2.prototype.unselectPrevSelected = function(index) {
                      var e_1, _a;
                      try {
                        for (var _b = __values(this.getSelectedSegments()), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var selectedSegment = _c.value;
                          if (selectedSegment.index !== index) {
                            this.unselectSegment(selectedSegment.index);
                          }
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    return MDCSegmentedButtonFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSegmentedButtonFoundation = MDCSegmentedButtonFoundation;
              }
            ),
            /***/
            "./packages/mdc-segmented-button/segmented-button/index.ts": (
              /*!*****************************************************************!*\
                !*** ./packages/mdc-segmented-button/segmented-button/index.ts ***!
                \*****************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-segmented-button/segmented-button/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-segmented-button/segmented-button/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-segmented-button/segmented-button/component.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-segmented-button/types.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-segmented-button/types.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-select/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-select/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-select/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-select/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelect = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/floating-label/component */
                  "./packages/mdc-floating-label/component.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/line-ripple/component */
                  "./packages/mdc-line-ripple/component.ts"
                );
                var menuSurfaceConstants = __importStar(__webpack_require__(
                  /*! @material/menu-surface/constants */
                  "./packages/mdc-menu-surface/constants.ts"
                ));
                var component_4 = __webpack_require__(
                  /*! @material/menu/component */
                  "./packages/mdc-menu/component.ts"
                );
                var menuConstants = __importStar(__webpack_require__(
                  /*! @material/menu/constants */
                  "./packages/mdc-menu/constants.ts"
                ));
                var component_5 = __webpack_require__(
                  /*! @material/notched-outline/component */
                  "./packages/mdc-notched-outline/component.ts"
                );
                var component_6 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/foundation.ts"
                );
                var component_7 = __webpack_require__(
                  /*! ./helper-text/component */
                  "./packages/mdc-select/helper-text/component.ts"
                );
                var component_8 = __webpack_require__(
                  /*! ./icon/component */
                  "./packages/mdc-select/icon/component.ts"
                );
                var MDCSelect = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelect2, _super);
                    function MDCSelect2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSelect2.attachTo = function(root) {
                      return new MDCSelect2(root);
                    };
                    MDCSelect2.prototype.initialize = function(labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
                      if (labelFactory === void 0) {
                        labelFactory = function labelFactory2(el) {
                          return new component_2.MDCFloatingLabel(el);
                        };
                      }
                      if (lineRippleFactory === void 0) {
                        lineRippleFactory = function lineRippleFactory2(el) {
                          return new component_3.MDCLineRipple(el);
                        };
                      }
                      if (outlineFactory === void 0) {
                        outlineFactory = function outlineFactory2(el) {
                          return new component_5.MDCNotchedOutline(el);
                        };
                      }
                      if (menuFactory === void 0) {
                        menuFactory = function menuFactory2(el) {
                          return new component_4.MDCMenu(el);
                        };
                      }
                      if (iconFactory === void 0) {
                        iconFactory = function iconFactory2(el) {
                          return new component_8.MDCSelectIcon(el);
                        };
                      }
                      if (helperTextFactory === void 0) {
                        helperTextFactory = function helperTextFactory2(el) {
                          return new component_7.MDCSelectHelperText(el);
                        };
                      }
                      this.selectAnchor = this.root.querySelector(constants_1.strings.SELECT_ANCHOR_SELECTOR);
                      this.selectedText = this.root.querySelector(constants_1.strings.SELECTED_TEXT_SELECTOR);
                      this.hiddenInput = this.root.querySelector(constants_1.strings.HIDDEN_INPUT_SELECTOR);
                      if (!this.selectedText) {
                        throw new Error("MDCSelect: Missing required element: The following selector must be present: " + ("'" + constants_1.strings.SELECTED_TEXT_SELECTOR + "'"));
                      }
                      if (this.selectAnchor.hasAttribute(constants_1.strings.ARIA_CONTROLS)) {
                        var helperTextElement = document.getElementById(this.selectAnchor.getAttribute(constants_1.strings.ARIA_CONTROLS));
                        if (helperTextElement) {
                          this.helperText = helperTextFactory(helperTextElement);
                        }
                      }
                      this.menuSetup(menuFactory);
                      var labelElement = this.root.querySelector(constants_1.strings.LABEL_SELECTOR);
                      this.label = labelElement ? labelFactory(labelElement) : null;
                      var lineRippleElement = this.root.querySelector(constants_1.strings.LINE_RIPPLE_SELECTOR);
                      this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
                      var outlineElement = this.root.querySelector(constants_1.strings.OUTLINE_SELECTOR);
                      this.outline = outlineElement ? outlineFactory(outlineElement) : null;
                      var leadingIcon = this.root.querySelector(constants_1.strings.LEADING_ICON_SELECTOR);
                      if (leadingIcon) {
                        this.leadingIcon = iconFactory(leadingIcon);
                      }
                      if (!this.root.classList.contains(constants_1.cssClasses.OUTLINED)) {
                        this.ripple = this.createRipple();
                      }
                    };
                    MDCSelect2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleFocus = function() {
                        _this.foundation.handleFocus();
                      };
                      this.handleBlur = function() {
                        _this.foundation.handleBlur();
                      };
                      this.handleClick = function(evt) {
                        _this.selectAnchor.focus();
                        _this.foundation.handleClick(_this.getNormalizedXCoordinate(evt));
                      };
                      this.handleKeydown = function(evt) {
                        _this.foundation.handleKeydown(evt);
                      };
                      this.handleMenuItemAction = function(evt) {
                        _this.foundation.handleMenuItemAction(evt.detail.index);
                      };
                      this.handleMenuOpened = function() {
                        _this.foundation.handleMenuOpened();
                      };
                      this.handleMenuClosed = function() {
                        _this.foundation.handleMenuClosed();
                      };
                      this.handleMenuClosing = function() {
                        _this.foundation.handleMenuClosing();
                      };
                      this.selectAnchor.addEventListener("focus", this.handleFocus);
                      this.selectAnchor.addEventListener("blur", this.handleBlur);
                      this.selectAnchor.addEventListener("click", this.handleClick);
                      this.selectAnchor.addEventListener("keydown", this.handleKeydown);
                      this.menu.listen(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed);
                      this.menu.listen(menuSurfaceConstants.strings.CLOSING_EVENT, this.handleMenuClosing);
                      this.menu.listen(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened);
                      this.menu.listen(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction);
                      if (this.hiddenInput) {
                        if (this.hiddenInput.value) {
                          this.foundation.setValue(
                            this.hiddenInput.value,
                            /** skipNotify */
                            true
                          );
                          this.foundation.layout();
                          return;
                        }
                        this.hiddenInput.value = this.value;
                      }
                    };
                    MDCSelect2.prototype.destroy = function() {
                      this.selectAnchor.removeEventListener("focus", this.handleFocus);
                      this.selectAnchor.removeEventListener("blur", this.handleBlur);
                      this.selectAnchor.removeEventListener("keydown", this.handleKeydown);
                      this.selectAnchor.removeEventListener("click", this.handleClick);
                      this.menu.unlisten(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed);
                      this.menu.unlisten(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened);
                      this.menu.unlisten(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction);
                      this.menu.destroy();
                      if (this.ripple) {
                        this.ripple.destroy();
                      }
                      if (this.outline) {
                        this.outline.destroy();
                      }
                      if (this.leadingIcon) {
                        this.leadingIcon.destroy();
                      }
                      if (this.helperText) {
                        this.helperText.destroy();
                      }
                      _super.prototype.destroy.call(this);
                    };
                    Object.defineProperty(MDCSelect2.prototype, "value", {
                      get: function get() {
                        return this.foundation.getValue();
                      },
                      set: function set(value) {
                        this.foundation.setValue(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelect2.prototype.setValue = function(value, skipNotify) {
                      if (skipNotify === void 0) {
                        skipNotify = false;
                      }
                      this.foundation.setValue(value, skipNotify);
                    };
                    Object.defineProperty(MDCSelect2.prototype, "selectedIndex", {
                      get: function get() {
                        return this.foundation.getSelectedIndex();
                      },
                      set: function set(selectedIndex) {
                        this.foundation.setSelectedIndex(
                          selectedIndex,
                          /* closeMenu */
                          true
                        );
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelect2.prototype.setSelectedIndex = function(selectedIndex, skipNotify) {
                      if (skipNotify === void 0) {
                        skipNotify = false;
                      }
                      this.foundation.setSelectedIndex(
                        selectedIndex,
                        /* closeMenu */
                        true,
                        skipNotify
                      );
                    };
                    Object.defineProperty(MDCSelect2.prototype, "disabled", {
                      get: function get() {
                        return this.foundation.getDisabled();
                      },
                      set: function set(disabled) {
                        this.foundation.setDisabled(disabled);
                        if (this.hiddenInput) {
                          this.hiddenInput.disabled = disabled;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "leadingIconAriaLabel", {
                      set: function set(label) {
                        this.foundation.setLeadingIconAriaLabel(label);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "leadingIconContent", {
                      /**
                       * Sets the text content of the leading icon.
                       */
                      set: function set(content) {
                        this.foundation.setLeadingIconContent(content);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "helperTextContent", {
                      /**
                       * Sets the text content of the helper text.
                       */
                      set: function set(content) {
                        this.foundation.setHelperTextContent(content);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "useDefaultValidation", {
                      /**
                       * Enables or disables the default validation scheme where a required select
                       * must be non-empty. Set to false for custom validation.
                       * @param useDefaultValidation Set this to false to ignore default
                       *     validation scheme.
                       */
                      set: function set(useDefaultValidation) {
                        this.foundation.setUseDefaultValidation(useDefaultValidation);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "valid", {
                      /**
                       * Checks if the select is in a valid state.
                       */
                      get: function get() {
                        return this.foundation.isValid();
                      },
                      /**
                       * Sets the current invalid state of the select.
                       */
                      set: function set(isValid) {
                        this.foundation.setValid(isValid);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelect2.prototype, "required", {
                      /**
                       * Returns whether the select is required.
                       */
                      get: function get() {
                        return this.foundation.getRequired();
                      },
                      /**
                       * Sets the control to the required state.
                       */
                      set: function set(isRequired) {
                        this.foundation.setRequired(isRequired);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelect2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCSelect2.prototype.layoutOptions = function() {
                      this.foundation.layoutOptions();
                      this.menu.layout();
                      this.menuItemValues = this.menu.items.map(function(el) {
                        return el.getAttribute(constants_1.strings.VALUE_ATTR) || "";
                      });
                      if (this.hiddenInput) {
                        this.hiddenInput.value = this.value;
                      }
                    };
                    MDCSelect2.prototype.getDefaultFoundation = function() {
                      var adapter = __assign(__assign(__assign(__assign({}, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());
                      return new foundation_2.MDCSelectFoundation(adapter, this.getFoundationMap());
                    };
                    MDCSelect2.prototype.menuSetup = function(menuFactory) {
                      this.menuElement = this.root.querySelector(constants_1.strings.MENU_SELECTOR);
                      this.menu = menuFactory(this.menuElement);
                      this.menu.hasTypeahead = true;
                      this.menu.singleSelection = true;
                      this.menuItemValues = this.menu.items.map(function(el) {
                        return el.getAttribute(constants_1.strings.VALUE_ATTR) || "";
                      });
                    };
                    MDCSelect2.prototype.createRipple = function() {
                      var _this = this;
                      var adapter = __assign(__assign({}, component_6.MDCRipple.createAdapter({ root: this.selectAnchor })), { registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                        _this.selectAnchor.addEventListener(evtType, handler);
                      }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                        _this.selectAnchor.removeEventListener(evtType, handler);
                      } });
                      return new component_6.MDCRipple(this.selectAnchor, new foundation_1.MDCRippleFoundation(adapter));
                    };
                    MDCSelect2.prototype.getSelectAdapterMethods = function() {
                      var _this = this;
                      return {
                        getMenuItemAttr: function getMenuItemAttr(menuItem, attr) {
                          return menuItem.getAttribute(attr);
                        },
                        setSelectedText: function setSelectedText(text) {
                          _this.selectedText.textContent = text;
                        },
                        isSelectAnchorFocused: function isSelectAnchorFocused() {
                          return document.activeElement === _this.selectAnchor;
                        },
                        getSelectAnchorAttr: function getSelectAnchorAttr(attr) {
                          return _this.selectAnchor.getAttribute(attr);
                        },
                        setSelectAnchorAttr: function setSelectAnchorAttr(attr, value) {
                          _this.selectAnchor.setAttribute(attr, value);
                        },
                        removeSelectAnchorAttr: function removeSelectAnchorAttr(attr) {
                          _this.selectAnchor.removeAttribute(attr);
                        },
                        addMenuClass: function addMenuClass(className) {
                          _this.menuElement.classList.add(className);
                        },
                        removeMenuClass: function removeMenuClass(className) {
                          _this.menuElement.classList.remove(className);
                        },
                        openMenu: function openMenu() {
                          _this.menu.open = true;
                        },
                        closeMenu: function closeMenu() {
                          _this.menu.open = false;
                        },
                        getAnchorElement: function getAnchorElement() {
                          return _this.root.querySelector(constants_1.strings.SELECT_ANCHOR_SELECTOR);
                        },
                        setMenuAnchorElement: function setMenuAnchorElement(anchorEl) {
                          _this.menu.setAnchorElement(anchorEl);
                        },
                        setMenuAnchorCorner: function setMenuAnchorCorner(anchorCorner) {
                          _this.menu.setAnchorCorner(anchorCorner);
                        },
                        setMenuWrapFocus: function setMenuWrapFocus(wrapFocus) {
                          _this.menu.wrapFocus = wrapFocus;
                        },
                        getSelectedIndex: function getSelectedIndex() {
                          var index = _this.menu.selectedIndex;
                          return index instanceof Array ? index[0] : index;
                        },
                        setSelectedIndex: function setSelectedIndex(index) {
                          _this.menu.selectedIndex = index;
                        },
                        focusMenuItemAtIndex: function focusMenuItemAtIndex(index) {
                          _this.menu.items[index].focus();
                        },
                        getMenuItemCount: function getMenuItemCount() {
                          return _this.menu.items.length;
                        },
                        // Cache menu item values. layoutOptions() updates this cache.
                        getMenuItemValues: function getMenuItemValues() {
                          return _this.menuItemValues;
                        },
                        getMenuItemTextAtIndex: function getMenuItemTextAtIndex(index) {
                          return _this.menu.getPrimaryTextAtIndex(index);
                        },
                        isTypeaheadInProgress: function isTypeaheadInProgress() {
                          return _this.menu.typeaheadInProgress;
                        },
                        typeaheadMatchItem: function typeaheadMatchItem(nextChar, startingIndex) {
                          return _this.menu.typeaheadMatchItem(nextChar, startingIndex);
                        }
                      };
                    };
                    MDCSelect2.prototype.getCommonAdapterMethods = function() {
                      var _this = this;
                      return {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        setRippleCenter: function setRippleCenter(normalizedX) {
                          _this.lineRipple && _this.lineRipple.setRippleCenter(normalizedX);
                        },
                        activateBottomLine: function activateBottomLine() {
                          _this.lineRipple && _this.lineRipple.activate();
                        },
                        deactivateBottomLine: function deactivateBottomLine() {
                          _this.lineRipple && _this.lineRipple.deactivate();
                        },
                        notifyChange: function notifyChange(value) {
                          if (_this.hiddenInput) {
                            _this.hiddenInput.value = value;
                          }
                          var index = _this.selectedIndex;
                          _this.emit(
                            constants_1.strings.CHANGE_EVENT,
                            { value, index },
                            true
                            /* shouldBubble  */
                          );
                        }
                      };
                    };
                    MDCSelect2.prototype.getOutlineAdapterMethods = function() {
                      var _this = this;
                      return {
                        hasOutline: function hasOutline() {
                          return Boolean(_this.outline);
                        },
                        notchOutline: function notchOutline(labelWidth) {
                          _this.outline && _this.outline.notch(labelWidth);
                        },
                        closeOutline: function closeOutline() {
                          _this.outline && _this.outline.closeNotch();
                        }
                      };
                    };
                    MDCSelect2.prototype.getLabelAdapterMethods = function() {
                      var _this = this;
                      return {
                        hasLabel: function hasLabel() {
                          return !!_this.label;
                        },
                        floatLabel: function floatLabel(shouldFloat) {
                          _this.label && _this.label.float(shouldFloat);
                        },
                        getLabelWidth: function getLabelWidth() {
                          return _this.label ? _this.label.getWidth() : 0;
                        },
                        setLabelRequired: function setLabelRequired(isRequired) {
                          _this.label && _this.label.setRequired(isRequired);
                        }
                      };
                    };
                    MDCSelect2.prototype.getNormalizedXCoordinate = function(evt) {
                      var targetClientRect = evt.target.getBoundingClientRect();
                      var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
                      return xCoordinate - targetClientRect.left;
                    };
                    MDCSelect2.prototype.isTouchEvent = function(evt) {
                      return Boolean(evt.touches);
                    };
                    MDCSelect2.prototype.getFoundationMap = function() {
                      return {
                        helperText: this.helperText ? this.helperText.foundationForSelect : void 0,
                        leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForSelect : void 0
                      };
                    };
                    return MDCSelect2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSelect = MDCSelect;
              }
            ),
            /***/
            "./packages/mdc-select/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-select/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ACTIVATED: "mdc-select--activated",
                  DISABLED: "mdc-select--disabled",
                  FOCUSED: "mdc-select--focused",
                  INVALID: "mdc-select--invalid",
                  MENU_INVALID: "mdc-select__menu--invalid",
                  OUTLINED: "mdc-select--outlined",
                  REQUIRED: "mdc-select--required",
                  ROOT: "mdc-select",
                  WITH_LEADING_ICON: "mdc-select--with-leading-icon"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ARIA_CONTROLS: "aria-controls",
                  ARIA_DESCRIBEDBY: "aria-describedby",
                  ARIA_SELECTED_ATTR: "aria-selected",
                  CHANGE_EVENT: "MDCSelect:change",
                  HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
                  LABEL_SELECTOR: ".mdc-floating-label",
                  LEADING_ICON_SELECTOR: ".mdc-select__icon",
                  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
                  MENU_SELECTOR: ".mdc-select__menu",
                  OUTLINE_SELECTOR: ".mdc-notched-outline",
                  SELECTED_TEXT_SELECTOR: ".mdc-select__selected-text",
                  SELECT_ANCHOR_SELECTOR: ".mdc-select__anchor",
                  VALUE_ATTR: "data-value"
                };
                exports2.strings = strings;
                var numbers = {
                  LABEL_SCALE: 0.75,
                  UNSET_INDEX: -1,
                  CLICK_DEBOUNCE_TIMEOUT_MS: 330
                };
                exports2.numbers = numbers;
              }
            ),
            /***/
            "./packages/mdc-select/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-select/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelectFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var keyboard_1 = __webpack_require__(
                  /*! @material/dom/keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! @material/menu-surface/constants */
                  "./packages/mdc-menu-surface/constants.ts"
                );
                var constants_2 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/constants.ts"
                );
                var MDCSelectFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelectFoundation2, _super);
                    function MDCSelectFoundation2(adapter, foundationMap) {
                      if (foundationMap === void 0) {
                        foundationMap = {};
                      }
                      var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation2.defaultAdapter), adapter)) || this;
                      _this.disabled = false;
                      _this.isMenuOpen = false;
                      _this.useDefaultValidation = true;
                      _this.customValidity = true;
                      _this.lastSelectedIndex = constants_2.numbers.UNSET_INDEX;
                      _this.clickDebounceTimeout = 0;
                      _this.recentlyClicked = false;
                      _this.leadingIcon = foundationMap.leadingIcon;
                      _this.helperText = foundationMap.helperText;
                      return _this;
                    }
                    Object.defineProperty(MDCSelectFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_2.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectFoundation2, "numbers", {
                      get: function get() {
                        return constants_2.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectFoundation2, "strings", {
                      get: function get() {
                        return constants_2.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCSelectAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          activateBottomLine: function activateBottomLine() {
                            return void 0;
                          },
                          deactivateBottomLine: function deactivateBottomLine() {
                            return void 0;
                          },
                          getSelectedIndex: function getSelectedIndex() {
                            return -1;
                          },
                          setSelectedIndex: function setSelectedIndex() {
                            return void 0;
                          },
                          hasLabel: function hasLabel() {
                            return false;
                          },
                          floatLabel: function floatLabel() {
                            return void 0;
                          },
                          getLabelWidth: function getLabelWidth() {
                            return 0;
                          },
                          setLabelRequired: function setLabelRequired() {
                            return void 0;
                          },
                          hasOutline: function hasOutline() {
                            return false;
                          },
                          notchOutline: function notchOutline() {
                            return void 0;
                          },
                          closeOutline: function closeOutline() {
                            return void 0;
                          },
                          setRippleCenter: function setRippleCenter() {
                            return void 0;
                          },
                          notifyChange: function notifyChange() {
                            return void 0;
                          },
                          setSelectedText: function setSelectedText() {
                            return void 0;
                          },
                          isSelectAnchorFocused: function isSelectAnchorFocused() {
                            return false;
                          },
                          getSelectAnchorAttr: function getSelectAnchorAttr() {
                            return "";
                          },
                          setSelectAnchorAttr: function setSelectAnchorAttr() {
                            return void 0;
                          },
                          removeSelectAnchorAttr: function removeSelectAnchorAttr() {
                            return void 0;
                          },
                          addMenuClass: function addMenuClass() {
                            return void 0;
                          },
                          removeMenuClass: function removeMenuClass() {
                            return void 0;
                          },
                          openMenu: function openMenu() {
                            return void 0;
                          },
                          closeMenu: function closeMenu() {
                            return void 0;
                          },
                          getAnchorElement: function getAnchorElement() {
                            return null;
                          },
                          setMenuAnchorElement: function setMenuAnchorElement() {
                            return void 0;
                          },
                          setMenuAnchorCorner: function setMenuAnchorCorner() {
                            return void 0;
                          },
                          setMenuWrapFocus: function setMenuWrapFocus() {
                            return void 0;
                          },
                          focusMenuItemAtIndex: function focusMenuItemAtIndex() {
                            return void 0;
                          },
                          getMenuItemCount: function getMenuItemCount() {
                            return 0;
                          },
                          getMenuItemValues: function getMenuItemValues() {
                            return [];
                          },
                          getMenuItemTextAtIndex: function getMenuItemTextAtIndex() {
                            return "";
                          },
                          isTypeaheadInProgress: function isTypeaheadInProgress() {
                            return false;
                          },
                          typeaheadMatchItem: function typeaheadMatchItem() {
                            return -1;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelectFoundation2.prototype.getSelectedIndex = function() {
                      return this.adapter.getSelectedIndex();
                    };
                    MDCSelectFoundation2.prototype.setSelectedIndex = function(index, closeMenu, skipNotify) {
                      if (closeMenu === void 0) {
                        closeMenu = false;
                      }
                      if (skipNotify === void 0) {
                        skipNotify = false;
                      }
                      if (index >= this.adapter.getMenuItemCount()) {
                        return;
                      }
                      if (index === constants_2.numbers.UNSET_INDEX) {
                        this.adapter.setSelectedText("");
                      } else {
                        this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
                      }
                      this.adapter.setSelectedIndex(index);
                      if (closeMenu) {
                        this.adapter.closeMenu();
                      }
                      if (!skipNotify && this.lastSelectedIndex !== index) {
                        this.handleChange();
                      }
                      this.lastSelectedIndex = index;
                    };
                    MDCSelectFoundation2.prototype.setValue = function(value, skipNotify) {
                      if (skipNotify === void 0) {
                        skipNotify = false;
                      }
                      var index = this.adapter.getMenuItemValues().indexOf(value);
                      this.setSelectedIndex(
                        index,
                        /** closeMenu */
                        false,
                        skipNotify
                      );
                    };
                    MDCSelectFoundation2.prototype.getValue = function() {
                      var index = this.adapter.getSelectedIndex();
                      var menuItemValues = this.adapter.getMenuItemValues();
                      return index !== constants_2.numbers.UNSET_INDEX ? menuItemValues[index] : "";
                    };
                    MDCSelectFoundation2.prototype.getDisabled = function() {
                      return this.disabled;
                    };
                    MDCSelectFoundation2.prototype.setDisabled = function(isDisabled) {
                      this.disabled = isDisabled;
                      if (this.disabled) {
                        this.adapter.addClass(constants_2.cssClasses.DISABLED);
                        this.adapter.closeMenu();
                      } else {
                        this.adapter.removeClass(constants_2.cssClasses.DISABLED);
                      }
                      if (this.leadingIcon) {
                        this.leadingIcon.setDisabled(this.disabled);
                      }
                      if (this.disabled) {
                        this.adapter.removeSelectAnchorAttr("tabindex");
                      } else {
                        this.adapter.setSelectAnchorAttr("tabindex", "0");
                      }
                      this.adapter.setSelectAnchorAttr("aria-disabled", this.disabled.toString());
                    };
                    MDCSelectFoundation2.prototype.openMenu = function() {
                      this.adapter.addClass(constants_2.cssClasses.ACTIVATED);
                      this.adapter.openMenu();
                      this.isMenuOpen = true;
                      this.adapter.setSelectAnchorAttr("aria-expanded", "true");
                    };
                    MDCSelectFoundation2.prototype.setHelperTextContent = function(content) {
                      if (this.helperText) {
                        this.helperText.setContent(content);
                      }
                    };
                    MDCSelectFoundation2.prototype.layout = function() {
                      if (this.adapter.hasLabel()) {
                        var optionHasValue = this.getValue().length > 0;
                        var isFocused = this.adapter.hasClass(constants_2.cssClasses.FOCUSED);
                        var shouldFloatAndNotch = optionHasValue || isFocused;
                        var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
                        this.notchOutline(shouldFloatAndNotch);
                        this.adapter.floatLabel(shouldFloatAndNotch);
                        this.adapter.setLabelRequired(isRequired);
                      }
                    };
                    MDCSelectFoundation2.prototype.layoutOptions = function() {
                      var menuItemValues = this.adapter.getMenuItemValues();
                      var selectedIndex = menuItemValues.indexOf(this.getValue());
                      this.setSelectedIndex(
                        selectedIndex,
                        /** closeMenu */
                        false,
                        /** skipNotify */
                        true
                      );
                    };
                    MDCSelectFoundation2.prototype.handleMenuOpened = function() {
                      if (this.adapter.getMenuItemValues().length === 0) {
                        return;
                      }
                      var selectedIndex = this.getSelectedIndex();
                      var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
                      this.adapter.focusMenuItemAtIndex(focusItemIndex);
                    };
                    MDCSelectFoundation2.prototype.handleMenuClosing = function() {
                      this.adapter.setSelectAnchorAttr("aria-expanded", "false");
                    };
                    MDCSelectFoundation2.prototype.handleMenuClosed = function() {
                      this.adapter.removeClass(constants_2.cssClasses.ACTIVATED);
                      this.isMenuOpen = false;
                      if (!this.adapter.isSelectAnchorFocused()) {
                        this.blur();
                      }
                    };
                    MDCSelectFoundation2.prototype.handleChange = function() {
                      this.layout();
                      this.adapter.notifyChange(this.getValue());
                      var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
                      if (isRequired && this.useDefaultValidation) {
                        this.setValid(this.isValid());
                      }
                    };
                    MDCSelectFoundation2.prototype.handleMenuItemAction = function(index) {
                      this.setSelectedIndex(
                        index,
                        /** closeMenu */
                        true
                      );
                    };
                    MDCSelectFoundation2.prototype.handleFocus = function() {
                      this.adapter.addClass(constants_2.cssClasses.FOCUSED);
                      this.layout();
                      this.adapter.activateBottomLine();
                    };
                    MDCSelectFoundation2.prototype.handleBlur = function() {
                      if (this.isMenuOpen) {
                        return;
                      }
                      this.blur();
                    };
                    MDCSelectFoundation2.prototype.handleClick = function(normalizedX) {
                      if (this.disabled || this.recentlyClicked) {
                        return;
                      }
                      this.setClickDebounceTimeout();
                      if (this.isMenuOpen) {
                        this.adapter.closeMenu();
                        return;
                      }
                      this.adapter.setRippleCenter(normalizedX);
                      this.openMenu();
                    };
                    MDCSelectFoundation2.prototype.handleKeydown = function(event) {
                      if (this.isMenuOpen || !this.adapter.hasClass(constants_2.cssClasses.FOCUSED)) {
                        return;
                      }
                      var isEnter = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ENTER;
                      var isSpace = keyboard_1.normalizeKey(event) === keyboard_1.KEY.SPACEBAR;
                      var arrowUp = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ARROW_UP;
                      var arrowDown = keyboard_1.normalizeKey(event) === keyboard_1.KEY.ARROW_DOWN;
                      var isModifier = event.ctrlKey || event.metaKey;
                      if (!isModifier && (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress())) {
                        var key = isSpace ? " " : event.key;
                        var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
                        if (typeaheadNextIndex >= 0) {
                          this.setSelectedIndex(typeaheadNextIndex);
                        }
                        event.preventDefault();
                        return;
                      }
                      if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
                        return;
                      }
                      this.openMenu();
                      event.preventDefault();
                    };
                    MDCSelectFoundation2.prototype.notchOutline = function(openNotch) {
                      if (!this.adapter.hasOutline()) {
                        return;
                      }
                      var isFocused = this.adapter.hasClass(constants_2.cssClasses.FOCUSED);
                      if (openNotch) {
                        var labelScale = constants_2.numbers.LABEL_SCALE;
                        var labelWidth = this.adapter.getLabelWidth() * labelScale;
                        this.adapter.notchOutline(labelWidth);
                      } else if (!isFocused) {
                        this.adapter.closeOutline();
                      }
                    };
                    MDCSelectFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
                      if (this.leadingIcon) {
                        this.leadingIcon.setAriaLabel(label);
                      }
                    };
                    MDCSelectFoundation2.prototype.setLeadingIconContent = function(content) {
                      if (this.leadingIcon) {
                        this.leadingIcon.setContent(content);
                      }
                    };
                    MDCSelectFoundation2.prototype.getUseDefaultValidation = function() {
                      return this.useDefaultValidation;
                    };
                    MDCSelectFoundation2.prototype.setUseDefaultValidation = function(useDefaultValidation) {
                      this.useDefaultValidation = useDefaultValidation;
                    };
                    MDCSelectFoundation2.prototype.setValid = function(isValid) {
                      if (!this.useDefaultValidation) {
                        this.customValidity = isValid;
                      }
                      this.adapter.setSelectAnchorAttr("aria-invalid", (!isValid).toString());
                      if (isValid) {
                        this.adapter.removeClass(constants_2.cssClasses.INVALID);
                        this.adapter.removeMenuClass(constants_2.cssClasses.MENU_INVALID);
                      } else {
                        this.adapter.addClass(constants_2.cssClasses.INVALID);
                        this.adapter.addMenuClass(constants_2.cssClasses.MENU_INVALID);
                      }
                      this.syncHelperTextValidity(isValid);
                    };
                    MDCSelectFoundation2.prototype.isValid = function() {
                      if (this.useDefaultValidation && this.adapter.hasClass(constants_2.cssClasses.REQUIRED) && !this.adapter.hasClass(constants_2.cssClasses.DISABLED)) {
                        return this.getSelectedIndex() !== constants_2.numbers.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
                      }
                      return this.customValidity;
                    };
                    MDCSelectFoundation2.prototype.setRequired = function(isRequired) {
                      if (isRequired) {
                        this.adapter.addClass(constants_2.cssClasses.REQUIRED);
                      } else {
                        this.adapter.removeClass(constants_2.cssClasses.REQUIRED);
                      }
                      this.adapter.setSelectAnchorAttr("aria-required", isRequired.toString());
                      this.adapter.setLabelRequired(isRequired);
                    };
                    MDCSelectFoundation2.prototype.getRequired = function() {
                      return this.adapter.getSelectAnchorAttr("aria-required") === "true";
                    };
                    MDCSelectFoundation2.prototype.init = function() {
                      var anchorEl = this.adapter.getAnchorElement();
                      if (anchorEl) {
                        this.adapter.setMenuAnchorElement(anchorEl);
                        this.adapter.setMenuAnchorCorner(constants_1.Corner.BOTTOM_START);
                      }
                      this.adapter.setMenuWrapFocus(false);
                      this.setDisabled(this.adapter.hasClass(constants_2.cssClasses.DISABLED));
                      this.syncHelperTextValidity(!this.adapter.hasClass(constants_2.cssClasses.INVALID));
                      this.layout();
                      this.layoutOptions();
                    };
                    MDCSelectFoundation2.prototype.blur = function() {
                      this.adapter.removeClass(constants_2.cssClasses.FOCUSED);
                      this.layout();
                      this.adapter.deactivateBottomLine();
                      var isRequired = this.adapter.hasClass(constants_2.cssClasses.REQUIRED);
                      if (isRequired && this.useDefaultValidation) {
                        this.setValid(this.isValid());
                      }
                    };
                    MDCSelectFoundation2.prototype.syncHelperTextValidity = function(isValid) {
                      if (!this.helperText) {
                        return;
                      }
                      this.helperText.setValidity(isValid);
                      var helperTextVisible = this.helperText.isVisible();
                      var helperTextId = this.helperText.getId();
                      if (helperTextVisible && helperTextId) {
                        this.adapter.setSelectAnchorAttr(constants_2.strings.ARIA_DESCRIBEDBY, helperTextId);
                      } else {
                        this.adapter.removeSelectAnchorAttr(constants_2.strings.ARIA_DESCRIBEDBY);
                      }
                    };
                    MDCSelectFoundation2.prototype.setClickDebounceTimeout = function() {
                      var _this = this;
                      clearTimeout(this.clickDebounceTimeout);
                      this.clickDebounceTimeout = setTimeout(function() {
                        _this.recentlyClicked = false;
                      }, constants_2.numbers.CLICK_DEBOUNCE_TIMEOUT_MS);
                      this.recentlyClicked = true;
                    };
                    return MDCSelectFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSelectFoundation = MDCSelectFoundation;
                exports2.default = MDCSelectFoundation;
              }
            ),
            /***/
            "./packages/mdc-select/helper-text/adapter.ts": (
              /*!****************************************************!*\
                !*** ./packages/mdc-select/helper-text/adapter.ts ***!
                \****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-select/helper-text/component.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-select/helper-text/component.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelectHelperText = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/helper-text/foundation.ts"
                );
                var MDCSelectHelperText = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelectHelperText2, _super);
                    function MDCSelectHelperText2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSelectHelperText2.attachTo = function(root) {
                      return new MDCSelectHelperText2(root);
                    };
                    Object.defineProperty(MDCSelectHelperText2.prototype, "foundationForSelect", {
                      // Provided for access by MDCSelect component
                      get: function get() {
                        return this.foundation;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelectHelperText2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        getAttr: function getAttr(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        setAttr: function setAttr(attr, value) {
                          return _this.root.setAttribute(attr, value);
                        },
                        removeAttr: function removeAttr(attr) {
                          return _this.root.removeAttribute(attr);
                        },
                        setContent: function setContent(content) {
                          _this.root.textContent = content;
                        }
                      };
                      return new foundation_1.MDCSelectHelperTextFoundation(adapter);
                    };
                    return MDCSelectHelperText2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSelectHelperText = MDCSelectHelperText;
              }
            ),
            /***/
            "./packages/mdc-select/helper-text/constants.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-select/helper-text/constants.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                var strings = {
                  ARIA_HIDDEN: "aria-hidden",
                  ROLE: "role"
                };
                exports2.strings = strings;
                var cssClasses = {
                  HELPER_TEXT_VALIDATION_MSG: "mdc-select-helper-text--validation-msg",
                  HELPER_TEXT_VALIDATION_MSG_PERSISTENT: "mdc-select-helper-text--validation-msg-persistent"
                };
                exports2.cssClasses = cssClasses;
              }
            ),
            /***/
            "./packages/mdc-select/helper-text/foundation.ts": (
              /*!*******************************************************!*\
                !*** ./packages/mdc-select/helper-text/foundation.ts ***!
                \*******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelectHelperTextFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/helper-text/constants.ts"
                );
                var MDCSelectHelperTextFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelectHelperTextFoundation2, _super);
                    function MDCSelectHelperTextFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCSelectHelperTextFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectHelperTextFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectHelperTextFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          getAttr: function getAttr() {
                            return null;
                          },
                          removeAttr: function removeAttr() {
                            return void 0;
                          },
                          setContent: function setContent() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelectHelperTextFoundation2.prototype.getId = function() {
                      return this.adapter.getAttr("id");
                    };
                    MDCSelectHelperTextFoundation2.prototype.isVisible = function() {
                      return this.adapter.getAttr(constants_1.strings.ARIA_HIDDEN) !== "true";
                    };
                    MDCSelectHelperTextFoundation2.prototype.setContent = function(content) {
                      this.adapter.setContent(content);
                    };
                    MDCSelectHelperTextFoundation2.prototype.setValidation = function(isValidation) {
                      if (isValidation) {
                        this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      }
                    };
                    MDCSelectHelperTextFoundation2.prototype.setValidationMsgPersistent = function(isPersistent) {
                      if (isPersistent) {
                        this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
                      }
                    };
                    MDCSelectHelperTextFoundation2.prototype.getIsValidation = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                    };
                    MDCSelectHelperTextFoundation2.prototype.getIsValidationMsgPersistent = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
                    };
                    MDCSelectHelperTextFoundation2.prototype.setValidity = function(selectIsValid) {
                      var isValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      if (!isValidationMsg) {
                        return;
                      }
                      var isPersistentValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
                      var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
                      if (msgShouldDisplay) {
                        this.showToScreenReader();
                        if (!selectIsValid) {
                          this.adapter.setAttr(constants_1.strings.ROLE, "alert");
                        } else {
                          this.adapter.removeAttr(constants_1.strings.ROLE);
                        }
                        return;
                      }
                      this.adapter.removeAttr(constants_1.strings.ROLE);
                      this.hide();
                    };
                    MDCSelectHelperTextFoundation2.prototype.showToScreenReader = function() {
                      this.adapter.removeAttr(constants_1.strings.ARIA_HIDDEN);
                    };
                    MDCSelectHelperTextFoundation2.prototype.hide = function() {
                      this.adapter.setAttr(constants_1.strings.ARIA_HIDDEN, "true");
                    };
                    return MDCSelectHelperTextFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSelectHelperTextFoundation = MDCSelectHelperTextFoundation;
                exports2.default = MDCSelectHelperTextFoundation;
              }
            ),
            /***/
            "./packages/mdc-select/helper-text/index.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-select/helper-text/index.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.helperTextStrings = exports2.helperTextCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-select/helper-text/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-select/helper-text/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/helper-text/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/helper-text/constants.ts"
                );
                Object.defineProperty(exports2, "helperTextCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "helperTextStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-select/icon/adapter.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-select/icon/adapter.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-select/icon/component.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-select/icon/component.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelectIcon = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/icon/foundation.ts"
                );
                var MDCSelectIcon = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelectIcon2, _super);
                    function MDCSelectIcon2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSelectIcon2.attachTo = function(root) {
                      return new MDCSelectIcon2(root);
                    };
                    Object.defineProperty(MDCSelectIcon2.prototype, "foundationForSelect", {
                      // Provided for access by MDCSelect component
                      get: function get() {
                        return this.foundation;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelectIcon2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        getAttr: function getAttr(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        setAttr: function setAttr(attr, value) {
                          return _this.root.setAttribute(attr, value);
                        },
                        removeAttr: function removeAttr(attr) {
                          return _this.root.removeAttribute(attr);
                        },
                        setContent: function setContent(content) {
                          _this.root.textContent = content;
                        },
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          return _this.listen(evtType, handler);
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          return _this.unlisten(evtType, handler);
                        },
                        notifyIconAction: function notifyIconAction() {
                          return _this.emit(
                            foundation_1.MDCSelectIconFoundation.strings.ICON_EVENT,
                            {},
                            true
                            /* shouldBubble */
                          );
                        }
                      };
                      return new foundation_1.MDCSelectIconFoundation(adapter);
                    };
                    return MDCSelectIcon2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSelectIcon = MDCSelectIcon;
              }
            ),
            /***/
            "./packages/mdc-select/icon/constants.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-select/icon/constants.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = void 0;
                var strings = {
                  ICON_EVENT: "MDCSelect:icon",
                  ICON_ROLE: "button"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-select/icon/foundation.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-select/icon/foundation.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSelectIconFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/icon/constants.ts"
                );
                var INTERACTION_EVENTS = ["click", "keydown"];
                var MDCSelectIconFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSelectIconFoundation2, _super);
                    function MDCSelectIconFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCSelectIconFoundation2.defaultAdapter), adapter)) || this;
                      _this.savedTabIndex = null;
                      _this.interactionHandler = function(evt) {
                        _this.handleInteraction(evt);
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCSelectIconFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSelectIconFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          getAttr: function getAttr() {
                            return null;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          removeAttr: function removeAttr() {
                            return void 0;
                          },
                          setContent: function setContent() {
                            return void 0;
                          },
                          registerInteractionHandler: function registerInteractionHandler() {
                            return void 0;
                          },
                          deregisterInteractionHandler: function deregisterInteractionHandler() {
                            return void 0;
                          },
                          notifyIconAction: function notifyIconAction() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSelectIconFoundation2.prototype.init = function() {
                      var e_1, _a;
                      this.savedTabIndex = this.adapter.getAttr("tabindex");
                      try {
                        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                          var evtType = INTERACTION_EVENTS_1_1.value;
                          this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return))
                            _a.call(INTERACTION_EVENTS_1);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    MDCSelectIconFoundation2.prototype.destroy = function() {
                      var e_2, _a;
                      try {
                        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                          var evtType = INTERACTION_EVENTS_2_1.value;
                          this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return))
                            _a.call(INTERACTION_EVENTS_2);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                    };
                    MDCSelectIconFoundation2.prototype.setDisabled = function(disabled) {
                      if (!this.savedTabIndex) {
                        return;
                      }
                      if (disabled) {
                        this.adapter.setAttr("tabindex", "-1");
                        this.adapter.removeAttr("role");
                      } else {
                        this.adapter.setAttr("tabindex", this.savedTabIndex);
                        this.adapter.setAttr("role", constants_1.strings.ICON_ROLE);
                      }
                    };
                    MDCSelectIconFoundation2.prototype.setAriaLabel = function(label) {
                      this.adapter.setAttr("aria-label", label);
                    };
                    MDCSelectIconFoundation2.prototype.setContent = function(content) {
                      this.adapter.setContent(content);
                    };
                    MDCSelectIconFoundation2.prototype.handleInteraction = function(evt) {
                      var isEnterKey = evt.key === "Enter" || evt.keyCode === 13;
                      if (evt.type === "click" || isEnterKey) {
                        this.adapter.notifyIconAction();
                      }
                    };
                    return MDCSelectIconFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSelectIconFoundation = MDCSelectIconFoundation;
                exports2.default = MDCSelectIconFoundation;
              }
            ),
            /***/
            "./packages/mdc-select/icon/index.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-select/icon/index.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.iconStrings = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-select/icon/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-select/icon/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/icon/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/icon/constants.ts"
                );
                Object.defineProperty(exports2, "iconStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-select/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-select/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-select/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-select/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-select/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-select/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-select/types.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./helper-text/index */
                  "./packages/mdc-select/helper-text/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./icon/index */
                  "./packages/mdc-select/icon/index.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-select/types.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-select/types.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-slider/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-slider/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-slider/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-slider/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSlider = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-slider/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-slider/foundation.ts"
                );
                var types_1 = __webpack_require__(
                  /*! ./types */
                  "./packages/mdc-slider/types.ts"
                );
                var MDCSlider = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSlider2, _super);
                    function MDCSlider2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.skipInitialUIUpdate = false;
                      _this.valueToAriaValueTextFn = null;
                      return _this;
                    }
                    MDCSlider2.attachTo = function(root, options) {
                      if (options === void 0) {
                        options = {};
                      }
                      return new MDCSlider2(root, void 0, options);
                    };
                    MDCSlider2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        addThumbClass: function addThumbClass(className, thumb) {
                          _this.getThumbEl(thumb).classList.add(className);
                        },
                        removeThumbClass: function removeThumbClass(className, thumb) {
                          _this.getThumbEl(thumb).classList.remove(className);
                        },
                        getAttribute: function getAttribute(attribute) {
                          return _this.root.getAttribute(attribute);
                        },
                        getInputValue: function getInputValue(thumb) {
                          return _this.getInput(thumb).value;
                        },
                        setInputValue: function setInputValue(value, thumb) {
                          _this.getInput(thumb).value = value;
                        },
                        getInputAttribute: function getInputAttribute(attribute, thumb) {
                          return _this.getInput(thumb).getAttribute(attribute);
                        },
                        setInputAttribute: function setInputAttribute(attribute, value, thumb) {
                          _this.getInput(thumb).setAttribute(attribute, value);
                        },
                        removeInputAttribute: function removeInputAttribute(attribute, thumb) {
                          _this.getInput(thumb).removeAttribute(attribute);
                        },
                        focusInput: function focusInput(thumb) {
                          _this.getInput(thumb).focus();
                        },
                        isInputFocused: function isInputFocused(thumb) {
                          return _this.getInput(thumb) === document.activeElement;
                        },
                        shouldHideFocusStylesForPointerEvents: function shouldHideFocusStylesForPointerEvents() {
                          return false;
                        },
                        getThumbKnobWidth: function getThumbKnobWidth(thumb) {
                          return _this.getThumbEl(thumb).querySelector("." + constants_1.cssClasses.THUMB_KNOB).getBoundingClientRect().width;
                        },
                        getThumbBoundingClientRect: function getThumbBoundingClientRect(thumb) {
                          return _this.getThumbEl(thumb).getBoundingClientRect();
                        },
                        getBoundingClientRect: function getBoundingClientRect() {
                          return _this.root.getBoundingClientRect();
                        },
                        getValueIndicatorContainerWidth: function getValueIndicatorContainerWidth(thumb) {
                          return _this.getThumbEl(thumb).querySelector("." + constants_1.cssClasses.VALUE_INDICATOR_CONTAINER).getBoundingClientRect().width;
                        },
                        isRTL: function isRTL() {
                          return getComputedStyle(_this.root).direction === "rtl";
                        },
                        setThumbStyleProperty: function setThumbStyleProperty(propertyName, value, thumb) {
                          _this.getThumbEl(thumb).style.setProperty(propertyName, value);
                        },
                        removeThumbStyleProperty: function removeThumbStyleProperty(propertyName, thumb) {
                          _this.getThumbEl(thumb).style.removeProperty(propertyName);
                        },
                        setTrackActiveStyleProperty: function setTrackActiveStyleProperty(propertyName, value) {
                          _this.trackActive.style.setProperty(propertyName, value);
                        },
                        removeTrackActiveStyleProperty: function removeTrackActiveStyleProperty(propertyName) {
                          _this.trackActive.style.removeProperty(propertyName);
                        },
                        setValueIndicatorText: function setValueIndicatorText(value, thumb) {
                          var valueIndicatorEl = _this.getThumbEl(thumb).querySelector("." + constants_1.cssClasses.VALUE_INDICATOR_TEXT);
                          valueIndicatorEl.textContent = String(value);
                        },
                        getValueToAriaValueTextFn: function getValueToAriaValueTextFn() {
                          return _this.valueToAriaValueTextFn;
                        },
                        updateTickMarks: function updateTickMarks(tickMarks) {
                          var tickMarksContainer = _this.root.querySelector("." + constants_1.cssClasses.TICK_MARKS_CONTAINER);
                          if (!tickMarksContainer) {
                            tickMarksContainer = document.createElement("div");
                            tickMarksContainer.classList.add(constants_1.cssClasses.TICK_MARKS_CONTAINER);
                            var track = _this.root.querySelector("." + constants_1.cssClasses.TRACK);
                            track.appendChild(tickMarksContainer);
                          }
                          if (tickMarks.length !== tickMarksContainer.children.length) {
                            while (tickMarksContainer.firstChild) {
                              tickMarksContainer.removeChild(tickMarksContainer.firstChild);
                            }
                            _this.addTickMarks(tickMarksContainer, tickMarks);
                          } else {
                            _this.updateTickMarks(tickMarksContainer, tickMarks);
                          }
                        },
                        setPointerCapture: function setPointerCapture(pointerId) {
                          _this.root.setPointerCapture(pointerId);
                        },
                        emitChangeEvent: function emitChangeEvent(value, thumb) {
                          _this.emit(constants_1.events.CHANGE, { value, thumb });
                        },
                        emitInputEvent: function emitInputEvent(value, thumb) {
                          _this.emit(constants_1.events.INPUT, { value, thumb });
                        },
                        emitDragStartEvent: function emitDragStartEvent(_, thumb) {
                          _this.getRipple(thumb).activate();
                        },
                        emitDragEndEvent: function emitDragEndEvent(_, thumb) {
                          _this.getRipple(thumb).deactivate();
                        },
                        registerEventHandler: function registerEventHandler(evtType, handler) {
                          _this.listen(evtType, handler);
                        },
                        deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
                          _this.unlisten(evtType, handler);
                        },
                        registerThumbEventHandler: function registerThumbEventHandler(thumb, evtType, handler) {
                          _this.getThumbEl(thumb).addEventListener(evtType, handler);
                        },
                        deregisterThumbEventHandler: function deregisterThumbEventHandler(thumb, evtType, handler) {
                          _this.getThumbEl(thumb).removeEventListener(evtType, handler);
                        },
                        registerInputEventHandler: function registerInputEventHandler(thumb, evtType, handler) {
                          _this.getInput(thumb).addEventListener(evtType, handler);
                        },
                        deregisterInputEventHandler: function deregisterInputEventHandler(thumb, evtType, handler) {
                          _this.getInput(thumb).removeEventListener(evtType, handler);
                        },
                        registerBodyEventHandler: function registerBodyEventHandler(evtType, handler) {
                          document.body.addEventListener(evtType, handler);
                        },
                        deregisterBodyEventHandler: function deregisterBodyEventHandler(evtType, handler) {
                          document.body.removeEventListener(evtType, handler);
                        },
                        registerWindowEventHandler: function registerWindowEventHandler(evtType, handler) {
                          window.addEventListener(evtType, handler);
                        },
                        deregisterWindowEventHandler: function deregisterWindowEventHandler(evtType, handler) {
                          window.removeEventListener(evtType, handler);
                        }
                      };
                      return new foundation_2.MDCSliderFoundation(adapter);
                    };
                    MDCSlider2.prototype.initialize = function(_a) {
                      var _b = _a === void 0 ? {} : _a, skipInitialUIUpdate = _b.skipInitialUIUpdate;
                      this.inputs = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.INPUT));
                      this.thumbs = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.THUMB));
                      this.trackActive = this.root.querySelector("." + constants_1.cssClasses.TRACK_ACTIVE);
                      this.ripples = this.createRipples();
                      if (skipInitialUIUpdate) {
                        this.skipInitialUIUpdate = true;
                      }
                    };
                    MDCSlider2.prototype.initialSyncWithDOM = function() {
                      this.foundation.layout({ skipUpdateUI: this.skipInitialUIUpdate });
                    };
                    MDCSlider2.prototype.layout = function() {
                      this.foundation.layout();
                    };
                    MDCSlider2.prototype.getValueStart = function() {
                      return this.foundation.getValueStart();
                    };
                    MDCSlider2.prototype.setValueStart = function(valueStart) {
                      this.foundation.setValueStart(valueStart);
                    };
                    MDCSlider2.prototype.getValue = function() {
                      return this.foundation.getValue();
                    };
                    MDCSlider2.prototype.setValue = function(value) {
                      this.foundation.setValue(value);
                    };
                    MDCSlider2.prototype.getDisabled = function() {
                      return this.foundation.getDisabled();
                    };
                    MDCSlider2.prototype.setDisabled = function(disabled) {
                      this.foundation.setDisabled(disabled);
                    };
                    MDCSlider2.prototype.setValueToAriaValueTextFn = function(mapFn) {
                      this.valueToAriaValueTextFn = mapFn;
                    };
                    MDCSlider2.prototype.getThumbEl = function(thumb) {
                      return thumb === types_1.Thumb.END ? this.thumbs[this.thumbs.length - 1] : this.thumbs[0];
                    };
                    MDCSlider2.prototype.getInput = function(thumb) {
                      return thumb === types_1.Thumb.END ? this.inputs[this.inputs.length - 1] : this.inputs[0];
                    };
                    MDCSlider2.prototype.getRipple = function(thumb) {
                      return thumb === types_1.Thumb.END ? this.ripples[this.ripples.length - 1] : this.ripples[0];
                    };
                    MDCSlider2.prototype.addTickMarks = function(tickMarkContainer, tickMarks) {
                      var fragment = document.createDocumentFragment();
                      for (var i = 0; i < tickMarks.length; i++) {
                        var div = document.createElement("div");
                        var tickMarkClass = tickMarks[i] === types_1.TickMark.ACTIVE ? constants_1.cssClasses.TICK_MARK_ACTIVE : constants_1.cssClasses.TICK_MARK_INACTIVE;
                        div.classList.add(tickMarkClass);
                        fragment.appendChild(div);
                      }
                      tickMarkContainer.appendChild(fragment);
                    };
                    MDCSlider2.prototype.updateTickMarks = function(tickMarkContainer, tickMarks) {
                      var tickMarkEls = Array.from(tickMarkContainer.children);
                      for (var i = 0; i < tickMarkEls.length; i++) {
                        if (tickMarks[i] === types_1.TickMark.ACTIVE) {
                          tickMarkEls[i].classList.add(constants_1.cssClasses.TICK_MARK_ACTIVE);
                          tickMarkEls[i].classList.remove(constants_1.cssClasses.TICK_MARK_INACTIVE);
                        } else {
                          tickMarkEls[i].classList.add(constants_1.cssClasses.TICK_MARK_INACTIVE);
                          tickMarkEls[i].classList.remove(constants_1.cssClasses.TICK_MARK_ACTIVE);
                        }
                      }
                    };
                    MDCSlider2.prototype.createRipples = function() {
                      var ripples = [];
                      var rippleSurfaces = [].slice.call(this.root.querySelectorAll("." + constants_1.cssClasses.THUMB));
                      var _loop_1 = function _loop_12(i2) {
                        var rippleSurface = rippleSurfaces[i2];
                        var input = this_1.inputs[i2];
                        var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this_1)), { addClass: function addClass(className) {
                          rippleSurface.classList.add(className);
                        }, computeBoundingRect: function computeBoundingRect() {
                          return rippleSurface.getBoundingClientRect();
                        }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          input.removeEventListener(evtType, handler);
                        }, isSurfaceActive: function isSurfaceActive() {
                          return ponyfill_1.matches(input, ":active");
                        }, isUnbounded: function isUnbounded() {
                          return true;
                        }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          input.addEventListener(evtType, handler, events_1.applyPassive());
                        }, removeClass: function removeClass(className) {
                          rippleSurface.classList.remove(className);
                        }, updateCssVariable: function updateCssVariable(varName, value) {
                          rippleSurface.style.setProperty(varName, value);
                        } });
                        var ripple = new component_2.MDCRipple(rippleSurface, new foundation_1.MDCRippleFoundation(adapter));
                        ripple.unbounded = true;
                        ripples.push(ripple);
                      };
                      var this_1 = this;
                      for (var i = 0; i < rippleSurfaces.length; i++) {
                        _loop_1(i);
                      }
                      return ripples;
                    };
                    return MDCSlider2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSlider = MDCSlider;
              }
            ),
            /***/
            "./packages/mdc-slider/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-slider/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.events = exports2.attributes = exports2.numbers = exports2.cssClasses = void 0;
                exports2.cssClasses = {
                  DISABLED: "mdc-slider--disabled",
                  DISCRETE: "mdc-slider--discrete",
                  INPUT: "mdc-slider__input",
                  RANGE: "mdc-slider--range",
                  THUMB: "mdc-slider__thumb",
                  // Applied when thumb is in the focused state.
                  THUMB_FOCUSED: "mdc-slider__thumb--focused",
                  THUMB_KNOB: "mdc-slider__thumb-knob",
                  // Class added to the top thumb (for overlapping thumbs in range slider).
                  THUMB_TOP: "mdc-slider__thumb--top",
                  THUMB_WITH_INDICATOR: "mdc-slider__thumb--with-indicator",
                  TICK_MARKS: "mdc-slider--tick-marks",
                  TICK_MARKS_CONTAINER: "mdc-slider__tick-marks",
                  TICK_MARK_ACTIVE: "mdc-slider__tick-mark--active",
                  TICK_MARK_INACTIVE: "mdc-slider__tick-mark--inactive",
                  TRACK: "mdc-slider__track",
                  // The active track fill element that will be scaled as the value changes.
                  TRACK_ACTIVE: "mdc-slider__track--active_fill",
                  VALUE_INDICATOR_CONTAINER: "mdc-slider__value-indicator-container",
                  VALUE_INDICATOR_TEXT: "mdc-slider__value-indicator-text"
                };
                exports2.numbers = {
                  // Default step size.
                  STEP_SIZE: 1,
                  // Default minimum difference between the start and end values.
                  MIN_RANGE: 0,
                  // Minimum absolute difference between clientX of move event / down event
                  // for which to update thumb, in the case of overlapping thumbs.
                  // This is needed to reduce chances of choosing the thumb based on
                  // pointer jitter.
                  THUMB_UPDATE_MIN_PX: 5
                };
                exports2.attributes = {
                  ARIA_VALUETEXT: "aria-valuetext",
                  INPUT_DISABLED: "disabled",
                  INPUT_MIN: "min",
                  INPUT_MAX: "max",
                  INPUT_VALUE: "value",
                  INPUT_STEP: "step",
                  DATA_MIN_RANGE: "data-min-range"
                };
                exports2.events = {
                  CHANGE: "MDCSlider:change",
                  INPUT: "MDCSlider:input"
                };
                exports2.strings = {
                  VAR_VALUE_INDICATOR_CARET_LEFT: "--slider-value-indicator-caret-left",
                  VAR_VALUE_INDICATOR_CARET_RIGHT: "--slider-value-indicator-caret-right",
                  VAR_VALUE_INDICATOR_CARET_TRANSFORM: "--slider-value-indicator-caret-transform",
                  VAR_VALUE_INDICATOR_CONTAINER_LEFT: "--slider-value-indicator-container-left",
                  VAR_VALUE_INDICATOR_CONTAINER_RIGHT: "--slider-value-indicator-container-right",
                  VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM: "--slider-value-indicator-container-transform"
                };
              }
            ),
            /***/
            "./packages/mdc-slider/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-slider/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSliderFoundation = void 0;
                var animationframe_1 = __webpack_require__(
                  /*! @material/animation/animationframe */
                  "./packages/mdc-animation/animationframe.ts"
                );
                var util_1 = __webpack_require__(
                  /*! @material/animation/util */
                  "./packages/mdc-animation/util.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-slider/constants.ts"
                );
                var types_1 = __webpack_require__(
                  /*! ./types */
                  "./packages/mdc-slider/types.ts"
                );
                var AnimationKeys;
                (function(AnimationKeys2) {
                  AnimationKeys2["SLIDER_UPDATE"] = "slider_update";
                })(AnimationKeys || (AnimationKeys = {}));
                var HAS_WINDOW = typeof window !== "undefined";
                var MDCSliderFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSliderFoundation2, _super);
                    function MDCSliderFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation2.defaultAdapter), adapter)) || this;
                      _this.initialStylesRemoved = false;
                      _this.isDisabled = false;
                      _this.isDiscrete = false;
                      _this.step = constants_1.numbers.STEP_SIZE;
                      _this.minRange = constants_1.numbers.MIN_RANGE;
                      _this.hasTickMarks = false;
                      _this.isRange = false;
                      _this.thumb = null;
                      _this.downEventClientX = null;
                      _this.startThumbKnobWidth = 0;
                      _this.endThumbKnobWidth = 0;
                      _this.animFrame = new animationframe_1.AnimationFrame();
                      return _this;
                    }
                    Object.defineProperty(MDCSliderFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          hasClass: function hasClass() {
                            return false;
                          },
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          addThumbClass: function addThumbClass() {
                            return void 0;
                          },
                          removeThumbClass: function removeThumbClass() {
                            return void 0;
                          },
                          getAttribute: function getAttribute() {
                            return null;
                          },
                          getInputValue: function getInputValue() {
                            return "";
                          },
                          setInputValue: function setInputValue() {
                            return void 0;
                          },
                          getInputAttribute: function getInputAttribute() {
                            return null;
                          },
                          setInputAttribute: function setInputAttribute() {
                            return null;
                          },
                          removeInputAttribute: function removeInputAttribute() {
                            return null;
                          },
                          focusInput: function focusInput() {
                            return void 0;
                          },
                          isInputFocused: function isInputFocused() {
                            return false;
                          },
                          shouldHideFocusStylesForPointerEvents: function shouldHideFocusStylesForPointerEvents() {
                            return false;
                          },
                          getThumbKnobWidth: function getThumbKnobWidth() {
                            return 0;
                          },
                          getValueIndicatorContainerWidth: function getValueIndicatorContainerWidth() {
                            return 0;
                          },
                          getThumbBoundingClientRect: function getThumbBoundingClientRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          getBoundingClientRect: function getBoundingClientRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          isRTL: function isRTL() {
                            return false;
                          },
                          setThumbStyleProperty: function setThumbStyleProperty() {
                            return void 0;
                          },
                          removeThumbStyleProperty: function removeThumbStyleProperty() {
                            return void 0;
                          },
                          setTrackActiveStyleProperty: function setTrackActiveStyleProperty() {
                            return void 0;
                          },
                          removeTrackActiveStyleProperty: function removeTrackActiveStyleProperty() {
                            return void 0;
                          },
                          setValueIndicatorText: function setValueIndicatorText() {
                            return void 0;
                          },
                          getValueToAriaValueTextFn: function getValueToAriaValueTextFn() {
                            return null;
                          },
                          updateTickMarks: function updateTickMarks() {
                            return void 0;
                          },
                          setPointerCapture: function setPointerCapture() {
                            return void 0;
                          },
                          emitChangeEvent: function emitChangeEvent() {
                            return void 0;
                          },
                          emitInputEvent: function emitInputEvent() {
                            return void 0;
                          },
                          emitDragStartEvent: function emitDragStartEvent() {
                            return void 0;
                          },
                          emitDragEndEvent: function emitDragEndEvent() {
                            return void 0;
                          },
                          registerEventHandler: function registerEventHandler() {
                            return void 0;
                          },
                          deregisterEventHandler: function deregisterEventHandler() {
                            return void 0;
                          },
                          registerThumbEventHandler: function registerThumbEventHandler() {
                            return void 0;
                          },
                          deregisterThumbEventHandler: function deregisterThumbEventHandler() {
                            return void 0;
                          },
                          registerInputEventHandler: function registerInputEventHandler() {
                            return void 0;
                          },
                          deregisterInputEventHandler: function deregisterInputEventHandler() {
                            return void 0;
                          },
                          registerBodyEventHandler: function registerBodyEventHandler() {
                            return void 0;
                          },
                          deregisterBodyEventHandler: function deregisterBodyEventHandler() {
                            return void 0;
                          },
                          registerWindowEventHandler: function registerWindowEventHandler() {
                            return void 0;
                          },
                          deregisterWindowEventHandler: function deregisterWindowEventHandler() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSliderFoundation2.prototype.init = function() {
                      var _this = this;
                      this.isDisabled = this.adapter.hasClass(constants_1.cssClasses.DISABLED);
                      this.isDiscrete = this.adapter.hasClass(constants_1.cssClasses.DISCRETE);
                      this.hasTickMarks = this.adapter.hasClass(constants_1.cssClasses.TICK_MARKS);
                      this.isRange = this.adapter.hasClass(constants_1.cssClasses.RANGE);
                      var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_MIN, this.isRange ? types_1.Thumb.START : types_1.Thumb.END), constants_1.attributes.INPUT_MIN);
                      var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_MAX, types_1.Thumb.END), constants_1.attributes.INPUT_MAX);
                      var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_VALUE, types_1.Thumb.END), constants_1.attributes.INPUT_VALUE);
                      var valueStart = this.isRange ? this.convertAttributeValueToNumber(this.adapter.getInputAttribute(constants_1.attributes.INPUT_VALUE, types_1.Thumb.START), constants_1.attributes.INPUT_VALUE) : min;
                      var stepAttr = this.adapter.getInputAttribute(constants_1.attributes.INPUT_STEP, types_1.Thumb.END);
                      var step = stepAttr ? this.convertAttributeValueToNumber(stepAttr, constants_1.attributes.INPUT_STEP) : this.step;
                      var minRangeAttr = this.adapter.getAttribute(constants_1.attributes.DATA_MIN_RANGE);
                      var minRange = minRangeAttr ? this.convertAttributeValueToNumber(minRangeAttr, constants_1.attributes.DATA_MIN_RANGE) : this.minRange;
                      this.validateProperties({ min, max, value, valueStart, step, minRange });
                      this.min = min;
                      this.max = max;
                      this.value = value;
                      this.valueStart = valueStart;
                      this.step = step;
                      this.minRange = minRange;
                      this.numDecimalPlaces = getNumDecimalPlaces(this.step);
                      this.valueBeforeDownEvent = value;
                      this.valueStartBeforeDownEvent = valueStart;
                      this.mousedownOrTouchstartListener = this.handleMousedownOrTouchstart.bind(this);
                      this.moveListener = this.handleMove.bind(this);
                      this.pointerdownListener = this.handlePointerdown.bind(this);
                      this.pointerupListener = this.handlePointerup.bind(this);
                      this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
                      this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
                      this.inputStartChangeListener = function() {
                        _this.handleInputChange(types_1.Thumb.START);
                      };
                      this.inputEndChangeListener = function() {
                        _this.handleInputChange(types_1.Thumb.END);
                      };
                      this.inputStartFocusListener = function() {
                        _this.handleInputFocus(types_1.Thumb.START);
                      };
                      this.inputEndFocusListener = function() {
                        _this.handleInputFocus(types_1.Thumb.END);
                      };
                      this.inputStartBlurListener = function() {
                        _this.handleInputBlur(types_1.Thumb.START);
                      };
                      this.inputEndBlurListener = function() {
                        _this.handleInputBlur(types_1.Thumb.END);
                      };
                      this.resizeListener = this.handleResize.bind(this);
                      this.registerEventHandlers();
                    };
                    MDCSliderFoundation2.prototype.destroy = function() {
                      this.deregisterEventHandlers();
                    };
                    MDCSliderFoundation2.prototype.setMin = function(value) {
                      this.min = value;
                      if (!this.isRange) {
                        this.valueStart = value;
                      }
                      this.updateUI();
                    };
                    MDCSliderFoundation2.prototype.setMax = function(value) {
                      this.max = value;
                      this.updateUI();
                    };
                    MDCSliderFoundation2.prototype.getMin = function() {
                      return this.min;
                    };
                    MDCSliderFoundation2.prototype.getMax = function() {
                      return this.max;
                    };
                    MDCSliderFoundation2.prototype.getValue = function() {
                      return this.value;
                    };
                    MDCSliderFoundation2.prototype.setValue = function(value) {
                      if (this.isRange && value < this.valueStart + this.minRange) {
                        throw new Error("end thumb value (" + value + ") must be >= start thumb " + ("value (" + this.valueStart + ") + min range (" + this.minRange + ")"));
                      }
                      this.updateValue(value, types_1.Thumb.END);
                    };
                    MDCSliderFoundation2.prototype.getValueStart = function() {
                      if (!this.isRange) {
                        throw new Error("`valueStart` is only applicable for range sliders.");
                      }
                      return this.valueStart;
                    };
                    MDCSliderFoundation2.prototype.setValueStart = function(valueStart) {
                      if (!this.isRange) {
                        throw new Error("`valueStart` is only applicable for range sliders.");
                      }
                      if (this.isRange && valueStart > this.value - this.minRange) {
                        throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " + ("value (" + this.value + ") - min range (" + this.minRange + ")"));
                      }
                      this.updateValue(valueStart, types_1.Thumb.START);
                    };
                    MDCSliderFoundation2.prototype.setStep = function(value) {
                      this.step = value;
                      this.numDecimalPlaces = getNumDecimalPlaces(value);
                      this.updateUI();
                    };
                    MDCSliderFoundation2.prototype.setMinRange = function(value) {
                      if (!this.isRange) {
                        throw new Error("`minRange` is only applicable for range sliders.");
                      }
                      if (value < 0) {
                        throw new Error("`minRange` must be non-negative. " + ("Current value: " + value));
                      }
                      if (this.value - this.valueStart < value) {
                        throw new Error("start thumb value (" + this.valueStart + ") and end thumb value " + ("(" + this.value + ") must differ by at least " + value + "."));
                      }
                      this.minRange = value;
                    };
                    MDCSliderFoundation2.prototype.setIsDiscrete = function(value) {
                      this.isDiscrete = value;
                      this.updateValueIndicatorUI();
                      this.updateTickMarksUI();
                    };
                    MDCSliderFoundation2.prototype.getStep = function() {
                      return this.step;
                    };
                    MDCSliderFoundation2.prototype.getMinRange = function() {
                      if (!this.isRange) {
                        throw new Error("`minRange` is only applicable for range sliders.");
                      }
                      return this.minRange;
                    };
                    MDCSliderFoundation2.prototype.setHasTickMarks = function(value) {
                      this.hasTickMarks = value;
                      this.updateTickMarksUI();
                    };
                    MDCSliderFoundation2.prototype.getDisabled = function() {
                      return this.isDisabled;
                    };
                    MDCSliderFoundation2.prototype.setDisabled = function(disabled) {
                      this.isDisabled = disabled;
                      if (disabled) {
                        this.adapter.addClass(constants_1.cssClasses.DISABLED);
                        if (this.isRange) {
                          this.adapter.setInputAttribute(constants_1.attributes.INPUT_DISABLED, "", types_1.Thumb.START);
                        }
                        this.adapter.setInputAttribute(constants_1.attributes.INPUT_DISABLED, "", types_1.Thumb.END);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.DISABLED);
                        if (this.isRange) {
                          this.adapter.removeInputAttribute(constants_1.attributes.INPUT_DISABLED, types_1.Thumb.START);
                        }
                        this.adapter.removeInputAttribute(constants_1.attributes.INPUT_DISABLED, types_1.Thumb.END);
                      }
                    };
                    MDCSliderFoundation2.prototype.getIsRange = function() {
                      return this.isRange;
                    };
                    MDCSliderFoundation2.prototype.layout = function(_a) {
                      var _b = _a === void 0 ? {} : _a, skipUpdateUI = _b.skipUpdateUI;
                      this.rect = this.adapter.getBoundingClientRect();
                      if (this.isRange) {
                        this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(types_1.Thumb.START);
                        this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(types_1.Thumb.END);
                      }
                      if (!skipUpdateUI) {
                        this.updateUI();
                      }
                    };
                    MDCSliderFoundation2.prototype.handleResize = function() {
                      this.layout();
                    };
                    MDCSliderFoundation2.prototype.handleDown = function(event) {
                      if (this.isDisabled)
                        return;
                      this.valueStartBeforeDownEvent = this.valueStart;
                      this.valueBeforeDownEvent = this.value;
                      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
                      this.downEventClientX = clientX;
                      var value = this.mapClientXOnSliderScale(clientX);
                      this.thumb = this.getThumbFromDownEvent(clientX, value);
                      if (this.thumb === null)
                        return;
                      this.handleDragStart(event, value, this.thumb);
                      this.updateValue(value, this.thumb, { emitInputEvent: true });
                    };
                    MDCSliderFoundation2.prototype.handleMove = function(event) {
                      if (this.isDisabled)
                        return;
                      event.preventDefault();
                      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
                      var dragAlreadyStarted = this.thumb != null;
                      this.thumb = this.getThumbFromMoveEvent(clientX);
                      if (this.thumb === null)
                        return;
                      var value = this.mapClientXOnSliderScale(clientX);
                      if (!dragAlreadyStarted) {
                        this.handleDragStart(event, value, this.thumb);
                        this.adapter.emitDragStartEvent(value, this.thumb);
                      }
                      this.updateValue(value, this.thumb, { emitInputEvent: true });
                    };
                    MDCSliderFoundation2.prototype.handleUp = function() {
                      var _a, _b;
                      if (this.isDisabled || this.thumb === null)
                        return;
                      if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
                        this.handleInputBlur(this.thumb);
                      }
                      var oldValue = this.thumb === types_1.Thumb.START ? this.valueStartBeforeDownEvent : this.valueBeforeDownEvent;
                      var newValue = this.thumb === types_1.Thumb.START ? this.valueStart : this.value;
                      if (oldValue !== newValue) {
                        this.adapter.emitChangeEvent(newValue, this.thumb);
                      }
                      this.adapter.emitDragEndEvent(newValue, this.thumb);
                      this.thumb = null;
                    };
                    MDCSliderFoundation2.prototype.handleThumbMouseenter = function() {
                      if (!this.isDiscrete || !this.isRange)
                        return;
                      this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.START);
                      this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.END);
                    };
                    MDCSliderFoundation2.prototype.handleThumbMouseleave = function() {
                      var _a, _b;
                      if (!this.isDiscrete || !this.isRange)
                        return;
                      if (!((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) && (this.adapter.isInputFocused(types_1.Thumb.START) || this.adapter.isInputFocused(types_1.Thumb.END)) || this.thumb) {
                        return;
                      }
                      this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.START);
                      this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, types_1.Thumb.END);
                    };
                    MDCSliderFoundation2.prototype.handleMousedownOrTouchstart = function(event) {
                      var _this = this;
                      var moveEventType = event.type === "mousedown" ? "mousemove" : "touchmove";
                      this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
                      var upHandler = function upHandler2() {
                        _this.handleUp();
                        _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
                        _this.adapter.deregisterEventHandler("mouseup", upHandler2);
                        _this.adapter.deregisterEventHandler("touchend", upHandler2);
                      };
                      this.adapter.registerBodyEventHandler("mouseup", upHandler);
                      this.adapter.registerBodyEventHandler("touchend", upHandler);
                      this.handleDown(event);
                    };
                    MDCSliderFoundation2.prototype.handlePointerdown = function(event) {
                      var isPrimaryButton = event.button === 0;
                      if (!isPrimaryButton)
                        return;
                      if (event.pointerId != null) {
                        this.adapter.setPointerCapture(event.pointerId);
                      }
                      this.adapter.registerEventHandler("pointermove", this.moveListener);
                      this.handleDown(event);
                    };
                    MDCSliderFoundation2.prototype.handleInputChange = function(thumb) {
                      var value = Number(this.adapter.getInputValue(thumb));
                      if (thumb === types_1.Thumb.START) {
                        this.setValueStart(value);
                      } else {
                        this.setValue(value);
                      }
                      this.adapter.emitChangeEvent(thumb === types_1.Thumb.START ? this.valueStart : this.value, thumb);
                      this.adapter.emitInputEvent(thumb === types_1.Thumb.START ? this.valueStart : this.value, thumb);
                    };
                    MDCSliderFoundation2.prototype.handleInputFocus = function(thumb) {
                      this.adapter.addThumbClass(constants_1.cssClasses.THUMB_FOCUSED, thumb);
                      if (!this.isDiscrete)
                        return;
                      this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, thumb);
                      if (this.isRange) {
                        var otherThumb = thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START;
                        this.adapter.addThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, otherThumb);
                      }
                    };
                    MDCSliderFoundation2.prototype.handleInputBlur = function(thumb) {
                      this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_FOCUSED, thumb);
                      if (!this.isDiscrete)
                        return;
                      this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, thumb);
                      if (this.isRange) {
                        var otherThumb = thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START;
                        this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_WITH_INDICATOR, otherThumb);
                      }
                    };
                    MDCSliderFoundation2.prototype.handleDragStart = function(event, value, thumb) {
                      var _a, _b;
                      this.adapter.emitDragStartEvent(value, thumb);
                      this.adapter.focusInput(thumb);
                      if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
                        this.handleInputFocus(thumb);
                      }
                      event.preventDefault();
                    };
                    MDCSliderFoundation2.prototype.getThumbFromDownEvent = function(clientX, value) {
                      if (!this.isRange)
                        return types_1.Thumb.END;
                      var thumbStartRect = this.adapter.getThumbBoundingClientRect(types_1.Thumb.START);
                      var thumbEndRect = this.adapter.getThumbBoundingClientRect(types_1.Thumb.END);
                      var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
                      var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
                      if (inThumbStartBounds && inThumbEndBounds) {
                        return null;
                      }
                      if (inThumbStartBounds) {
                        return types_1.Thumb.START;
                      }
                      if (inThumbEndBounds) {
                        return types_1.Thumb.END;
                      }
                      if (value < this.valueStart) {
                        return types_1.Thumb.START;
                      }
                      if (value > this.value) {
                        return types_1.Thumb.END;
                      }
                      return value - this.valueStart <= this.value - value ? types_1.Thumb.START : types_1.Thumb.END;
                    };
                    MDCSliderFoundation2.prototype.getThumbFromMoveEvent = function(clientX) {
                      if (this.thumb !== null)
                        return this.thumb;
                      if (this.downEventClientX === null) {
                        throw new Error("`downEventClientX` is null after move event.");
                      }
                      var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < constants_1.numbers.THUMB_UPDATE_MIN_PX;
                      if (moveDistanceUnderThreshold)
                        return this.thumb;
                      var draggedThumbToLeft = clientX < this.downEventClientX;
                      if (draggedThumbToLeft) {
                        return this.adapter.isRTL() ? types_1.Thumb.END : types_1.Thumb.START;
                      } else {
                        return this.adapter.isRTL() ? types_1.Thumb.START : types_1.Thumb.END;
                      }
                    };
                    MDCSliderFoundation2.prototype.updateUI = function(thumb) {
                      if (thumb) {
                        this.updateThumbAndInputAttributes(thumb);
                      } else {
                        this.updateThumbAndInputAttributes(types_1.Thumb.START);
                        this.updateThumbAndInputAttributes(types_1.Thumb.END);
                      }
                      this.updateThumbAndTrackUI(thumb);
                      this.updateValueIndicatorUI(thumb);
                      this.updateTickMarksUI();
                    };
                    MDCSliderFoundation2.prototype.updateThumbAndInputAttributes = function(thumb) {
                      if (!thumb)
                        return;
                      var value = this.isRange && thumb === types_1.Thumb.START ? this.valueStart : this.value;
                      var valueStr = String(value);
                      this.adapter.setInputAttribute(constants_1.attributes.INPUT_VALUE, valueStr, thumb);
                      if (this.isRange && thumb === types_1.Thumb.START) {
                        this.adapter.setInputAttribute(constants_1.attributes.INPUT_MIN, String(value + this.minRange), types_1.Thumb.END);
                      } else if (this.isRange && thumb === types_1.Thumb.END) {
                        this.adapter.setInputAttribute(constants_1.attributes.INPUT_MAX, String(value - this.minRange), types_1.Thumb.START);
                      }
                      if (this.adapter.getInputValue(thumb) !== valueStr) {
                        this.adapter.setInputValue(valueStr, thumb);
                      }
                      var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
                      if (valueToAriaValueTextFn) {
                        this.adapter.setInputAttribute(constants_1.attributes.ARIA_VALUETEXT, valueToAriaValueTextFn(value, thumb), thumb);
                      }
                    };
                    MDCSliderFoundation2.prototype.updateValueIndicatorUI = function(thumb) {
                      if (!this.isDiscrete)
                        return;
                      var value = this.isRange && thumb === types_1.Thumb.START ? this.valueStart : this.value;
                      this.adapter.setValueIndicatorText(value, thumb === types_1.Thumb.START ? types_1.Thumb.START : types_1.Thumb.END);
                      if (!thumb && this.isRange) {
                        this.adapter.setValueIndicatorText(this.valueStart, types_1.Thumb.START);
                      }
                    };
                    MDCSliderFoundation2.prototype.updateTickMarksUI = function() {
                      if (!this.isDiscrete || !this.hasTickMarks)
                        return;
                      var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
                      var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
                      var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
                      var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart }).fill(types_1.TickMark.INACTIVE);
                      var tickMarksActive = Array.from({ length: numTickMarksActive }).fill(types_1.TickMark.ACTIVE);
                      var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd }).fill(types_1.TickMark.INACTIVE);
                      this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive).concat(tickMarksInactiveEnd));
                    };
                    MDCSliderFoundation2.prototype.mapClientXOnSliderScale = function(clientX) {
                      var xPos = clientX - this.rect.left;
                      var pctComplete = xPos / this.rect.width;
                      if (this.adapter.isRTL()) {
                        pctComplete = 1 - pctComplete;
                      }
                      var value = this.min + pctComplete * (this.max - this.min);
                      if (value === this.max || value === this.min) {
                        return value;
                      }
                      return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
                    };
                    MDCSliderFoundation2.prototype.quantize = function(value) {
                      var numSteps = Math.round((value - this.min) / this.step);
                      return this.min + numSteps * this.step;
                    };
                    MDCSliderFoundation2.prototype.updateValue = function(value, thumb, _a) {
                      var _b = _a === void 0 ? {} : _a, emitInputEvent = _b.emitInputEvent;
                      value = this.clampValue(value, thumb);
                      if (this.isRange && thumb === types_1.Thumb.START) {
                        if (this.valueStart === value)
                          return;
                        this.valueStart = value;
                      } else {
                        if (this.value === value)
                          return;
                        this.value = value;
                      }
                      this.updateUI(thumb);
                      if (emitInputEvent) {
                        this.adapter.emitInputEvent(thumb === types_1.Thumb.START ? this.valueStart : this.value, thumb);
                      }
                    };
                    MDCSliderFoundation2.prototype.clampValue = function(value, thumb) {
                      value = Math.min(Math.max(value, this.min), this.max);
                      var thumbStartMovedPastThumbEnd = this.isRange && thumb === types_1.Thumb.START && value > this.value - this.minRange;
                      if (thumbStartMovedPastThumbEnd) {
                        return this.value - this.minRange;
                      }
                      var thumbEndMovedPastThumbStart = this.isRange && thumb === types_1.Thumb.END && value < this.valueStart + this.minRange;
                      if (thumbEndMovedPastThumbStart) {
                        return this.valueStart + this.minRange;
                      }
                      return value;
                    };
                    MDCSliderFoundation2.prototype.updateThumbAndTrackUI = function(thumb) {
                      var _this = this;
                      var _a = this, max = _a.max, min = _a.min;
                      var pctComplete = (this.value - this.valueStart) / (max - min);
                      var rangePx = pctComplete * this.rect.width;
                      var isRtl = this.adapter.isRTL();
                      var transformProp = HAS_WINDOW ? util_1.getCorrectPropertyName(window, "transform") : "transform";
                      if (this.isRange) {
                        var thumbLeftPos_1 = this.adapter.isRTL() ? (max - this.value) / (max - min) * this.rect.width : (this.valueStart - min) / (max - min) * this.rect.width;
                        var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
                        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
                          var trackAnimatesFromRight = !isRtl && thumb === types_1.Thumb.START || isRtl && thumb !== types_1.Thumb.START;
                          if (trackAnimatesFromRight) {
                            _this.adapter.setTrackActiveStyleProperty("transform-origin", "right");
                            _this.adapter.setTrackActiveStyleProperty("left", "auto");
                            _this.adapter.setTrackActiveStyleProperty("right", _this.rect.width - thumbRightPos_1 + "px");
                          } else {
                            _this.adapter.setTrackActiveStyleProperty("transform-origin", "left");
                            _this.adapter.setTrackActiveStyleProperty("right", "auto");
                            _this.adapter.setTrackActiveStyleProperty("left", thumbLeftPos_1 + "px");
                          }
                          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
                          var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
                          var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
                          if (thumb === types_1.Thumb.START || !thumb || !_this.initialStylesRemoved) {
                            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", types_1.Thumb.START);
                            _this.alignValueIndicator(types_1.Thumb.START, thumbStartPos);
                          }
                          if (thumb === types_1.Thumb.END || !thumb || !_this.initialStylesRemoved) {
                            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", types_1.Thumb.END);
                            _this.alignValueIndicator(types_1.Thumb.END, thumbEndPos);
                          }
                          _this.removeInitialStyles(isRtl);
                          _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
                        });
                      } else {
                        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
                          var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
                          _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", types_1.Thumb.END);
                          _this.alignValueIndicator(types_1.Thumb.END, thumbStartPos);
                          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
                          _this.removeInitialStyles(isRtl);
                        });
                      }
                    };
                    MDCSliderFoundation2.prototype.alignValueIndicator = function(thumb, thumbPos) {
                      if (!this.isDiscrete)
                        return;
                      var thumbHalfWidth = this.adapter.getThumbBoundingClientRect(thumb).width / 2;
                      var containerWidth = this.adapter.getValueIndicatorContainerWidth(thumb);
                      var sliderWidth = this.adapter.getBoundingClientRect().width;
                      if (containerWidth / 2 > thumbPos + thumbHalfWidth) {
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_LEFT, thumbHalfWidth + "px", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "0", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
                      } else if (containerWidth / 2 > sliderWidth - thumbPos + thumbHalfWidth) {
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_LEFT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_RIGHT, thumbHalfWidth + "px", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(50%)", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "0", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
                      } else {
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_LEFT, "50%", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "50%", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
                        this.adapter.setThumbStyleProperty(constants_1.strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "translateX(-50%)", thumb);
                      }
                    };
                    MDCSliderFoundation2.prototype.removeInitialStyles = function(isRtl) {
                      if (this.initialStylesRemoved)
                        return;
                      var position = isRtl ? "right" : "left";
                      this.adapter.removeThumbStyleProperty(position, types_1.Thumb.END);
                      if (this.isRange) {
                        this.adapter.removeThumbStyleProperty(position, types_1.Thumb.START);
                      }
                      this.initialStylesRemoved = true;
                      this.resetTrackAndThumbAnimation();
                    };
                    MDCSliderFoundation2.prototype.resetTrackAndThumbAnimation = function() {
                      var _this = this;
                      if (!this.isDiscrete)
                        return;
                      var transitionProp = HAS_WINDOW ? util_1.getCorrectPropertyName(window, "transition") : "transition";
                      var transitionDefault = "none 0s ease 0s";
                      this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, types_1.Thumb.END);
                      if (this.isRange) {
                        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, types_1.Thumb.START);
                      }
                      this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
                      requestAnimationFrame(function() {
                        _this.adapter.removeThumbStyleProperty(transitionProp, types_1.Thumb.END);
                        _this.adapter.removeTrackActiveStyleProperty(transitionProp);
                        if (_this.isRange) {
                          _this.adapter.removeThumbStyleProperty(transitionProp, types_1.Thumb.START);
                        }
                      });
                    };
                    MDCSliderFoundation2.prototype.updateOverlappingThumbsUI = function(thumbStartPos, thumbEndPos, thumb) {
                      var thumbsOverlap = false;
                      if (this.adapter.isRTL()) {
                        var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
                        var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
                        thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
                      } else {
                        var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
                        var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
                        thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
                      }
                      if (thumbsOverlap) {
                        this.adapter.addThumbClass(
                          constants_1.cssClasses.THUMB_TOP,
                          // If no thumb was dragged (in the case of initial layout), end
                          // thumb is on top by default.
                          thumb || types_1.Thumb.END
                        );
                        this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, thumb === types_1.Thumb.START ? types_1.Thumb.END : types_1.Thumb.START);
                      } else {
                        this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, types_1.Thumb.START);
                        this.adapter.removeThumbClass(constants_1.cssClasses.THUMB_TOP, types_1.Thumb.END);
                      }
                    };
                    MDCSliderFoundation2.prototype.convertAttributeValueToNumber = function(attributeValue, attributeName) {
                      if (attributeValue === null) {
                        throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
                      }
                      var value = Number(attributeValue);
                      if (isNaN(value)) {
                        throw new Error("MDCSliderFoundation: `" + attributeName + "` value is `" + attributeValue + "`, but must be a number.");
                      }
                      return value;
                    };
                    MDCSliderFoundation2.prototype.validateProperties = function(_a) {
                      var min = _a.min, max = _a.max, value = _a.value, valueStart = _a.valueStart, step = _a.step, minRange = _a.minRange;
                      if (min >= max) {
                        throw new Error("MDCSliderFoundation: min must be strictly less than max. " + ("Current: [min: " + min + ", max: " + max + "]"));
                      }
                      if (step <= 0) {
                        throw new Error("MDCSliderFoundation: step must be a positive number. " + ("Current step: " + step));
                      }
                      if (this.isRange) {
                        if (value < min || value > max || valueStart < min || valueStart > max) {
                          throw new Error("MDCSliderFoundation: values must be in [min, max] range. " + ("Current values: [start value: " + valueStart + ", end value: ") + (value + ", min: " + min + ", max: " + max + "]"));
                        }
                        if (valueStart > value) {
                          throw new Error("MDCSliderFoundation: start value must be <= end value. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
                        }
                        if (minRange < 0) {
                          throw new Error("MDCSliderFoundation: minimum range must be non-negative. " + ("Current min range: " + minRange));
                        }
                        if (value - valueStart < minRange) {
                          throw new Error("MDCSliderFoundation: start value and end value must differ by at least " + (minRange + ". Current values: [start value: " + valueStart + ", ") + ("end value: " + value + "]"));
                        }
                        var numStepsValueStartFromMin = (valueStart - min) / step;
                        var numStepsValueFromMin = (value - min) / step;
                        if (!Number.isInteger(parseFloat(numStepsValueStartFromMin.toFixed(6))) || !Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
                          throw new Error("MDCSliderFoundation: Slider values must be valid based on the " + ("step value (" + step + "). Current values: [start value: ") + (valueStart + ", end value: " + value + ", min: " + min + "]"));
                        }
                      } else {
                        if (value < min || value > max) {
                          throw new Error("MDCSliderFoundation: value must be in [min, max] range. " + ("Current values: [value: " + value + ", min: " + min + ", max: " + max + "]"));
                        }
                        var numStepsValueFromMin = (value - min) / step;
                        if (!Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
                          throw new Error("MDCSliderFoundation: Slider value must be valid based on the " + ("step value (" + step + "). Current value: " + value));
                        }
                      }
                    };
                    MDCSliderFoundation2.prototype.registerEventHandlers = function() {
                      this.adapter.registerWindowEventHandler("resize", this.resizeListener);
                      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
                        this.adapter.registerEventHandler("pointerdown", this.pointerdownListener);
                        this.adapter.registerEventHandler("pointerup", this.pointerupListener);
                      } else {
                        this.adapter.registerEventHandler("mousedown", this.mousedownOrTouchstartListener);
                        this.adapter.registerEventHandler("touchstart", this.mousedownOrTouchstartListener);
                      }
                      if (this.isRange) {
                        this.adapter.registerThumbEventHandler(types_1.Thumb.START, "mouseenter", this.thumbMouseenterListener);
                        this.adapter.registerThumbEventHandler(types_1.Thumb.START, "mouseleave", this.thumbMouseleaveListener);
                        this.adapter.registerInputEventHandler(types_1.Thumb.START, "change", this.inputStartChangeListener);
                        this.adapter.registerInputEventHandler(types_1.Thumb.START, "focus", this.inputStartFocusListener);
                        this.adapter.registerInputEventHandler(types_1.Thumb.START, "blur", this.inputStartBlurListener);
                      }
                      this.adapter.registerThumbEventHandler(types_1.Thumb.END, "mouseenter", this.thumbMouseenterListener);
                      this.adapter.registerThumbEventHandler(types_1.Thumb.END, "mouseleave", this.thumbMouseleaveListener);
                      this.adapter.registerInputEventHandler(types_1.Thumb.END, "change", this.inputEndChangeListener);
                      this.adapter.registerInputEventHandler(types_1.Thumb.END, "focus", this.inputEndFocusListener);
                      this.adapter.registerInputEventHandler(types_1.Thumb.END, "blur", this.inputEndBlurListener);
                    };
                    MDCSliderFoundation2.prototype.deregisterEventHandlers = function() {
                      this.adapter.deregisterWindowEventHandler("resize", this.resizeListener);
                      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
                        this.adapter.deregisterEventHandler("pointerdown", this.pointerdownListener);
                        this.adapter.deregisterEventHandler("pointerup", this.pointerupListener);
                      } else {
                        this.adapter.deregisterEventHandler("mousedown", this.mousedownOrTouchstartListener);
                        this.adapter.deregisterEventHandler("touchstart", this.mousedownOrTouchstartListener);
                      }
                      if (this.isRange) {
                        this.adapter.deregisterThumbEventHandler(types_1.Thumb.START, "mouseenter", this.thumbMouseenterListener);
                        this.adapter.deregisterThumbEventHandler(types_1.Thumb.START, "mouseleave", this.thumbMouseleaveListener);
                        this.adapter.deregisterInputEventHandler(types_1.Thumb.START, "change", this.inputStartChangeListener);
                        this.adapter.deregisterInputEventHandler(types_1.Thumb.START, "focus", this.inputStartFocusListener);
                        this.adapter.deregisterInputEventHandler(types_1.Thumb.START, "blur", this.inputStartBlurListener);
                      }
                      this.adapter.deregisterThumbEventHandler(types_1.Thumb.END, "mouseenter", this.thumbMouseenterListener);
                      this.adapter.deregisterThumbEventHandler(types_1.Thumb.END, "mouseleave", this.thumbMouseleaveListener);
                      this.adapter.deregisterInputEventHandler(types_1.Thumb.END, "change", this.inputEndChangeListener);
                      this.adapter.deregisterInputEventHandler(types_1.Thumb.END, "focus", this.inputEndFocusListener);
                      this.adapter.deregisterInputEventHandler(types_1.Thumb.END, "blur", this.inputEndBlurListener);
                    };
                    MDCSliderFoundation2.prototype.handlePointerup = function() {
                      this.handleUp();
                      this.adapter.deregisterEventHandler("pointermove", this.moveListener);
                    };
                    MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) && // #setPointerCapture is buggy on iOS, so we can't use pointer events
                    // until the following bug is fixed:
                    // https://bugs.webkit.org/show_bug.cgi?id=220196
                    !isIOS();
                    return MDCSliderFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSliderFoundation = MDCSliderFoundation;
                function isIOS() {
                  return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
                }
                function getNumDecimalPlaces(n) {
                  var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
                  if (!match)
                    return 0;
                  var fraction = match[1] || "";
                  var exponent = match[2] || 0;
                  return Math.max(
                    0,
                    // lower limit
                    (fraction === "0" ? 0 : fraction.length) - Number(exponent)
                  );
                }
              }
            ),
            /***/
            "./packages/mdc-slider/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-slider/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-slider/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-slider/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-slider/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-slider/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-slider/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-slider/types.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-slider/types.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.Thumb = exports2.TickMark = void 0;
                var TickMark;
                (function(TickMark2) {
                  TickMark2[TickMark2["ACTIVE"] = 0] = "ACTIVE";
                  TickMark2[TickMark2["INACTIVE"] = 1] = "INACTIVE";
                })(TickMark = exports2.TickMark || (exports2.TickMark = {}));
                var Thumb;
                (function(Thumb2) {
                  Thumb2[Thumb2["START"] = 1] = "START";
                  Thumb2[Thumb2["END"] = 2] = "END";
                })(Thumb = exports2.Thumb || (exports2.Thumb = {}));
              }
            ),
            /***/
            "./packages/mdc-snackbar/adapter.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-snackbar/adapter.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-snackbar/component.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-snackbar/component.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSnackbar = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-snackbar/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-snackbar/foundation.ts"
                );
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-snackbar/util.ts"
                ));
                var SURFACE_SELECTOR = constants_1.strings.SURFACE_SELECTOR, LABEL_SELECTOR = constants_1.strings.LABEL_SELECTOR, ACTION_SELECTOR = constants_1.strings.ACTION_SELECTOR, DISMISS_SELECTOR = constants_1.strings.DISMISS_SELECTOR, OPENING_EVENT = constants_1.strings.OPENING_EVENT, OPENED_EVENT = constants_1.strings.OPENED_EVENT, CLOSING_EVENT = constants_1.strings.CLOSING_EVENT, CLOSED_EVENT = constants_1.strings.CLOSED_EVENT;
                var MDCSnackbar = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSnackbar2, _super);
                    function MDCSnackbar2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSnackbar2.attachTo = function(root) {
                      return new MDCSnackbar2(root);
                    };
                    MDCSnackbar2.prototype.initialize = function(announcerFactory) {
                      if (announcerFactory === void 0) {
                        announcerFactory = function announcerFactory2() {
                          return util.announce;
                        };
                      }
                      this.announce = announcerFactory();
                    };
                    MDCSnackbar2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.surfaceEl = this.root.querySelector(SURFACE_SELECTOR);
                      this.labelEl = this.root.querySelector(LABEL_SELECTOR);
                      this.actionEl = this.root.querySelector(ACTION_SELECTOR);
                      this.handleKeyDown = function(evt) {
                        _this.foundation.handleKeyDown(evt);
                      };
                      this.handleSurfaceClick = function(evt) {
                        var target = evt.target;
                        if (_this.isActionButton(target)) {
                          _this.foundation.handleActionButtonClick(evt);
                        } else if (_this.isActionIcon(target)) {
                          _this.foundation.handleActionIconClick(evt);
                        }
                      };
                      this.registerKeyDownHandler(this.handleKeyDown);
                      this.registerSurfaceClickHandler(this.handleSurfaceClick);
                    };
                    MDCSnackbar2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.deregisterKeyDownHandler(this.handleKeyDown);
                      this.deregisterSurfaceClickHandler(this.handleSurfaceClick);
                    };
                    MDCSnackbar2.prototype.open = function() {
                      this.foundation.open();
                    };
                    MDCSnackbar2.prototype.close = function(reason) {
                      if (reason === void 0) {
                        reason = "";
                      }
                      this.foundation.close(reason);
                    };
                    MDCSnackbar2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        announce: function announce() {
                          _this.announce(_this.labelEl);
                        },
                        notifyClosed: function notifyClosed(reason) {
                          return _this.emit(CLOSED_EVENT, reason ? { reason } : {});
                        },
                        notifyClosing: function notifyClosing(reason) {
                          return _this.emit(CLOSING_EVENT, reason ? { reason } : {});
                        },
                        notifyOpened: function notifyOpened() {
                          return _this.emit(OPENED_EVENT, {});
                        },
                        notifyOpening: function notifyOpening() {
                          return _this.emit(OPENING_EVENT, {});
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        }
                      };
                      return new foundation_1.MDCSnackbarFoundation(adapter);
                    };
                    Object.defineProperty(MDCSnackbar2.prototype, "timeoutMs", {
                      get: function get() {
                        return this.foundation.getTimeoutMs();
                      },
                      set: function set(timeoutMs) {
                        this.foundation.setTimeoutMs(timeoutMs);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbar2.prototype, "closeOnEscape", {
                      get: function get() {
                        return this.foundation.getCloseOnEscape();
                      },
                      set: function set(closeOnEscape) {
                        this.foundation.setCloseOnEscape(closeOnEscape);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbar2.prototype, "isOpen", {
                      get: function get() {
                        return this.foundation.isOpen();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbar2.prototype, "labelText", {
                      get: function get() {
                        return this.labelEl.textContent;
                      },
                      set: function set(labelText) {
                        this.labelEl.textContent = labelText;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbar2.prototype, "actionButtonText", {
                      get: function get() {
                        return this.actionEl.textContent;
                      },
                      set: function set(actionButtonText) {
                        this.actionEl.textContent = actionButtonText;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSnackbar2.prototype.registerKeyDownHandler = function(handler) {
                      this.listen("keydown", handler);
                    };
                    MDCSnackbar2.prototype.deregisterKeyDownHandler = function(handler) {
                      this.unlisten("keydown", handler);
                    };
                    MDCSnackbar2.prototype.registerSurfaceClickHandler = function(handler) {
                      this.surfaceEl.addEventListener("click", handler);
                    };
                    MDCSnackbar2.prototype.deregisterSurfaceClickHandler = function(handler) {
                      this.surfaceEl.removeEventListener("click", handler);
                    };
                    MDCSnackbar2.prototype.isActionButton = function(target) {
                      return Boolean(ponyfill_1.closest(target, ACTION_SELECTOR));
                    };
                    MDCSnackbar2.prototype.isActionIcon = function(target) {
                      return Boolean(ponyfill_1.closest(target, DISMISS_SELECTOR));
                    };
                    return MDCSnackbar2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSnackbar = MDCSnackbar;
              }
            ),
            /***/
            "./packages/mdc-snackbar/constants.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-snackbar/constants.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  CLOSING: "mdc-snackbar--closing",
                  OPEN: "mdc-snackbar--open",
                  OPENING: "mdc-snackbar--opening"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ACTION_SELECTOR: ".mdc-snackbar__action",
                  ARIA_LIVE_LABEL_TEXT_ATTR: "data-mdc-snackbar-label-text",
                  CLOSED_EVENT: "MDCSnackbar:closed",
                  CLOSING_EVENT: "MDCSnackbar:closing",
                  DISMISS_SELECTOR: ".mdc-snackbar__dismiss",
                  LABEL_SELECTOR: ".mdc-snackbar__label",
                  OPENED_EVENT: "MDCSnackbar:opened",
                  OPENING_EVENT: "MDCSnackbar:opening",
                  REASON_ACTION: "action",
                  REASON_DISMISS: "dismiss",
                  SURFACE_SELECTOR: ".mdc-snackbar__surface"
                };
                exports2.strings = strings;
                var numbers = {
                  DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5e3,
                  INDETERMINATE: -1,
                  MAX_AUTO_DISMISS_TIMEOUT_MS: 1e4,
                  MIN_AUTO_DISMISS_TIMEOUT_MS: 4e3,
                  // These variables need to be kept in sync with the values in _variables.scss.
                  SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
                  SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,
                  /**
                   * Number of milliseconds to wait between temporarily clearing the label text
                   * in the DOM and subsequently restoring it. This is necessary to force IE 11
                   * to pick up the `aria-live` content change and announce it to the user.
                   */
                  ARIA_LIVE_DELAY_MS: 1e3
                };
                exports2.numbers = numbers;
              }
            ),
            /***/
            "./packages/mdc-snackbar/foundation.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-snackbar/foundation.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSnackbarFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-snackbar/constants.ts"
                );
                var OPENING = constants_1.cssClasses.OPENING, OPEN = constants_1.cssClasses.OPEN, CLOSING = constants_1.cssClasses.CLOSING;
                var REASON_ACTION = constants_1.strings.REASON_ACTION, REASON_DISMISS = constants_1.strings.REASON_DISMISS;
                var MDCSnackbarFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSnackbarFoundation2, _super);
                    function MDCSnackbarFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation2.defaultAdapter), adapter)) || this;
                      _this.opened = false;
                      _this.animationFrame = 0;
                      _this.animationTimer = 0;
                      _this.autoDismissTimer = 0;
                      _this.autoDismissTimeoutMs = constants_1.numbers.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
                      _this.closeOnEscape = true;
                      return _this;
                    }
                    Object.defineProperty(MDCSnackbarFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbarFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbarFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSnackbarFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          announce: function announce() {
                            return void 0;
                          },
                          notifyClosed: function notifyClosed() {
                            return void 0;
                          },
                          notifyClosing: function notifyClosing() {
                            return void 0;
                          },
                          notifyOpened: function notifyOpened() {
                            return void 0;
                          },
                          notifyOpening: function notifyOpening() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSnackbarFoundation2.prototype.destroy = function() {
                      this.clearAutoDismissTimer();
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = 0;
                      clearTimeout(this.animationTimer);
                      this.animationTimer = 0;
                      this.adapter.removeClass(OPENING);
                      this.adapter.removeClass(OPEN);
                      this.adapter.removeClass(CLOSING);
                    };
                    MDCSnackbarFoundation2.prototype.open = function() {
                      var _this = this;
                      this.clearAutoDismissTimer();
                      this.opened = true;
                      this.adapter.notifyOpening();
                      this.adapter.removeClass(CLOSING);
                      this.adapter.addClass(OPENING);
                      this.adapter.announce();
                      this.runNextAnimationFrame(function() {
                        _this.adapter.addClass(OPEN);
                        _this.animationTimer = setTimeout(function() {
                          var timeoutMs = _this.getTimeoutMs();
                          _this.handleAnimationTimerEnd();
                          _this.adapter.notifyOpened();
                          if (timeoutMs !== constants_1.numbers.INDETERMINATE) {
                            _this.autoDismissTimer = setTimeout(function() {
                              _this.close(REASON_DISMISS);
                            }, timeoutMs);
                          }
                        }, constants_1.numbers.SNACKBAR_ANIMATION_OPEN_TIME_MS);
                      });
                    };
                    MDCSnackbarFoundation2.prototype.close = function(reason) {
                      var _this = this;
                      if (reason === void 0) {
                        reason = "";
                      }
                      if (!this.opened) {
                        return;
                      }
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = 0;
                      this.clearAutoDismissTimer();
                      this.opened = false;
                      this.adapter.notifyClosing(reason);
                      this.adapter.addClass(constants_1.cssClasses.CLOSING);
                      this.adapter.removeClass(constants_1.cssClasses.OPEN);
                      this.adapter.removeClass(constants_1.cssClasses.OPENING);
                      clearTimeout(this.animationTimer);
                      this.animationTimer = setTimeout(function() {
                        _this.handleAnimationTimerEnd();
                        _this.adapter.notifyClosed(reason);
                      }, constants_1.numbers.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
                    };
                    MDCSnackbarFoundation2.prototype.isOpen = function() {
                      return this.opened;
                    };
                    MDCSnackbarFoundation2.prototype.getTimeoutMs = function() {
                      return this.autoDismissTimeoutMs;
                    };
                    MDCSnackbarFoundation2.prototype.setTimeoutMs = function(timeoutMs) {
                      var minValue = constants_1.numbers.MIN_AUTO_DISMISS_TIMEOUT_MS;
                      var maxValue = constants_1.numbers.MAX_AUTO_DISMISS_TIMEOUT_MS;
                      var indeterminateValue = constants_1.numbers.INDETERMINATE;
                      if (timeoutMs === constants_1.numbers.INDETERMINATE || timeoutMs <= maxValue && timeoutMs >= minValue) {
                        this.autoDismissTimeoutMs = timeoutMs;
                      } else {
                        throw new Error("\n        timeoutMs must be an integer in the range " + minValue + "\u2013" + maxValue + "\n        (or " + indeterminateValue + " to disable), but got '" + timeoutMs + "'");
                      }
                    };
                    MDCSnackbarFoundation2.prototype.getCloseOnEscape = function() {
                      return this.closeOnEscape;
                    };
                    MDCSnackbarFoundation2.prototype.setCloseOnEscape = function(closeOnEscape) {
                      this.closeOnEscape = closeOnEscape;
                    };
                    MDCSnackbarFoundation2.prototype.handleKeyDown = function(evt) {
                      var isEscapeKey = evt.key === "Escape" || evt.keyCode === 27;
                      if (isEscapeKey && this.getCloseOnEscape()) {
                        this.close(REASON_DISMISS);
                      }
                    };
                    MDCSnackbarFoundation2.prototype.handleActionButtonClick = function(_evt) {
                      this.close(REASON_ACTION);
                    };
                    MDCSnackbarFoundation2.prototype.handleActionIconClick = function(_evt) {
                      this.close(REASON_DISMISS);
                    };
                    MDCSnackbarFoundation2.prototype.clearAutoDismissTimer = function() {
                      clearTimeout(this.autoDismissTimer);
                      this.autoDismissTimer = 0;
                    };
                    MDCSnackbarFoundation2.prototype.handleAnimationTimerEnd = function() {
                      this.animationTimer = 0;
                      this.adapter.removeClass(constants_1.cssClasses.OPENING);
                      this.adapter.removeClass(constants_1.cssClasses.CLOSING);
                    };
                    MDCSnackbarFoundation2.prototype.runNextAnimationFrame = function(callback) {
                      var _this = this;
                      cancelAnimationFrame(this.animationFrame);
                      this.animationFrame = requestAnimationFrame(function() {
                        _this.animationFrame = 0;
                        clearTimeout(_this.animationTimer);
                        _this.animationTimer = setTimeout(callback, 0);
                      });
                    };
                    return MDCSnackbarFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSnackbarFoundation = MDCSnackbarFoundation;
                exports2.default = MDCSnackbarFoundation;
              }
            ),
            /***/
            "./packages/mdc-snackbar/index.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-snackbar/index.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.util = void 0;
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-snackbar/util.ts"
                ));
                exports2.util = util;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-snackbar/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-snackbar/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-snackbar/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-snackbar/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-snackbar/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-snackbar/types.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-snackbar/types.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-snackbar/util.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-snackbar/util.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.announce = void 0;
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-snackbar/constants.ts"
                );
                var ARIA_LIVE_DELAY_MS = constants_1.numbers.ARIA_LIVE_DELAY_MS;
                var ARIA_LIVE_LABEL_TEXT_ATTR = constants_1.strings.ARIA_LIVE_LABEL_TEXT_ATTR;
                function announce(ariaEl, labelEl) {
                  if (labelEl === void 0) {
                    labelEl = ariaEl;
                  }
                  var priority = ariaEl.getAttribute("aria-live");
                  var labelText = labelEl.textContent.trim();
                  if (!labelText || !priority) {
                    return;
                  }
                  ariaEl.setAttribute("aria-live", "off");
                  labelEl.textContent = "";
                  var span = document.createElement("span");
                  span.setAttribute("style", "display: inline-block; width: 0; height: 1px;");
                  span.textContent = "\xA0";
                  labelEl.appendChild(span);
                  labelEl.setAttribute(ARIA_LIVE_LABEL_TEXT_ATTR, labelText);
                  setTimeout(function() {
                    ariaEl.setAttribute("aria-live", priority);
                    labelEl.removeAttribute(ARIA_LIVE_LABEL_TEXT_ATTR);
                    labelEl.textContent = labelText;
                  }, ARIA_LIVE_DELAY_MS);
                }
                exports2.announce = announce;
              }
            ),
            /***/
            "./packages/mdc-switch/adapter.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-switch/adapter.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-switch/component.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-switch/component.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSwitch = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-switch/constants.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-switch/foundation.ts"
                );
                var MDCSwitch = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSwitch2, _super);
                    function MDCSwitch2(root, foundation) {
                      var _this = _super.call(this, root, foundation) || this;
                      _this.root = root;
                      return _this;
                    }
                    MDCSwitch2.attachTo = function(root) {
                      return new MDCSwitch2(root);
                    };
                    MDCSwitch2.prototype.initialize = function() {
                      this.ripple = new component_2.MDCRipple(this.root, this.createRippleFoundation());
                    };
                    MDCSwitch2.prototype.initialSyncWithDOM = function() {
                      var rippleElement = this.root.querySelector(constants_1.Selectors.RIPPLE);
                      if (!rippleElement) {
                        throw new Error("Switch " + constants_1.Selectors.RIPPLE + " element is required.");
                      }
                      this.rippleElement = rippleElement;
                      this.root.addEventListener("click", this.foundation.handleClick);
                      this.foundation.initFromDOM();
                    };
                    MDCSwitch2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.ripple.destroy();
                      this.root.removeEventListener("click", this.foundation.handleClick);
                    };
                    MDCSwitch2.prototype.getDefaultFoundation = function() {
                      return new foundation_2.MDCSwitchRenderFoundation(this.createAdapter());
                    };
                    MDCSwitch2.prototype.createAdapter = function() {
                      var _this = this;
                      return {
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        isDisabled: function isDisabled() {
                          return _this.root.disabled;
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        setAriaChecked: function setAriaChecked(ariaChecked) {
                          return _this.root.setAttribute("aria-checked", ariaChecked);
                        },
                        setDisabled: function setDisabled(disabled) {
                          _this.root.disabled = disabled;
                        },
                        state: this
                      };
                    };
                    MDCSwitch2.prototype.createRippleFoundation = function() {
                      return new foundation_1.MDCRippleFoundation(this.createRippleAdapter());
                    };
                    MDCSwitch2.prototype.createRippleAdapter = function() {
                      var _this = this;
                      return __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { computeBoundingRect: function computeBoundingRect() {
                        return _this.rippleElement.getBoundingClientRect();
                      }, isUnbounded: function isUnbounded() {
                        return true;
                      } });
                    };
                    return MDCSwitch2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSwitch = MDCSwitch;
              }
            ),
            /***/
            "./packages/mdc-switch/constants.ts": (
              /*!******************************************!*\
                !*** ./packages/mdc-switch/constants.ts ***!
                \******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.Selectors = exports2.CssClasses = void 0;
                var CssClasses;
                (function(CssClasses2) {
                  CssClasses2["PROCESSING"] = "mdc-switch--processing";
                  CssClasses2["SELECTED"] = "mdc-switch--selected";
                  CssClasses2["UNSELECTED"] = "mdc-switch--unselected";
                })(CssClasses = exports2.CssClasses || (exports2.CssClasses = {}));
                var Selectors;
                (function(Selectors2) {
                  Selectors2["RIPPLE"] = ".mdc-switch__ripple";
                })(Selectors = exports2.Selectors || (exports2.Selectors = {}));
              }
            ),
            /***/
            "./packages/mdc-switch/deprecated/adapter.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-switch/deprecated/adapter.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-switch/deprecated/component.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-switch/deprecated/component.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                var __spreadArray = this && this.__spreadArray || function(to, from) {
                  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
                    to[j] = from[i];
                  }
                  return to;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSwitch = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-switch/deprecated/foundation.ts"
                );
                var MDCSwitch = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSwitch2, _super);
                    function MDCSwitch2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.rippleSurface = _this.createRipple();
                      return _this;
                    }
                    MDCSwitch2.attachTo = function(root) {
                      return new MDCSwitch2(root);
                    };
                    MDCSwitch2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.rippleSurface.destroy();
                      this.nativeControl.removeEventListener("change", this.changeHandler);
                    };
                    MDCSwitch2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.changeHandler = function() {
                        var _a;
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                          args[_i] = arguments[_i];
                        }
                        (_a = _this.foundation).handleChange.apply(_a, __spreadArray([], __read(args)));
                      };
                      this.nativeControl.addEventListener("change", this.changeHandler);
                      this.checked = this.checked;
                    };
                    MDCSwitch2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        setNativeControlChecked: function setNativeControlChecked(checked) {
                          return _this.nativeControl.checked = checked;
                        },
                        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
                          return _this.nativeControl.disabled = disabled;
                        },
                        setNativeControlAttr: function setNativeControlAttr(attr, value) {
                          _this.nativeControl.setAttribute(attr, value);
                        }
                      };
                      return new foundation_2.MDCSwitchFoundation(adapter);
                    };
                    Object.defineProperty(MDCSwitch2.prototype, "ripple", {
                      get: function get() {
                        return this.rippleSurface;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSwitch2.prototype, "checked", {
                      get: function get() {
                        return this.nativeControl.checked;
                      },
                      set: function set(checked) {
                        this.foundation.setChecked(checked);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSwitch2.prototype, "disabled", {
                      get: function get() {
                        return this.nativeControl.disabled;
                      },
                      set: function set(disabled) {
                        this.foundation.setDisabled(disabled);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSwitch2.prototype.createRipple = function() {
                      var _this = this;
                      var RIPPLE_SURFACE_SELECTOR = foundation_2.MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;
                      var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
                      var adapter = __assign(__assign({}, component_2.MDCRipple.createAdapter(this)), { addClass: function addClass(className) {
                        return rippleSurface.classList.add(className);
                      }, computeBoundingRect: function computeBoundingRect() {
                        return rippleSurface.getBoundingClientRect();
                      }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                        _this.nativeControl.removeEventListener(evtType, handler, events_1.applyPassive());
                      }, isSurfaceActive: function isSurfaceActive() {
                        return ponyfill_1.matches(_this.nativeControl, ":active");
                      }, isUnbounded: function isUnbounded() {
                        return true;
                      }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                        _this.nativeControl.addEventListener(evtType, handler, events_1.applyPassive());
                      }, removeClass: function removeClass(className) {
                        rippleSurface.classList.remove(className);
                      }, updateCssVariable: function updateCssVariable(varName, value) {
                        rippleSurface.style.setProperty(varName, value);
                      } });
                      return new component_2.MDCRipple(this.root, new foundation_1.MDCRippleFoundation(adapter));
                    };
                    Object.defineProperty(MDCSwitch2.prototype, "nativeControl", {
                      get: function get() {
                        var NATIVE_CONTROL_SELECTOR = foundation_2.MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;
                        return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    return MDCSwitch2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCSwitch = MDCSwitch;
              }
            ),
            /***/
            "./packages/mdc-switch/deprecated/constants.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-switch/deprecated/constants.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  /** Class used for a switch that is in the "checked" (on) position. */
                  CHECKED: "mdc-switch--checked",
                  /** Class used for a switch that is disabled. */
                  DISABLED: "mdc-switch--disabled"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  /** Aria attribute for checked or unchecked state of switch */
                  ARIA_CHECKED_ATTR: "aria-checked",
                  /** A CSS selector used to locate the native HTML control for the switch.  */
                  NATIVE_CONTROL_SELECTOR: ".mdc-switch__native-control",
                  /** A CSS selector used to locate the ripple surface element for the switch. */
                  RIPPLE_SURFACE_SELECTOR: ".mdc-switch__thumb-underlay"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-switch/deprecated/foundation.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-switch/deprecated/foundation.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSwitchFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-switch/deprecated/constants.ts"
                );
                var MDCSwitchFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSwitchFoundation2, _super);
                    function MDCSwitchFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCSwitchFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCSwitchFoundation2, "strings", {
                      /** The string constants used by the switch. */
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSwitchFoundation2, "cssClasses", {
                      /** The CSS classes used by the switch. */
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCSwitchFoundation2, "defaultAdapter", {
                      /** The default Adapter for the switch. */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          setNativeControlChecked: function setNativeControlChecked() {
                            return void 0;
                          },
                          setNativeControlDisabled: function setNativeControlDisabled() {
                            return void 0;
                          },
                          setNativeControlAttr: function setNativeControlAttr() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCSwitchFoundation2.prototype.setChecked = function(checked) {
                      this.adapter.setNativeControlChecked(checked);
                      this.updateAriaChecked(checked);
                      this.updateCheckedStyling(checked);
                    };
                    MDCSwitchFoundation2.prototype.setDisabled = function(disabled) {
                      this.adapter.setNativeControlDisabled(disabled);
                      if (disabled) {
                        this.adapter.addClass(constants_1.cssClasses.DISABLED);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.DISABLED);
                      }
                    };
                    MDCSwitchFoundation2.prototype.handleChange = function(evt) {
                      var nativeControl = evt.target;
                      this.updateAriaChecked(nativeControl.checked);
                      this.updateCheckedStyling(nativeControl.checked);
                    };
                    MDCSwitchFoundation2.prototype.updateCheckedStyling = function(checked) {
                      if (checked) {
                        this.adapter.addClass(constants_1.cssClasses.CHECKED);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.CHECKED);
                      }
                    };
                    MDCSwitchFoundation2.prototype.updateAriaChecked = function(checked) {
                      this.adapter.setNativeControlAttr(constants_1.strings.ARIA_CHECKED_ATTR, "" + !!checked);
                    };
                    return MDCSwitchFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCSwitchFoundation = MDCSwitchFoundation;
                exports2.default = MDCSwitchFoundation;
              }
            ),
            /***/
            "./packages/mdc-switch/deprecated/index.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-switch/deprecated/index.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-switch/deprecated/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-switch/deprecated/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-switch/deprecated/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-switch/deprecated/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-switch/foundation.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-switch/foundation.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSwitchRenderFoundation = exports2.MDCSwitchFoundation = void 0;
                var observer_foundation_1 = __webpack_require__(
                  /*! @material/base/observer-foundation */
                  "./packages/mdc-base/observer-foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-switch/constants.ts"
                );
                var MDCSwitchFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSwitchFoundation2, _super);
                    function MDCSwitchFoundation2(adapter) {
                      var _this = _super.call(this, adapter) || this;
                      _this.handleClick = _this.handleClick.bind(_this);
                      return _this;
                    }
                    MDCSwitchFoundation2.prototype.init = function() {
                      this.observe(this.adapter.state, {
                        disabled: this.stopProcessingIfDisabled,
                        processing: this.stopProcessingIfDisabled
                      });
                    };
                    MDCSwitchFoundation2.prototype.handleClick = function() {
                      if (this.adapter.state.disabled) {
                        return;
                      }
                      this.adapter.state.selected = !this.adapter.state.selected;
                    };
                    MDCSwitchFoundation2.prototype.stopProcessingIfDisabled = function() {
                      if (this.adapter.state.disabled) {
                        this.adapter.state.processing = false;
                      }
                    };
                    return MDCSwitchFoundation2;
                  }(observer_foundation_1.MDCObserverFoundation)
                );
                exports2.MDCSwitchFoundation = MDCSwitchFoundation;
                var MDCSwitchRenderFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSwitchRenderFoundation2, _super);
                    function MDCSwitchRenderFoundation2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSwitchRenderFoundation2.prototype.init = function() {
                      _super.prototype.init.call(this);
                      this.observe(this.adapter.state, {
                        disabled: this.onDisabledChange,
                        processing: this.onProcessingChange,
                        selected: this.onSelectedChange
                      });
                    };
                    MDCSwitchRenderFoundation2.prototype.initFromDOM = function() {
                      this.setObserversEnabled(this.adapter.state, false);
                      this.adapter.state.selected = this.adapter.hasClass(constants_1.CssClasses.SELECTED);
                      this.onSelectedChange();
                      this.adapter.state.disabled = this.adapter.isDisabled();
                      this.adapter.state.processing = this.adapter.hasClass(constants_1.CssClasses.PROCESSING);
                      this.setObserversEnabled(this.adapter.state, true);
                      this.stopProcessingIfDisabled();
                    };
                    MDCSwitchRenderFoundation2.prototype.onDisabledChange = function() {
                      this.adapter.setDisabled(this.adapter.state.disabled);
                    };
                    MDCSwitchRenderFoundation2.prototype.onProcessingChange = function() {
                      this.toggleClass(this.adapter.state.processing, constants_1.CssClasses.PROCESSING);
                    };
                    MDCSwitchRenderFoundation2.prototype.onSelectedChange = function() {
                      this.adapter.setAriaChecked(String(this.adapter.state.selected));
                      this.toggleClass(this.adapter.state.selected, constants_1.CssClasses.SELECTED);
                      this.toggleClass(!this.adapter.state.selected, constants_1.CssClasses.UNSELECTED);
                    };
                    MDCSwitchRenderFoundation2.prototype.toggleClass = function(addClass, className) {
                      if (addClass) {
                        this.adapter.addClass(className);
                      } else {
                        this.adapter.removeClass(className);
                      }
                    };
                    return MDCSwitchRenderFoundation2;
                  }(MDCSwitchFoundation)
                );
                exports2.MDCSwitchRenderFoundation = MDCSwitchRenderFoundation;
              }
            ),
            /***/
            "./packages/mdc-switch/index.ts": (
              /*!**************************************!*\
                !*** ./packages/mdc-switch/index.ts ***!
                \**************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.deprecated = void 0;
                var deprecated = __importStar(__webpack_require__(
                  /*! ./deprecated */
                  "./packages/mdc-switch/deprecated/index.ts"
                ));
                exports2.deprecated = deprecated;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-switch/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-switch/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-switch/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-switch/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-tab-bar/adapter.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-tab-bar/adapter.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab-bar/component.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-tab-bar/component.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabBar = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/tab-scroller/component */
                  "./packages/mdc-tab-scroller/component.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/tab/component */
                  "./packages/mdc-tab/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/tab/foundation */
                  "./packages/mdc-tab/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-bar/foundation.ts"
                );
                var strings = foundation_2.MDCTabBarFoundation.strings;
                var tabIdCounter = 0;
                var MDCTabBar = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabBar2, _super);
                    function MDCTabBar2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabBar2.attachTo = function(root) {
                      return new MDCTabBar2(root);
                    };
                    Object.defineProperty(MDCTabBar2.prototype, "focusOnActivate", {
                      set: function set(focusOnActivate) {
                        var e_1, _a;
                        try {
                          for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var tab = _c.value;
                            tab.focusOnActivate = focusOnActivate;
                          }
                        } catch (e_1_1) {
                          e_1 = { error: e_1_1 };
                        } finally {
                          try {
                            if (_c && !_c.done && (_a = _b.return))
                              _a.call(_b);
                          } finally {
                            if (e_1)
                              throw e_1.error;
                          }
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabBar2.prototype, "useAutomaticActivation", {
                      set: function set(useAutomaticActivation) {
                        this.foundation.setUseAutomaticActivation(useAutomaticActivation);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTabBar2.prototype.initialize = function(tabFactory, tabScrollerFactory) {
                      if (tabFactory === void 0) {
                        tabFactory = function tabFactory2(el) {
                          return new component_3.MDCTab(el);
                        };
                      }
                      if (tabScrollerFactory === void 0) {
                        tabScrollerFactory = function tabScrollerFactory2(el) {
                          return new component_2.MDCTabScroller(el);
                        };
                      }
                      this.tabList = this.instantiateTabs(tabFactory);
                      this.tabScroller = this.instantiatetabScroller(tabScrollerFactory);
                    };
                    MDCTabBar2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleTabInteraction = function(evt) {
                        _this.foundation.handleTabInteraction(evt);
                      };
                      this.handleKeyDown = function(evt) {
                        _this.foundation.handleKeyDown(evt);
                      };
                      this.listen(foundation_1.MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
                      this.listen("keydown", this.handleKeyDown);
                      for (var i = 0; i < this.tabList.length; i++) {
                        if (this.tabList[i].active) {
                          this.scrollIntoView(i);
                          break;
                        }
                      }
                    };
                    MDCTabBar2.prototype.destroy = function() {
                      var e_2, _a;
                      _super.prototype.destroy.call(this);
                      this.unlisten(foundation_1.MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
                      this.unlisten("keydown", this.handleKeyDown);
                      try {
                        for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var tab = _c.value;
                          tab.destroy();
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                      if (this.tabScroller) {
                        this.tabScroller.destroy();
                      }
                    };
                    MDCTabBar2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        scrollTo: function scrollTo(scrollX) {
                          _this.tabScroller.scrollTo(scrollX);
                        },
                        incrementScroll: function incrementScroll(scrollXIncrement) {
                          _this.tabScroller.incrementScroll(scrollXIncrement);
                        },
                        getScrollPosition: function getScrollPosition() {
                          return _this.tabScroller.getScrollPosition();
                        },
                        getScrollContentWidth: function getScrollContentWidth() {
                          return _this.tabScroller.getScrollContentWidth();
                        },
                        getOffsetWidth: function getOffsetWidth() {
                          return _this.root.offsetWidth;
                        },
                        isRTL: function isRTL() {
                          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
                        },
                        setActiveTab: function setActiveTab(index) {
                          _this.foundation.activateTab(index);
                        },
                        activateTabAtIndex: function activateTabAtIndex(index, clientRect) {
                          _this.tabList[index].activate(clientRect);
                        },
                        deactivateTabAtIndex: function deactivateTabAtIndex(index) {
                          _this.tabList[index].deactivate();
                        },
                        focusTabAtIndex: function focusTabAtIndex(index) {
                          _this.tabList[index].focus();
                        },
                        getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex(index) {
                          return _this.tabList[index].computeIndicatorClientRect();
                        },
                        getTabDimensionsAtIndex: function getTabDimensionsAtIndex(index) {
                          return _this.tabList[index].computeDimensions();
                        },
                        getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
                          for (var i = 0; i < _this.tabList.length; i++) {
                            if (_this.tabList[i].active) {
                              return i;
                            }
                          }
                          return -1;
                        },
                        getFocusedTabIndex: function getFocusedTabIndex() {
                          var tabElements = _this.getTabElements();
                          var activeElement = document.activeElement;
                          return tabElements.indexOf(activeElement);
                        },
                        getIndexOfTabById: function getIndexOfTabById(id) {
                          for (var i = 0; i < _this.tabList.length; i++) {
                            if (_this.tabList[i].id === id) {
                              return i;
                            }
                          }
                          return -1;
                        },
                        getTabListLength: function getTabListLength() {
                          return _this.tabList.length;
                        },
                        notifyTabActivated: function notifyTabActivated(index) {
                          return _this.emit(strings.TAB_ACTIVATED_EVENT, { index }, true);
                        }
                      };
                      return new foundation_2.MDCTabBarFoundation(adapter);
                    };
                    MDCTabBar2.prototype.activateTab = function(index) {
                      this.foundation.activateTab(index);
                    };
                    MDCTabBar2.prototype.scrollIntoView = function(index) {
                      this.foundation.scrollIntoView(index);
                    };
                    MDCTabBar2.prototype.getTabElements = function() {
                      return [].slice.call(this.root.querySelectorAll(strings.TAB_SELECTOR));
                    };
                    MDCTabBar2.prototype.instantiateTabs = function(tabFactory) {
                      return this.getTabElements().map(function(el) {
                        el.id = el.id || "mdc-tab-" + ++tabIdCounter;
                        return tabFactory(el);
                      });
                    };
                    MDCTabBar2.prototype.instantiatetabScroller = function(tabScrollerFactory) {
                      var tabScrollerElement = this.root.querySelector(strings.TAB_SCROLLER_SELECTOR);
                      if (tabScrollerElement) {
                        return tabScrollerFactory(tabScrollerElement);
                      }
                      return null;
                    };
                    return MDCTabBar2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTabBar = MDCTabBar;
              }
            ),
            /***/
            "./packages/mdc-tab-bar/constants.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-tab-bar/constants.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.numbers = void 0;
                var strings = {
                  ARROW_LEFT_KEY: "ArrowLeft",
                  ARROW_RIGHT_KEY: "ArrowRight",
                  END_KEY: "End",
                  ENTER_KEY: "Enter",
                  HOME_KEY: "Home",
                  SPACE_KEY: "Space",
                  TAB_ACTIVATED_EVENT: "MDCTabBar:activated",
                  TAB_SCROLLER_SELECTOR: ".mdc-tab-scroller",
                  TAB_SELECTOR: ".mdc-tab"
                };
                exports2.strings = strings;
                var numbers = {
                  ARROW_LEFT_KEYCODE: 37,
                  ARROW_RIGHT_KEYCODE: 39,
                  END_KEYCODE: 35,
                  ENTER_KEYCODE: 13,
                  EXTRA_SCROLL_AMOUNT: 20,
                  HOME_KEYCODE: 36,
                  SPACE_KEYCODE: 32
                };
                exports2.numbers = numbers;
              }
            ),
            /***/
            "./packages/mdc-tab-bar/foundation.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-tab-bar/foundation.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabBarFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-bar/constants.ts"
                );
                var ACCEPTABLE_KEYS = /* @__PURE__ */ new Set();
                ACCEPTABLE_KEYS.add(constants_1.strings.ARROW_LEFT_KEY);
                ACCEPTABLE_KEYS.add(constants_1.strings.ARROW_RIGHT_KEY);
                ACCEPTABLE_KEYS.add(constants_1.strings.END_KEY);
                ACCEPTABLE_KEYS.add(constants_1.strings.HOME_KEY);
                ACCEPTABLE_KEYS.add(constants_1.strings.ENTER_KEY);
                ACCEPTABLE_KEYS.add(constants_1.strings.SPACE_KEY);
                var KEYCODE_MAP = /* @__PURE__ */ new Map();
                KEYCODE_MAP.set(constants_1.numbers.ARROW_LEFT_KEYCODE, constants_1.strings.ARROW_LEFT_KEY);
                KEYCODE_MAP.set(constants_1.numbers.ARROW_RIGHT_KEYCODE, constants_1.strings.ARROW_RIGHT_KEY);
                KEYCODE_MAP.set(constants_1.numbers.END_KEYCODE, constants_1.strings.END_KEY);
                KEYCODE_MAP.set(constants_1.numbers.HOME_KEYCODE, constants_1.strings.HOME_KEY);
                KEYCODE_MAP.set(constants_1.numbers.ENTER_KEYCODE, constants_1.strings.ENTER_KEY);
                KEYCODE_MAP.set(constants_1.numbers.SPACE_KEYCODE, constants_1.strings.SPACE_KEY);
                var MDCTabBarFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabBarFoundation2, _super);
                    function MDCTabBarFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation2.defaultAdapter), adapter)) || this;
                      _this.useAutomaticActivation = false;
                      return _this;
                    }
                    Object.defineProperty(MDCTabBarFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabBarFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabBarFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          scrollTo: function scrollTo() {
                            return void 0;
                          },
                          incrementScroll: function incrementScroll() {
                            return void 0;
                          },
                          getScrollPosition: function getScrollPosition() {
                            return 0;
                          },
                          getScrollContentWidth: function getScrollContentWidth() {
                            return 0;
                          },
                          getOffsetWidth: function getOffsetWidth() {
                            return 0;
                          },
                          isRTL: function isRTL() {
                            return false;
                          },
                          setActiveTab: function setActiveTab() {
                            return void 0;
                          },
                          activateTabAtIndex: function activateTabAtIndex() {
                            return void 0;
                          },
                          deactivateTabAtIndex: function deactivateTabAtIndex() {
                            return void 0;
                          },
                          focusTabAtIndex: function focusTabAtIndex() {
                            return void 0;
                          },
                          getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          getTabDimensionsAtIndex: function getTabDimensionsAtIndex() {
                            return { rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 };
                          },
                          getPreviousActiveTabIndex: function getPreviousActiveTabIndex() {
                            return -1;
                          },
                          getFocusedTabIndex: function getFocusedTabIndex() {
                            return -1;
                          },
                          getIndexOfTabById: function getIndexOfTabById() {
                            return -1;
                          },
                          getTabListLength: function getTabListLength() {
                            return 0;
                          },
                          notifyTabActivated: function notifyTabActivated() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTabBarFoundation2.prototype.setUseAutomaticActivation = function(useAutomaticActivation) {
                      this.useAutomaticActivation = useAutomaticActivation;
                    };
                    MDCTabBarFoundation2.prototype.activateTab = function(index) {
                      var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
                      if (!this.indexIsInRange(index) || index === previousActiveIndex) {
                        return;
                      }
                      var previousClientRect;
                      if (previousActiveIndex !== -1) {
                        this.adapter.deactivateTabAtIndex(previousActiveIndex);
                        previousClientRect = this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
                      }
                      this.adapter.activateTabAtIndex(index, previousClientRect);
                      this.scrollIntoView(index);
                      this.adapter.notifyTabActivated(index);
                    };
                    MDCTabBarFoundation2.prototype.handleKeyDown = function(evt) {
                      var key = this.getKeyFromEvent(evt);
                      if (key === void 0) {
                        return;
                      }
                      if (!this.isActivationKey(key)) {
                        evt.preventDefault();
                      }
                      if (this.useAutomaticActivation) {
                        if (this.isActivationKey(key)) {
                          return;
                        }
                        var index = this.determineTargetFromKey(this.adapter.getPreviousActiveTabIndex(), key);
                        this.adapter.setActiveTab(index);
                        this.scrollIntoView(index);
                      } else {
                        var focusedTabIndex = this.adapter.getFocusedTabIndex();
                        if (this.isActivationKey(key)) {
                          this.adapter.setActiveTab(focusedTabIndex);
                        } else {
                          var index = this.determineTargetFromKey(focusedTabIndex, key);
                          this.adapter.focusTabAtIndex(index);
                          this.scrollIntoView(index);
                        }
                      }
                    };
                    MDCTabBarFoundation2.prototype.handleTabInteraction = function(evt) {
                      this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
                    };
                    MDCTabBarFoundation2.prototype.scrollIntoView = function(index) {
                      if (!this.indexIsInRange(index)) {
                        return;
                      }
                      if (index === 0) {
                        this.adapter.scrollTo(0);
                        return;
                      }
                      if (index === this.adapter.getTabListLength() - 1) {
                        this.adapter.scrollTo(this.adapter.getScrollContentWidth());
                        return;
                      }
                      if (this.isRTL()) {
                        this.scrollIntoViewImplRTL(index);
                        return;
                      }
                      this.scrollIntoViewImpl(index);
                    };
                    MDCTabBarFoundation2.prototype.determineTargetFromKey = function(origin, key) {
                      var isRTL = this.isRTL();
                      var maxIndex = this.adapter.getTabListLength() - 1;
                      var shouldGoToEnd = key === constants_1.strings.END_KEY;
                      var shouldDecrement = key === constants_1.strings.ARROW_LEFT_KEY && !isRTL || key === constants_1.strings.ARROW_RIGHT_KEY && isRTL;
                      var shouldIncrement = key === constants_1.strings.ARROW_RIGHT_KEY && !isRTL || key === constants_1.strings.ARROW_LEFT_KEY && isRTL;
                      var index = origin;
                      if (shouldGoToEnd) {
                        index = maxIndex;
                      } else if (shouldDecrement) {
                        index -= 1;
                      } else if (shouldIncrement) {
                        index += 1;
                      } else {
                        index = 0;
                      }
                      if (index < 0) {
                        index = maxIndex;
                      } else if (index > maxIndex) {
                        index = 0;
                      }
                      return index;
                    };
                    MDCTabBarFoundation2.prototype.calculateScrollIncrement = function(index, nextIndex, scrollPosition, barWidth) {
                      var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
                      var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
                      var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
                      var leftIncrement = relativeContentRight - constants_1.numbers.EXTRA_SCROLL_AMOUNT;
                      var rightIncrement = relativeContentLeft + constants_1.numbers.EXTRA_SCROLL_AMOUNT;
                      if (nextIndex < index) {
                        return Math.min(leftIncrement, 0);
                      }
                      return Math.max(rightIncrement, 0);
                    };
                    MDCTabBarFoundation2.prototype.calculateScrollIncrementRTL = function(index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
                      var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
                      var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
                      var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
                      var leftIncrement = relativeContentRight + constants_1.numbers.EXTRA_SCROLL_AMOUNT;
                      var rightIncrement = relativeContentLeft - constants_1.numbers.EXTRA_SCROLL_AMOUNT;
                      if (nextIndex > index) {
                        return Math.max(leftIncrement, 0);
                      }
                      return Math.min(rightIncrement, 0);
                    };
                    MDCTabBarFoundation2.prototype.findAdjacentTabIndexClosestToEdge = function(index, tabDimensions, scrollPosition, barWidth) {
                      var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
                      var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
                      var relativeRootDelta = relativeRootLeft + relativeRootRight;
                      var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
                      var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
                      if (leftEdgeIsCloser) {
                        return index - 1;
                      }
                      if (rightEdgeIsCloser) {
                        return index + 1;
                      }
                      return -1;
                    };
                    MDCTabBarFoundation2.prototype.findAdjacentTabIndexClosestToEdgeRTL = function(index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
                      var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
                      var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
                      var rootDelta = rootLeft + rootRight;
                      var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
                      var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
                      if (leftEdgeIsCloser) {
                        return index + 1;
                      }
                      if (rightEdgeIsCloser) {
                        return index - 1;
                      }
                      return -1;
                    };
                    MDCTabBarFoundation2.prototype.getKeyFromEvent = function(evt) {
                      if (ACCEPTABLE_KEYS.has(evt.key)) {
                        return evt.key;
                      }
                      return KEYCODE_MAP.get(evt.keyCode);
                    };
                    MDCTabBarFoundation2.prototype.isActivationKey = function(key) {
                      return key === constants_1.strings.SPACE_KEY || key === constants_1.strings.ENTER_KEY;
                    };
                    MDCTabBarFoundation2.prototype.indexIsInRange = function(index) {
                      return index >= 0 && index < this.adapter.getTabListLength();
                    };
                    MDCTabBarFoundation2.prototype.isRTL = function() {
                      return this.adapter.isRTL();
                    };
                    MDCTabBarFoundation2.prototype.scrollIntoViewImpl = function(index) {
                      var scrollPosition = this.adapter.getScrollPosition();
                      var barWidth = this.adapter.getOffsetWidth();
                      var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
                      var nextIndex = this.findAdjacentTabIndexClosestToEdge(index, tabDimensions, scrollPosition, barWidth);
                      if (!this.indexIsInRange(nextIndex)) {
                        return;
                      }
                      var scrollIncrement = this.calculateScrollIncrement(index, nextIndex, scrollPosition, barWidth);
                      this.adapter.incrementScroll(scrollIncrement);
                    };
                    MDCTabBarFoundation2.prototype.scrollIntoViewImplRTL = function(index) {
                      var scrollPosition = this.adapter.getScrollPosition();
                      var barWidth = this.adapter.getOffsetWidth();
                      var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
                      var scrollWidth = this.adapter.getScrollContentWidth();
                      var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
                      if (!this.indexIsInRange(nextIndex)) {
                        return;
                      }
                      var scrollIncrement = this.calculateScrollIncrementRTL(index, nextIndex, scrollPosition, barWidth, scrollWidth);
                      this.adapter.incrementScroll(scrollIncrement);
                    };
                    return MDCTabBarFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTabBarFoundation = MDCTabBarFoundation;
                exports2.default = MDCTabBarFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab-bar/index.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-tab-bar/index.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-tab-bar/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-tab-bar/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-bar/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-bar/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-tab-bar/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-tab-bar/types.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-tab-bar/types.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/adapter.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-tab-indicator/adapter.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/component.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-tab-indicator/component.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabIndicator = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var fading_foundation_1 = __webpack_require__(
                  /*! ./fading-foundation */
                  "./packages/mdc-tab-indicator/fading-foundation.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-indicator/foundation.ts"
                );
                var sliding_foundation_1 = __webpack_require__(
                  /*! ./sliding-foundation */
                  "./packages/mdc-tab-indicator/sliding-foundation.ts"
                );
                var MDCTabIndicator = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabIndicator2, _super);
                    function MDCTabIndicator2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabIndicator2.attachTo = function(root) {
                      return new MDCTabIndicator2(root);
                    };
                    MDCTabIndicator2.prototype.initialize = function() {
                      this.content = this.root.querySelector(foundation_1.MDCTabIndicatorFoundation.strings.CONTENT_SELECTOR);
                    };
                    MDCTabIndicator2.prototype.computeContentClientRect = function() {
                      return this.foundation.computeContentClientRect();
                    };
                    MDCTabIndicator2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        computeContentClientRect: function computeContentClientRect() {
                          return _this.content.getBoundingClientRect();
                        },
                        setContentStyleProperty: function setContentStyleProperty(prop, value) {
                          _this.content.style.setProperty(prop, value);
                        }
                      };
                      if (this.root.classList.contains(foundation_1.MDCTabIndicatorFoundation.cssClasses.FADE)) {
                        return new fading_foundation_1.MDCFadingTabIndicatorFoundation(adapter);
                      }
                      return new sliding_foundation_1.MDCSlidingTabIndicatorFoundation(adapter);
                    };
                    MDCTabIndicator2.prototype.activate = function(previousIndicatorClientRect) {
                      this.foundation.activate(previousIndicatorClientRect);
                    };
                    MDCTabIndicator2.prototype.deactivate = function() {
                      this.foundation.deactivate();
                    };
                    return MDCTabIndicator2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTabIndicator = MDCTabIndicator;
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/constants.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-tab-indicator/constants.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ACTIVE: "mdc-tab-indicator--active",
                  FADE: "mdc-tab-indicator--fade",
                  NO_TRANSITION: "mdc-tab-indicator--no-transition"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  CONTENT_SELECTOR: ".mdc-tab-indicator__content"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/fading-foundation.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-tab-indicator/fading-foundation.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFadingTabIndicatorFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-indicator/foundation.ts"
                );
                var MDCFadingTabIndicatorFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFadingTabIndicatorFoundation2, _super);
                    function MDCFadingTabIndicatorFoundation2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCFadingTabIndicatorFoundation2.prototype.activate = function() {
                      this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                    };
                    MDCFadingTabIndicatorFoundation2.prototype.deactivate = function() {
                      this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                    };
                    return MDCFadingTabIndicatorFoundation2;
                  }(foundation_1.MDCTabIndicatorFoundation)
                );
                exports2.MDCFadingTabIndicatorFoundation = MDCFadingTabIndicatorFoundation;
                exports2.default = MDCFadingTabIndicatorFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/foundation.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-tab-indicator/foundation.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabIndicatorFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-indicator/constants.ts"
                );
                var MDCTabIndicatorFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabIndicatorFoundation2, _super);
                    function MDCTabIndicatorFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCTabIndicatorFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabIndicatorFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabIndicatorFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          computeContentClientRect: function computeContentClientRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          setContentStyleProperty: function setContentStyleProperty() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTabIndicatorFoundation2.prototype.computeContentClientRect = function() {
                      return this.adapter.computeContentClientRect();
                    };
                    return MDCTabIndicatorFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTabIndicatorFoundation = MDCTabIndicatorFoundation;
                exports2.default = MDCTabIndicatorFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/index.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-tab-indicator/index.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-tab-indicator/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-tab-indicator/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-indicator/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-indicator/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./fading-foundation */
                  "./packages/mdc-tab-indicator/fading-foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./sliding-foundation */
                  "./packages/mdc-tab-indicator/sliding-foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-tab-indicator/sliding-foundation.ts": (
              /*!**********************************************************!*\
                !*** ./packages/mdc-tab-indicator/sliding-foundation.ts ***!
                \**********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCSlidingTabIndicatorFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-indicator/foundation.ts"
                );
                var MDCSlidingTabIndicatorFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCSlidingTabIndicatorFoundation2, _super);
                    function MDCSlidingTabIndicatorFoundation2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCSlidingTabIndicatorFoundation2.prototype.activate = function(previousIndicatorClientRect) {
                      if (!previousIndicatorClientRect) {
                        this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                        return;
                      }
                      var currentClientRect = this.computeContentClientRect();
                      var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
                      var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
                      this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
                      this.adapter.setContentStyleProperty("transform", "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
                      this.computeContentClientRect();
                      this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
                      this.adapter.addClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                      this.adapter.setContentStyleProperty("transform", "");
                    };
                    MDCSlidingTabIndicatorFoundation2.prototype.deactivate = function() {
                      this.adapter.removeClass(foundation_1.MDCTabIndicatorFoundation.cssClasses.ACTIVE);
                    };
                    return MDCSlidingTabIndicatorFoundation2;
                  }(foundation_1.MDCTabIndicatorFoundation)
                );
                exports2.MDCSlidingTabIndicatorFoundation = MDCSlidingTabIndicatorFoundation;
                exports2.default = MDCSlidingTabIndicatorFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/adapter.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-tab-scroller/adapter.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/component.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-tab-scroller/component.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScroller = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill_1 = __webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-scroller/foundation.ts"
                );
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-tab-scroller/util.ts"
                ));
                var MDCTabScroller = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabScroller2, _super);
                    function MDCTabScroller2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabScroller2.attachTo = function(root) {
                      return new MDCTabScroller2(root);
                    };
                    MDCTabScroller2.prototype.initialize = function() {
                      this.area = this.root.querySelector(foundation_1.MDCTabScrollerFoundation.strings.AREA_SELECTOR);
                      this.content = this.root.querySelector(foundation_1.MDCTabScrollerFoundation.strings.CONTENT_SELECTOR);
                    };
                    MDCTabScroller2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleInteraction = function() {
                        _this.foundation.handleInteraction();
                      };
                      this.handleTransitionEnd = function(evt) {
                        _this.foundation.handleTransitionEnd(evt);
                      };
                      this.area.addEventListener("wheel", this.handleInteraction, events_1.applyPassive());
                      this.area.addEventListener("touchstart", this.handleInteraction, events_1.applyPassive());
                      this.area.addEventListener("pointerdown", this.handleInteraction, events_1.applyPassive());
                      this.area.addEventListener("mousedown", this.handleInteraction, events_1.applyPassive());
                      this.area.addEventListener("keydown", this.handleInteraction, events_1.applyPassive());
                      this.content.addEventListener("transitionend", this.handleTransitionEnd);
                    };
                    MDCTabScroller2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.area.removeEventListener("wheel", this.handleInteraction, events_1.applyPassive());
                      this.area.removeEventListener("touchstart", this.handleInteraction, events_1.applyPassive());
                      this.area.removeEventListener("pointerdown", this.handleInteraction, events_1.applyPassive());
                      this.area.removeEventListener("mousedown", this.handleInteraction, events_1.applyPassive());
                      this.area.removeEventListener("keydown", this.handleInteraction, events_1.applyPassive());
                      this.content.removeEventListener("transitionend", this.handleTransitionEnd);
                    };
                    MDCTabScroller2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        eventTargetMatchesSelector: function eventTargetMatchesSelector(evtTarget, selector) {
                          return ponyfill_1.matches(evtTarget, selector);
                        },
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        addScrollAreaClass: function addScrollAreaClass(className) {
                          _this.area.classList.add(className);
                        },
                        setScrollAreaStyleProperty: function setScrollAreaStyleProperty(prop, value) {
                          _this.area.style.setProperty(prop, value);
                        },
                        setScrollContentStyleProperty: function setScrollContentStyleProperty(prop, value) {
                          _this.content.style.setProperty(prop, value);
                        },
                        getScrollContentStyleValue: function getScrollContentStyleValue(propName) {
                          return window.getComputedStyle(_this.content).getPropertyValue(propName);
                        },
                        setScrollAreaScrollLeft: function setScrollAreaScrollLeft(scrollX) {
                          return _this.area.scrollLeft = scrollX;
                        },
                        getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
                          return _this.area.scrollLeft;
                        },
                        getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
                          return _this.content.offsetWidth;
                        },
                        getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
                          return _this.area.offsetWidth;
                        },
                        computeScrollAreaClientRect: function computeScrollAreaClientRect() {
                          return _this.area.getBoundingClientRect();
                        },
                        computeScrollContentClientRect: function computeScrollContentClientRect() {
                          return _this.content.getBoundingClientRect();
                        },
                        computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight() {
                          return util.computeHorizontalScrollbarHeight(document);
                        }
                      };
                      return new foundation_1.MDCTabScrollerFoundation(adapter);
                    };
                    MDCTabScroller2.prototype.getScrollPosition = function() {
                      return this.foundation.getScrollPosition();
                    };
                    MDCTabScroller2.prototype.getScrollContentWidth = function() {
                      return this.content.offsetWidth;
                    };
                    MDCTabScroller2.prototype.incrementScroll = function(scrollXIncrement) {
                      this.foundation.incrementScroll(scrollXIncrement);
                    };
                    MDCTabScroller2.prototype.scrollTo = function(scrollX) {
                      this.foundation.scrollTo(scrollX);
                    };
                    return MDCTabScroller2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTabScroller = MDCTabScroller;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/constants.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-tab-scroller/constants.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ANIMATING: "mdc-tab-scroller--animating",
                  SCROLL_AREA_SCROLL: "mdc-tab-scroller__scroll-area--scroll",
                  SCROLL_TEST: "mdc-tab-scroller__test"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  AREA_SELECTOR: ".mdc-tab-scroller__scroll-area",
                  CONTENT_SELECTOR: ".mdc-tab-scroller__scroll-content"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/foundation.ts": (
              /*!*************************************************!*\
                !*** ./packages/mdc-tab-scroller/foundation.ts ***!
                \*************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __read = this && this.__read || function(o, n) {
                  var m = typeof Symbol === "function" && o[Symbol.iterator];
                  if (!m)
                    return o;
                  var i = m.call(o), r, ar = [], e;
                  try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                      ar.push(r.value);
                    }
                  } catch (error) {
                    e = { error };
                  } finally {
                    try {
                      if (r && !r.done && (m = i["return"]))
                        m.call(i);
                    } finally {
                      if (e)
                        throw e.error;
                    }
                  }
                  return ar;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScrollerFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-scroller/constants.ts"
                );
                var rtl_default_scroller_1 = __webpack_require__(
                  /*! ./rtl-default-scroller */
                  "./packages/mdc-tab-scroller/rtl-default-scroller.ts"
                );
                var rtl_negative_scroller_1 = __webpack_require__(
                  /*! ./rtl-negative-scroller */
                  "./packages/mdc-tab-scroller/rtl-negative-scroller.ts"
                );
                var rtl_reverse_scroller_1 = __webpack_require__(
                  /*! ./rtl-reverse-scroller */
                  "./packages/mdc-tab-scroller/rtl-reverse-scroller.ts"
                );
                var MDCTabScrollerFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabScrollerFoundation2, _super);
                    function MDCTabScrollerFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation2.defaultAdapter), adapter)) || this;
                      _this.isAnimating = false;
                      return _this;
                    }
                    Object.defineProperty(MDCTabScrollerFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabScrollerFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabScrollerFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          eventTargetMatchesSelector: function eventTargetMatchesSelector() {
                            return false;
                          },
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          addScrollAreaClass: function addScrollAreaClass() {
                            return void 0;
                          },
                          setScrollAreaStyleProperty: function setScrollAreaStyleProperty() {
                            return void 0;
                          },
                          setScrollContentStyleProperty: function setScrollContentStyleProperty() {
                            return void 0;
                          },
                          getScrollContentStyleValue: function getScrollContentStyleValue() {
                            return "";
                          },
                          setScrollAreaScrollLeft: function setScrollAreaScrollLeft() {
                            return void 0;
                          },
                          getScrollAreaScrollLeft: function getScrollAreaScrollLeft() {
                            return 0;
                          },
                          getScrollContentOffsetWidth: function getScrollContentOffsetWidth() {
                            return 0;
                          },
                          getScrollAreaOffsetWidth: function getScrollAreaOffsetWidth() {
                            return 0;
                          },
                          computeScrollAreaClientRect: function computeScrollAreaClientRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          computeScrollContentClientRect: function computeScrollContentClientRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          computeHorizontalScrollbarHeight: function computeHorizontalScrollbarHeight() {
                            return 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTabScrollerFoundation2.prototype.init = function() {
                      var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
                      this.adapter.setScrollAreaStyleProperty("margin-bottom", -horizontalScrollbarHeight + "px");
                      this.adapter.addScrollAreaClass(MDCTabScrollerFoundation2.cssClasses.SCROLL_AREA_SCROLL);
                    };
                    MDCTabScrollerFoundation2.prototype.getScrollPosition = function() {
                      if (this.isRTL()) {
                        return this.computeCurrentScrollPositionRTL();
                      }
                      var currentTranslateX = this.calculateCurrentTranslateX();
                      var scrollLeft = this.adapter.getScrollAreaScrollLeft();
                      return scrollLeft - currentTranslateX;
                    };
                    MDCTabScrollerFoundation2.prototype.handleInteraction = function() {
                      if (!this.isAnimating) {
                        return;
                      }
                      this.stopScrollAnimation();
                    };
                    MDCTabScrollerFoundation2.prototype.handleTransitionEnd = function(evt) {
                      var evtTarget = evt.target;
                      if (!this.isAnimating || !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation2.strings.CONTENT_SELECTOR)) {
                        return;
                      }
                      this.isAnimating = false;
                      this.adapter.removeClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
                    };
                    MDCTabScrollerFoundation2.prototype.incrementScroll = function(scrollXIncrement) {
                      if (scrollXIncrement === 0) {
                        return;
                      }
                      this.animate(this.getIncrementScrollOperation(scrollXIncrement));
                    };
                    MDCTabScrollerFoundation2.prototype.incrementScrollImmediate = function(scrollXIncrement) {
                      if (scrollXIncrement === 0) {
                        return;
                      }
                      var operation = this.getIncrementScrollOperation(scrollXIncrement);
                      if (operation.scrollDelta === 0) {
                        return;
                      }
                      this.stopScrollAnimation();
                      this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
                    };
                    MDCTabScrollerFoundation2.prototype.scrollTo = function(scrollX) {
                      if (this.isRTL()) {
                        this.scrollToImplRTL(scrollX);
                        return;
                      }
                      this.scrollToImpl(scrollX);
                    };
                    MDCTabScrollerFoundation2.prototype.getRTLScroller = function() {
                      if (!this.rtlScrollerInstance) {
                        this.rtlScrollerInstance = this.rtlScrollerFactory();
                      }
                      return this.rtlScrollerInstance;
                    };
                    MDCTabScrollerFoundation2.prototype.calculateCurrentTranslateX = function() {
                      var transformValue = this.adapter.getScrollContentStyleValue("transform");
                      if (transformValue === "none") {
                        return 0;
                      }
                      var match = /\((.+?)\)/.exec(transformValue);
                      if (!match) {
                        return 0;
                      }
                      var matrixParams = match[1];
                      var _a = __read(matrixParams.split(","), 6), a = _a[0], b = _a[1], c = _a[2], d = _a[3], tx = _a[4], ty = _a[5];
                      return parseFloat(tx);
                    };
                    MDCTabScrollerFoundation2.prototype.clampScrollValue = function(scrollX) {
                      var edges = this.calculateScrollEdges();
                      return Math.min(Math.max(edges.left, scrollX), edges.right);
                    };
                    MDCTabScrollerFoundation2.prototype.computeCurrentScrollPositionRTL = function() {
                      var translateX = this.calculateCurrentTranslateX();
                      return this.getRTLScroller().getScrollPositionRTL(translateX);
                    };
                    MDCTabScrollerFoundation2.prototype.calculateScrollEdges = function() {
                      var contentWidth = this.adapter.getScrollContentOffsetWidth();
                      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
                      return {
                        left: 0,
                        right: contentWidth - rootWidth
                      };
                    };
                    MDCTabScrollerFoundation2.prototype.scrollToImpl = function(scrollX) {
                      var currentScrollX = this.getScrollPosition();
                      var safeScrollX = this.clampScrollValue(scrollX);
                      var scrollDelta = safeScrollX - currentScrollX;
                      this.animate({
                        finalScrollPosition: safeScrollX,
                        scrollDelta
                      });
                    };
                    MDCTabScrollerFoundation2.prototype.scrollToImplRTL = function(scrollX) {
                      var animation = this.getRTLScroller().scrollToRTL(scrollX);
                      this.animate(animation);
                    };
                    MDCTabScrollerFoundation2.prototype.getIncrementScrollOperation = function(scrollX) {
                      if (this.isRTL()) {
                        return this.getRTLScroller().incrementScrollRTL(scrollX);
                      }
                      var currentScrollX = this.getScrollPosition();
                      var targetScrollX = scrollX + currentScrollX;
                      var safeScrollX = this.clampScrollValue(targetScrollX);
                      var scrollDelta = safeScrollX - currentScrollX;
                      return {
                        finalScrollPosition: safeScrollX,
                        scrollDelta
                      };
                    };
                    MDCTabScrollerFoundation2.prototype.animate = function(animation) {
                      var _this = this;
                      if (animation.scrollDelta === 0) {
                        return;
                      }
                      this.stopScrollAnimation();
                      this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
                      this.adapter.setScrollContentStyleProperty("transform", "translateX(" + animation.scrollDelta + "px)");
                      this.adapter.computeScrollAreaClientRect();
                      requestAnimationFrame(function() {
                        _this.adapter.addClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
                        _this.adapter.setScrollContentStyleProperty("transform", "none");
                      });
                      this.isAnimating = true;
                    };
                    MDCTabScrollerFoundation2.prototype.stopScrollAnimation = function() {
                      this.isAnimating = false;
                      var currentScrollPosition = this.getAnimatingScrollPosition();
                      this.adapter.removeClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
                      this.adapter.setScrollContentStyleProperty("transform", "translateX(0px)");
                      this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
                    };
                    MDCTabScrollerFoundation2.prototype.getAnimatingScrollPosition = function() {
                      var currentTranslateX = this.calculateCurrentTranslateX();
                      var scrollLeft = this.adapter.getScrollAreaScrollLeft();
                      if (this.isRTL()) {
                        return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
                      }
                      return scrollLeft - currentTranslateX;
                    };
                    MDCTabScrollerFoundation2.prototype.rtlScrollerFactory = function() {
                      var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
                      var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      if (newScrollLeft < 0) {
                        this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
                        return new rtl_negative_scroller_1.MDCTabScrollerRTLNegative(this.adapter);
                      }
                      var rootClientRect = this.adapter.computeScrollAreaClientRect();
                      var contentClientRect = this.adapter.computeScrollContentClientRect();
                      var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
                      this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
                      if (rightEdgeDelta === newScrollLeft) {
                        return new rtl_reverse_scroller_1.MDCTabScrollerRTLReverse(this.adapter);
                      }
                      return new rtl_default_scroller_1.MDCTabScrollerRTLDefault(this.adapter);
                    };
                    MDCTabScrollerFoundation2.prototype.isRTL = function() {
                      return this.adapter.getScrollContentStyleValue("direction") === "rtl";
                    };
                    return MDCTabScrollerFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTabScrollerFoundation = MDCTabScrollerFoundation;
                exports2.default = MDCTabScrollerFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/index.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-tab-scroller/index.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.util = void 0;
                var util = __importStar(__webpack_require__(
                  /*! ./util */
                  "./packages/mdc-tab-scroller/util.ts"
                ));
                exports2.util = util;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-tab-scroller/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-tab-scroller/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-scroller/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab-scroller/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-tab-scroller/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/rtl-default-scroller.ts": (
              /*!***********************************************************!*\
                !*** ./packages/mdc-tab-scroller/rtl-default-scroller.ts ***!
                \***********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScrollerRTLDefault = void 0;
                var rtl_scroller_1 = __webpack_require__(
                  /*! ./rtl-scroller */
                  "./packages/mdc-tab-scroller/rtl-scroller.ts"
                );
                var MDCTabScrollerRTLDefault = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabScrollerRTLDefault2, _super);
                    function MDCTabScrollerRTLDefault2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabScrollerRTLDefault2.prototype.getScrollPositionRTL = function() {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var right = this.calculateScrollEdges().right;
                      return Math.round(right - currentScrollLeft);
                    };
                    MDCTabScrollerRTLDefault2.prototype.scrollToRTL = function(scrollX) {
                      var edges = this.calculateScrollEdges();
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(edges.right - scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: clampedScrollLeft - currentScrollLeft
                      };
                    };
                    MDCTabScrollerRTLDefault2.prototype.incrementScrollRTL = function(scrollX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: clampedScrollLeft - currentScrollLeft
                      };
                    };
                    MDCTabScrollerRTLDefault2.prototype.getAnimatingScrollPosition = function(scrollX) {
                      return scrollX;
                    };
                    MDCTabScrollerRTLDefault2.prototype.calculateScrollEdges = function() {
                      var contentWidth = this.adapter.getScrollContentOffsetWidth();
                      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
                      return {
                        left: 0,
                        right: contentWidth - rootWidth
                      };
                    };
                    MDCTabScrollerRTLDefault2.prototype.clampScrollValue = function(scrollX) {
                      var edges = this.calculateScrollEdges();
                      return Math.min(Math.max(edges.left, scrollX), edges.right);
                    };
                    return MDCTabScrollerRTLDefault2;
                  }(rtl_scroller_1.MDCTabScrollerRTL)
                );
                exports2.MDCTabScrollerRTLDefault = MDCTabScrollerRTLDefault;
                exports2.default = MDCTabScrollerRTLDefault;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/rtl-negative-scroller.ts": (
              /*!************************************************************!*\
                !*** ./packages/mdc-tab-scroller/rtl-negative-scroller.ts ***!
                \************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScrollerRTLNegative = void 0;
                var rtl_scroller_1 = __webpack_require__(
                  /*! ./rtl-scroller */
                  "./packages/mdc-tab-scroller/rtl-scroller.ts"
                );
                var MDCTabScrollerRTLNegative = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabScrollerRTLNegative2, _super);
                    function MDCTabScrollerRTLNegative2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabScrollerRTLNegative2.prototype.getScrollPositionRTL = function(translateX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      return Math.round(translateX - currentScrollLeft);
                    };
                    MDCTabScrollerRTLNegative2.prototype.scrollToRTL = function(scrollX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(-scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: clampedScrollLeft - currentScrollLeft
                      };
                    };
                    MDCTabScrollerRTLNegative2.prototype.incrementScrollRTL = function(scrollX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: clampedScrollLeft - currentScrollLeft
                      };
                    };
                    MDCTabScrollerRTLNegative2.prototype.getAnimatingScrollPosition = function(scrollX, translateX) {
                      return scrollX - translateX;
                    };
                    MDCTabScrollerRTLNegative2.prototype.calculateScrollEdges = function() {
                      var contentWidth = this.adapter.getScrollContentOffsetWidth();
                      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
                      return {
                        left: rootWidth - contentWidth,
                        right: 0
                      };
                    };
                    MDCTabScrollerRTLNegative2.prototype.clampScrollValue = function(scrollX) {
                      var edges = this.calculateScrollEdges();
                      return Math.max(Math.min(edges.right, scrollX), edges.left);
                    };
                    return MDCTabScrollerRTLNegative2;
                  }(rtl_scroller_1.MDCTabScrollerRTL)
                );
                exports2.MDCTabScrollerRTLNegative = MDCTabScrollerRTLNegative;
                exports2.default = MDCTabScrollerRTLNegative;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/rtl-reverse-scroller.ts": (
              /*!***********************************************************!*\
                !*** ./packages/mdc-tab-scroller/rtl-reverse-scroller.ts ***!
                \***********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScrollerRTLReverse = void 0;
                var rtl_scroller_1 = __webpack_require__(
                  /*! ./rtl-scroller */
                  "./packages/mdc-tab-scroller/rtl-scroller.ts"
                );
                var MDCTabScrollerRTLReverse = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabScrollerRTLReverse2, _super);
                    function MDCTabScrollerRTLReverse2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTabScrollerRTLReverse2.prototype.getScrollPositionRTL = function(translateX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      return Math.round(currentScrollLeft - translateX);
                    };
                    MDCTabScrollerRTLReverse2.prototype.scrollToRTL = function(scrollX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: currentScrollLeft - clampedScrollLeft
                      };
                    };
                    MDCTabScrollerRTLReverse2.prototype.incrementScrollRTL = function(scrollX) {
                      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
                      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft + scrollX);
                      return {
                        finalScrollPosition: clampedScrollLeft,
                        scrollDelta: currentScrollLeft - clampedScrollLeft
                      };
                    };
                    MDCTabScrollerRTLReverse2.prototype.getAnimatingScrollPosition = function(scrollX, translateX) {
                      return scrollX + translateX;
                    };
                    MDCTabScrollerRTLReverse2.prototype.calculateScrollEdges = function() {
                      var contentWidth = this.adapter.getScrollContentOffsetWidth();
                      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
                      return {
                        left: contentWidth - rootWidth,
                        right: 0
                      };
                    };
                    MDCTabScrollerRTLReverse2.prototype.clampScrollValue = function(scrollX) {
                      var edges = this.calculateScrollEdges();
                      return Math.min(Math.max(edges.right, scrollX), edges.left);
                    };
                    return MDCTabScrollerRTLReverse2;
                  }(rtl_scroller_1.MDCTabScrollerRTL)
                );
                exports2.MDCTabScrollerRTLReverse = MDCTabScrollerRTLReverse;
                exports2.default = MDCTabScrollerRTLReverse;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/rtl-scroller.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-tab-scroller/rtl-scroller.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabScrollerRTL = void 0;
                var MDCTabScrollerRTL = (
                  /** @class */
                  function() {
                    function MDCTabScrollerRTL2(adapter) {
                      this.adapter = adapter;
                    }
                    return MDCTabScrollerRTL2;
                  }()
                );
                exports2.MDCTabScrollerRTL = MDCTabScrollerRTL;
                exports2.default = MDCTabScrollerRTL;
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/types.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-tab-scroller/types.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab-scroller/util.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-tab-scroller/util.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.computeHorizontalScrollbarHeight = void 0;
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab-scroller/constants.ts"
                );
                var horizontalScrollbarHeight_;
                function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
                  if (shouldCacheResult === void 0) {
                    shouldCacheResult = true;
                  }
                  if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== "undefined") {
                    return horizontalScrollbarHeight_;
                  }
                  var el = documentObj.createElement("div");
                  el.classList.add(constants_1.cssClasses.SCROLL_TEST);
                  documentObj.body.appendChild(el);
                  var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
                  documentObj.body.removeChild(el);
                  if (shouldCacheResult) {
                    horizontalScrollbarHeight_ = horizontalScrollbarHeight;
                  }
                  return horizontalScrollbarHeight;
                }
                exports2.computeHorizontalScrollbarHeight = computeHorizontalScrollbarHeight;
              }
            ),
            /***/
            "./packages/mdc-tab/adapter.ts": (
              /*!*************************************!*\
                !*** ./packages/mdc-tab/adapter.ts ***!
                \*************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tab/component.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-tab/component.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTab = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/tab-indicator/component */
                  "./packages/mdc-tab-indicator/component.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab/foundation.ts"
                );
                var MDCTab = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTab2, _super);
                    function MDCTab2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTab2.attachTo = function(root) {
                      return new MDCTab2(root);
                    };
                    MDCTab2.prototype.initialize = function(rippleFactory, tabIndicatorFactory) {
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el, foundation) {
                          return new component_2.MDCRipple(el, foundation);
                        };
                      }
                      if (tabIndicatorFactory === void 0) {
                        tabIndicatorFactory = function tabIndicatorFactory2(el) {
                          return new component_3.MDCTabIndicator(el);
                        };
                      }
                      this.id = this.root.id;
                      var rippleFoundation = new foundation_1.MDCRippleFoundation(component_2.MDCRipple.createAdapter(this));
                      this.ripple = rippleFactory(this.root, rippleFoundation);
                      var tabIndicatorElement = this.root.querySelector(foundation_2.MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);
                      this.tabIndicator = tabIndicatorFactory(tabIndicatorElement);
                      this.content = this.root.querySelector(foundation_2.MDCTabFoundation.strings.CONTENT_SELECTOR);
                    };
                    MDCTab2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.handleClick = function() {
                        _this.foundation.handleClick();
                      };
                      this.listen("click", this.handleClick);
                    };
                    MDCTab2.prototype.destroy = function() {
                      this.unlisten("click", this.handleClick);
                      this.ripple.destroy();
                      _super.prototype.destroy.call(this);
                    };
                    MDCTab2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        setAttr: function setAttr(attr, value) {
                          return _this.root.setAttribute(attr, value);
                        },
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        activateIndicator: function activateIndicator(previousIndicatorClientRect) {
                          _this.tabIndicator.activate(previousIndicatorClientRect);
                        },
                        deactivateIndicator: function deactivateIndicator() {
                          _this.tabIndicator.deactivate();
                        },
                        notifyInteracted: function notifyInteracted() {
                          return _this.emit(
                            foundation_2.MDCTabFoundation.strings.INTERACTED_EVENT,
                            { tabId: _this.id },
                            true
                            /* bubble */
                          );
                        },
                        getOffsetLeft: function getOffsetLeft() {
                          return _this.root.offsetLeft;
                        },
                        getOffsetWidth: function getOffsetWidth() {
                          return _this.root.offsetWidth;
                        },
                        getContentOffsetLeft: function getContentOffsetLeft() {
                          return _this.content.offsetLeft;
                        },
                        getContentOffsetWidth: function getContentOffsetWidth() {
                          return _this.content.offsetWidth;
                        },
                        focus: function focus() {
                          return _this.root.focus();
                        }
                      };
                      return new foundation_2.MDCTabFoundation(adapter);
                    };
                    Object.defineProperty(MDCTab2.prototype, "active", {
                      /**
                       * Getter for the active state of the tab
                       */
                      get: function get() {
                        return this.foundation.isActive();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTab2.prototype, "focusOnActivate", {
                      set: function set(focusOnActivate) {
                        this.foundation.setFocusOnActivate(focusOnActivate);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTab2.prototype.activate = function(computeIndicatorClientRect) {
                      this.foundation.activate(computeIndicatorClientRect);
                    };
                    MDCTab2.prototype.deactivate = function() {
                      this.foundation.deactivate();
                    };
                    MDCTab2.prototype.computeIndicatorClientRect = function() {
                      return this.tabIndicator.computeContentClientRect();
                    };
                    MDCTab2.prototype.computeDimensions = function() {
                      return this.foundation.computeDimensions();
                    };
                    MDCTab2.prototype.focus = function() {
                      this.root.focus();
                    };
                    return MDCTab2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTab = MDCTab;
              }
            ),
            /***/
            "./packages/mdc-tab/constants.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-tab/constants.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.cssClasses = void 0;
                var cssClasses = {
                  ACTIVE: "mdc-tab--active"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ARIA_SELECTED: "aria-selected",
                  CONTENT_SELECTOR: ".mdc-tab__content",
                  INTERACTED_EVENT: "MDCTab:interacted",
                  RIPPLE_SELECTOR: ".mdc-tab__ripple",
                  TABINDEX: "tabIndex",
                  TAB_INDICATOR_SELECTOR: ".mdc-tab-indicator"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-tab/foundation.ts": (
              /*!****************************************!*\
                !*** ./packages/mdc-tab/foundation.ts ***!
                \****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTabFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab/constants.ts"
                );
                var MDCTabFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTabFoundation2, _super);
                    function MDCTabFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation2.defaultAdapter), adapter)) || this;
                      _this.focusOnActivate = true;
                      return _this;
                    }
                    Object.defineProperty(MDCTabFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTabFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          activateIndicator: function activateIndicator() {
                            return void 0;
                          },
                          deactivateIndicator: function deactivateIndicator() {
                            return void 0;
                          },
                          notifyInteracted: function notifyInteracted() {
                            return void 0;
                          },
                          getOffsetLeft: function getOffsetLeft() {
                            return 0;
                          },
                          getOffsetWidth: function getOffsetWidth() {
                            return 0;
                          },
                          getContentOffsetLeft: function getContentOffsetLeft() {
                            return 0;
                          },
                          getContentOffsetWidth: function getContentOffsetWidth() {
                            return 0;
                          },
                          focus: function focus() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTabFoundation2.prototype.handleClick = function() {
                      this.adapter.notifyInteracted();
                    };
                    MDCTabFoundation2.prototype.isActive = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.ACTIVE);
                    };
                    MDCTabFoundation2.prototype.setFocusOnActivate = function(focusOnActivate) {
                      this.focusOnActivate = focusOnActivate;
                    };
                    MDCTabFoundation2.prototype.activate = function(previousIndicatorClientRect) {
                      this.adapter.addClass(constants_1.cssClasses.ACTIVE);
                      this.adapter.setAttr(constants_1.strings.ARIA_SELECTED, "true");
                      this.adapter.setAttr(constants_1.strings.TABINDEX, "0");
                      this.adapter.activateIndicator(previousIndicatorClientRect);
                      if (this.focusOnActivate) {
                        this.adapter.focus();
                      }
                    };
                    MDCTabFoundation2.prototype.deactivate = function() {
                      if (!this.isActive()) {
                        return;
                      }
                      this.adapter.removeClass(constants_1.cssClasses.ACTIVE);
                      this.adapter.setAttr(constants_1.strings.ARIA_SELECTED, "false");
                      this.adapter.setAttr(constants_1.strings.TABINDEX, "-1");
                      this.adapter.deactivateIndicator();
                    };
                    MDCTabFoundation2.prototype.computeDimensions = function() {
                      var rootWidth = this.adapter.getOffsetWidth();
                      var rootLeft = this.adapter.getOffsetLeft();
                      var contentWidth = this.adapter.getContentOffsetWidth();
                      var contentLeft = this.adapter.getContentOffsetLeft();
                      return {
                        contentLeft: rootLeft + contentLeft,
                        contentRight: rootLeft + contentLeft + contentWidth,
                        rootLeft,
                        rootRight: rootLeft + rootWidth
                      };
                    };
                    return MDCTabFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTabFoundation = MDCTabFoundation;
                exports2.default = MDCTabFoundation;
              }
            ),
            /***/
            "./packages/mdc-tab/index.ts": (
              /*!***********************************!*\
                !*** ./packages/mdc-tab/index.ts ***!
                \***********************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-tab/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-tab/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tab/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tab/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-tab/types.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-tab/types.ts": (
              /*!***********************************!*\
                !*** ./packages/mdc-tab/types.ts ***!
                \***********************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-textfield/adapter.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-textfield/adapter.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-textfield/character-counter/adapter.ts": (
              /*!*************************************************************!*\
                !*** ./packages/mdc-textfield/character-counter/adapter.ts ***!
                \*************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-textfield/character-counter/component.ts": (
              /*!***************************************************************!*\
                !*** ./packages/mdc-textfield/character-counter/component.ts ***!
                \***************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldCharacterCounter = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/character-counter/foundation.ts"
                );
                var MDCTextFieldCharacterCounter = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldCharacterCounter2, _super);
                    function MDCTextFieldCharacterCounter2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTextFieldCharacterCounter2.attachTo = function(root) {
                      return new MDCTextFieldCharacterCounter2(root);
                    };
                    Object.defineProperty(MDCTextFieldCharacterCounter2.prototype, "foundationForTextField", {
                      // Provided for access by MDCTextField component
                      get: function get() {
                        return this.foundation;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldCharacterCounter2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        setContent: function setContent(content) {
                          _this.root.textContent = content;
                        }
                      };
                      return new foundation_1.MDCTextFieldCharacterCounterFoundation(adapter);
                    };
                    return MDCTextFieldCharacterCounter2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTextFieldCharacterCounter = MDCTextFieldCharacterCounter;
              }
            ),
            /***/
            "./packages/mdc-textfield/character-counter/constants.ts": (
              /*!***************************************************************!*\
                !*** ./packages/mdc-textfield/character-counter/constants.ts ***!
                \***************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                var cssClasses = {
                  ROOT: "mdc-text-field-character-counter"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ROOT_SELECTOR: "." + cssClasses.ROOT
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-textfield/character-counter/foundation.ts": (
              /*!****************************************************************!*\
                !*** ./packages/mdc-textfield/character-counter/foundation.ts ***!
                \****************************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldCharacterCounterFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/character-counter/constants.ts"
                );
                var MDCTextFieldCharacterCounterFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldCharacterCounterFoundation2, _super);
                    function MDCTextFieldCharacterCounterFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          setContent: function setContent() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldCharacterCounterFoundation2.prototype.setCounterValue = function(currentLength, maxLength) {
                      currentLength = Math.min(currentLength, maxLength);
                      this.adapter.setContent(currentLength + " / " + maxLength);
                    };
                    return MDCTextFieldCharacterCounterFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTextFieldCharacterCounterFoundation = MDCTextFieldCharacterCounterFoundation;
                exports2.default = MDCTextFieldCharacterCounterFoundation;
              }
            ),
            /***/
            "./packages/mdc-textfield/character-counter/index.ts": (
              /*!***********************************************************!*\
                !*** ./packages/mdc-textfield/character-counter/index.ts ***!
                \***********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.characterCountStrings = exports2.characterCountCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-textfield/character-counter/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-textfield/character-counter/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/character-counter/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/character-counter/constants.ts"
                );
                Object.defineProperty(exports2, "characterCountCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "characterCountStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-textfield/component.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-textfield/component.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
                  Object.defineProperty(o, "default", { enumerable: true, value: v });
                } : function(o, v) {
                  o["default"] = v;
                });
                var __importStar = this && this.__importStar || function(mod) {
                  if (mod && mod.__esModule)
                    return mod;
                  var result = {};
                  if (mod != null)
                    for (var k in mod) {
                      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
                    }
                  __setModuleDefault(result, mod);
                  return result;
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextField = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var events_1 = __webpack_require__(
                  /*! @material/dom/events */
                  "./packages/mdc-dom/events.ts"
                );
                var ponyfill = __importStar(__webpack_require__(
                  /*! @material/dom/ponyfill */
                  "./packages/mdc-dom/ponyfill.ts"
                ));
                var component_2 = __webpack_require__(
                  /*! @material/floating-label/component */
                  "./packages/mdc-floating-label/component.ts"
                );
                var component_3 = __webpack_require__(
                  /*! @material/line-ripple/component */
                  "./packages/mdc-line-ripple/component.ts"
                );
                var component_4 = __webpack_require__(
                  /*! @material/notched-outline/component */
                  "./packages/mdc-notched-outline/component.ts"
                );
                var component_5 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/ripple/foundation */
                  "./packages/mdc-ripple/foundation.ts"
                );
                var component_6 = __webpack_require__(
                  /*! ./character-counter/component */
                  "./packages/mdc-textfield/character-counter/component.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./character-counter/foundation */
                  "./packages/mdc-textfield/character-counter/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/constants.ts"
                );
                var foundation_3 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/foundation.ts"
                );
                var component_7 = __webpack_require__(
                  /*! ./helper-text/component */
                  "./packages/mdc-textfield/helper-text/component.ts"
                );
                var foundation_4 = __webpack_require__(
                  /*! ./helper-text/foundation */
                  "./packages/mdc-textfield/helper-text/foundation.ts"
                );
                var component_8 = __webpack_require__(
                  /*! ./icon/component */
                  "./packages/mdc-textfield/icon/component.ts"
                );
                var MDCTextField = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextField2, _super);
                    function MDCTextField2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTextField2.attachTo = function(root) {
                      return new MDCTextField2(root);
                    };
                    MDCTextField2.prototype.initialize = function(rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el, foundation) {
                          return new component_5.MDCRipple(el, foundation);
                        };
                      }
                      if (lineRippleFactory === void 0) {
                        lineRippleFactory = function lineRippleFactory2(el) {
                          return new component_3.MDCLineRipple(el);
                        };
                      }
                      if (helperTextFactory === void 0) {
                        helperTextFactory = function helperTextFactory2(el) {
                          return new component_7.MDCTextFieldHelperText(el);
                        };
                      }
                      if (characterCounterFactory === void 0) {
                        characterCounterFactory = function characterCounterFactory2(el) {
                          return new component_6.MDCTextFieldCharacterCounter(el);
                        };
                      }
                      if (iconFactory === void 0) {
                        iconFactory = function iconFactory2(el) {
                          return new component_8.MDCTextFieldIcon(el);
                        };
                      }
                      if (labelFactory === void 0) {
                        labelFactory = function labelFactory2(el) {
                          return new component_2.MDCFloatingLabel(el);
                        };
                      }
                      if (outlineFactory === void 0) {
                        outlineFactory = function outlineFactory2(el) {
                          return new component_4.MDCNotchedOutline(el);
                        };
                      }
                      this.input = this.root.querySelector(constants_1.strings.INPUT_SELECTOR);
                      var labelElement = this.root.querySelector(constants_1.strings.LABEL_SELECTOR);
                      this.label = labelElement ? labelFactory(labelElement) : null;
                      var lineRippleElement = this.root.querySelector(constants_1.strings.LINE_RIPPLE_SELECTOR);
                      this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
                      var outlineElement = this.root.querySelector(constants_1.strings.OUTLINE_SELECTOR);
                      this.outline = outlineElement ? outlineFactory(outlineElement) : null;
                      var helperTextStrings = foundation_4.MDCTextFieldHelperTextFoundation.strings;
                      var nextElementSibling = this.root.nextElementSibling;
                      var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(constants_1.cssClasses.HELPER_LINE);
                      var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
                      this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;
                      var characterCounterStrings = foundation_2.MDCTextFieldCharacterCounterFoundation.strings;
                      var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
                      if (!characterCounterEl && hasHelperLine && nextElementSibling) {
                        characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
                      }
                      this.characterCounter = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
                      var leadingIconEl = this.root.querySelector(constants_1.strings.LEADING_ICON_SELECTOR);
                      this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;
                      var trailingIconEl = this.root.querySelector(constants_1.strings.TRAILING_ICON_SELECTOR);
                      this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;
                      this.prefix = this.root.querySelector(constants_1.strings.PREFIX_SELECTOR);
                      this.suffix = this.root.querySelector(constants_1.strings.SUFFIX_SELECTOR);
                      this.ripple = this.createRipple(rippleFactory);
                    };
                    MDCTextField2.prototype.destroy = function() {
                      if (this.ripple) {
                        this.ripple.destroy();
                      }
                      if (this.lineRipple) {
                        this.lineRipple.destroy();
                      }
                      if (this.helperText) {
                        this.helperText.destroy();
                      }
                      if (this.characterCounter) {
                        this.characterCounter.destroy();
                      }
                      if (this.leadingIcon) {
                        this.leadingIcon.destroy();
                      }
                      if (this.trailingIcon) {
                        this.trailingIcon.destroy();
                      }
                      if (this.label) {
                        this.label.destroy();
                      }
                      if (this.outline) {
                        this.outline.destroy();
                      }
                      _super.prototype.destroy.call(this);
                    };
                    MDCTextField2.prototype.initialSyncWithDOM = function() {
                      this.disabled = this.input.disabled;
                    };
                    Object.defineProperty(MDCTextField2.prototype, "value", {
                      get: function get() {
                        return this.foundation.getValue();
                      },
                      /**
                       * @param value The value to set on the input.
                       */
                      set: function set(value) {
                        this.foundation.setValue(value);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "disabled", {
                      get: function get() {
                        return this.foundation.isDisabled();
                      },
                      /**
                       * @param disabled Sets the Text Field disabled or enabled.
                       */
                      set: function set(disabled) {
                        this.foundation.setDisabled(disabled);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "valid", {
                      get: function get() {
                        return this.foundation.isValid();
                      },
                      /**
                       * @param valid Sets the Text Field valid or invalid.
                       */
                      set: function set(valid) {
                        this.foundation.setValid(valid);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "required", {
                      get: function get() {
                        return this.input.required;
                      },
                      /**
                       * @param required Sets the Text Field to required.
                       */
                      set: function set(required) {
                        this.input.required = required;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "pattern", {
                      get: function get() {
                        return this.input.pattern;
                      },
                      /**
                       * @param pattern Sets the input element's validation pattern.
                       */
                      set: function set(pattern) {
                        this.input.pattern = pattern;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "minLength", {
                      get: function get() {
                        return this.input.minLength;
                      },
                      /**
                       * @param minLength Sets the input element's minLength.
                       */
                      set: function set(minLength) {
                        this.input.minLength = minLength;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "maxLength", {
                      get: function get() {
                        return this.input.maxLength;
                      },
                      /**
                       * @param maxLength Sets the input element's maxLength.
                       */
                      set: function set(maxLength) {
                        if (maxLength < 0) {
                          this.input.removeAttribute("maxLength");
                        } else {
                          this.input.maxLength = maxLength;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "min", {
                      get: function get() {
                        return this.input.min;
                      },
                      /**
                       * @param min Sets the input element's min.
                       */
                      set: function set(min) {
                        this.input.min = min;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "max", {
                      get: function get() {
                        return this.input.max;
                      },
                      /**
                       * @param max Sets the input element's max.
                       */
                      set: function set(max) {
                        this.input.max = max;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "step", {
                      get: function get() {
                        return this.input.step;
                      },
                      /**
                       * @param step Sets the input element's step.
                       */
                      set: function set(step) {
                        this.input.step = step;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "helperTextContent", {
                      /**
                       * Sets the helper text element content.
                       */
                      set: function set(content) {
                        this.foundation.setHelperTextContent(content);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "leadingIconAriaLabel", {
                      /**
                       * Sets the aria label of the leading icon.
                       */
                      set: function set(label) {
                        this.foundation.setLeadingIconAriaLabel(label);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "leadingIconContent", {
                      /**
                       * Sets the text content of the leading icon.
                       */
                      set: function set(content) {
                        this.foundation.setLeadingIconContent(content);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "trailingIconAriaLabel", {
                      /**
                       * Sets the aria label of the trailing icon.
                       */
                      set: function set(label) {
                        this.foundation.setTrailingIconAriaLabel(label);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "trailingIconContent", {
                      /**
                       * Sets the text content of the trailing icon.
                       */
                      set: function set(content) {
                        this.foundation.setTrailingIconContent(content);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "useNativeValidation", {
                      /**
                       * Enables or disables the use of native validation. Use this for custom validation.
                       * @param useNativeValidation Set this to false to ignore native input validation.
                       */
                      set: function set(useNativeValidation) {
                        this.foundation.setUseNativeValidation(useNativeValidation);
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "prefixText", {
                      /**
                       * Gets the text content of the prefix, or null if it does not exist.
                       */
                      get: function get() {
                        return this.prefix ? this.prefix.textContent : null;
                      },
                      /**
                       * Sets the text content of the prefix, if it exists.
                       */
                      set: function set(prefixText) {
                        if (this.prefix) {
                          this.prefix.textContent = prefixText;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextField2.prototype, "suffixText", {
                      /**
                       * Gets the text content of the suffix, or null if it does not exist.
                       */
                      get: function get() {
                        return this.suffix ? this.suffix.textContent : null;
                      },
                      /**
                       * Sets the text content of the suffix, if it exists.
                       */
                      set: function set(suffixText) {
                        if (this.suffix) {
                          this.suffix.textContent = suffixText;
                        }
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextField2.prototype.focus = function() {
                      this.input.focus();
                    };
                    MDCTextField2.prototype.layout = function() {
                      var openNotch = this.foundation.shouldFloat;
                      this.foundation.notchOutline(openNotch);
                    };
                    MDCTextField2.prototype.getDefaultFoundation = function() {
                      var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
                      return new foundation_3.MDCTextFieldFoundation(adapter, this.getFoundationMap());
                    };
                    MDCTextField2.prototype.getRootAdapterMethods = function() {
                      var _this = this;
                      return {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {
                          _this.listen(evtType, handler);
                        },
                        deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {
                          _this.unlisten(evtType, handler);
                        },
                        registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler(handler) {
                          var getAttributesList = function getAttributesList2(mutationsList) {
                            return mutationsList.map(function(mutation) {
                              return mutation.attributeName;
                            }).filter(function(attributeName) {
                              return attributeName;
                            });
                          };
                          var observer = new MutationObserver(function(mutationsList) {
                            return handler(getAttributesList(mutationsList));
                          });
                          var config = { attributes: true };
                          observer.observe(_this.input, config);
                          return observer;
                        },
                        deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler(observer) {
                          observer.disconnect();
                        }
                      };
                    };
                    MDCTextField2.prototype.getInputAdapterMethods = function() {
                      var _this = this;
                      return {
                        getNativeInput: function getNativeInput() {
                          return _this.input;
                        },
                        setInputAttr: function setInputAttr(attr, value) {
                          _this.input.setAttribute(attr, value);
                        },
                        removeInputAttr: function removeInputAttr(attr) {
                          _this.input.removeAttribute(attr);
                        },
                        isFocused: function isFocused() {
                          return document.activeElement === _this.input;
                        },
                        registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {
                          _this.input.addEventListener(evtType, handler, events_1.applyPassive());
                        },
                        deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {
                          _this.input.removeEventListener(evtType, handler, events_1.applyPassive());
                        }
                      };
                    };
                    MDCTextField2.prototype.getLabelAdapterMethods = function() {
                      var _this = this;
                      return {
                        floatLabel: function floatLabel(shouldFloat) {
                          _this.label && _this.label.float(shouldFloat);
                        },
                        getLabelWidth: function getLabelWidth() {
                          return _this.label ? _this.label.getWidth() : 0;
                        },
                        hasLabel: function hasLabel() {
                          return Boolean(_this.label);
                        },
                        shakeLabel: function shakeLabel(shouldShake) {
                          _this.label && _this.label.shake(shouldShake);
                        },
                        setLabelRequired: function setLabelRequired(isRequired) {
                          _this.label && _this.label.setRequired(isRequired);
                        }
                      };
                    };
                    MDCTextField2.prototype.getLineRippleAdapterMethods = function() {
                      var _this = this;
                      return {
                        activateLineRipple: function activateLineRipple() {
                          if (_this.lineRipple) {
                            _this.lineRipple.activate();
                          }
                        },
                        deactivateLineRipple: function deactivateLineRipple() {
                          if (_this.lineRipple) {
                            _this.lineRipple.deactivate();
                          }
                        },
                        setLineRippleTransformOrigin: function setLineRippleTransformOrigin(normalizedX) {
                          if (_this.lineRipple) {
                            _this.lineRipple.setRippleCenter(normalizedX);
                          }
                        }
                      };
                    };
                    MDCTextField2.prototype.getOutlineAdapterMethods = function() {
                      var _this = this;
                      return {
                        closeOutline: function closeOutline() {
                          _this.outline && _this.outline.closeNotch();
                        },
                        hasOutline: function hasOutline() {
                          return Boolean(_this.outline);
                        },
                        notchOutline: function notchOutline(labelWidth) {
                          _this.outline && _this.outline.notch(labelWidth);
                        }
                      };
                    };
                    MDCTextField2.prototype.getFoundationMap = function() {
                      return {
                        characterCounter: this.characterCounter ? this.characterCounter.foundationForTextField : void 0,
                        helperText: this.helperText ? this.helperText.foundationForTextField : void 0,
                        leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField : void 0,
                        trailingIcon: this.trailingIcon ? this.trailingIcon.foundationForTextField : void 0
                      };
                    };
                    MDCTextField2.prototype.createRipple = function(rippleFactory) {
                      var _this = this;
                      var isTextArea = this.root.classList.contains(constants_1.cssClasses.TEXTAREA);
                      var isOutlined = this.root.classList.contains(constants_1.cssClasses.OUTLINED);
                      if (isTextArea || isOutlined) {
                        return null;
                      }
                      var adapter = __assign(__assign({}, component_5.MDCRipple.createAdapter(this)), { isSurfaceActive: function isSurfaceActive() {
                        return ponyfill.matches(_this.input, ":active");
                      }, registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                        _this.input.addEventListener(evtType, handler, events_1.applyPassive());
                      }, deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                        _this.input.removeEventListener(evtType, handler, events_1.applyPassive());
                      } });
                      return rippleFactory(this.root, new foundation_1.MDCRippleFoundation(adapter));
                    };
                    return MDCTextField2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTextField = MDCTextField;
              }
            ),
            /***/
            "./packages/mdc-textfield/constants.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-textfield/constants.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.ALWAYS_FLOAT_TYPES = exports2.VALIDATION_ATTR_WHITELIST = exports2.numbers = exports2.strings = exports2.cssClasses = void 0;
                var strings = {
                  ARIA_CONTROLS: "aria-controls",
                  ARIA_DESCRIBEDBY: "aria-describedby",
                  INPUT_SELECTOR: ".mdc-text-field__input",
                  LABEL_SELECTOR: ".mdc-floating-label",
                  LEADING_ICON_SELECTOR: ".mdc-text-field__icon--leading",
                  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
                  OUTLINE_SELECTOR: ".mdc-notched-outline",
                  PREFIX_SELECTOR: ".mdc-text-field__affix--prefix",
                  SUFFIX_SELECTOR: ".mdc-text-field__affix--suffix",
                  TRAILING_ICON_SELECTOR: ".mdc-text-field__icon--trailing"
                };
                exports2.strings = strings;
                var cssClasses = {
                  DISABLED: "mdc-text-field--disabled",
                  FOCUSED: "mdc-text-field--focused",
                  HELPER_LINE: "mdc-text-field-helper-line",
                  INVALID: "mdc-text-field--invalid",
                  LABEL_FLOATING: "mdc-text-field--label-floating",
                  NO_LABEL: "mdc-text-field--no-label",
                  OUTLINED: "mdc-text-field--outlined",
                  ROOT: "mdc-text-field",
                  TEXTAREA: "mdc-text-field--textarea",
                  WITH_LEADING_ICON: "mdc-text-field--with-leading-icon",
                  WITH_TRAILING_ICON: "mdc-text-field--with-trailing-icon",
                  WITH_INTERNAL_COUNTER: "mdc-text-field--with-internal-counter"
                };
                exports2.cssClasses = cssClasses;
                var numbers = {
                  LABEL_SCALE: 0.75
                };
                exports2.numbers = numbers;
                var VALIDATION_ATTR_WHITELIST = ["pattern", "min", "max", "required", "step", "minlength", "maxlength"];
                exports2.VALIDATION_ATTR_WHITELIST = VALIDATION_ATTR_WHITELIST;
                var ALWAYS_FLOAT_TYPES = ["color", "date", "datetime-local", "month", "range", "time", "week"];
                exports2.ALWAYS_FLOAT_TYPES = ALWAYS_FLOAT_TYPES;
              }
            ),
            /***/
            "./packages/mdc-textfield/foundation.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-textfield/foundation.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/constants.ts"
                );
                var POINTERDOWN_EVENTS = ["mousedown", "touchstart"];
                var INTERACTION_EVENTS = ["click", "keydown"];
                var MDCTextFieldFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldFoundation2, _super);
                    function MDCTextFieldFoundation2(adapter, foundationMap) {
                      if (foundationMap === void 0) {
                        foundationMap = {};
                      }
                      var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation2.defaultAdapter), adapter)) || this;
                      _this.isFocused = false;
                      _this.receivedUserInput = false;
                      _this.valid = true;
                      _this.useNativeValidation = true;
                      _this.validateOnValueChange = true;
                      _this.helperText = foundationMap.helperText;
                      _this.characterCounter = foundationMap.characterCounter;
                      _this.leadingIcon = foundationMap.leadingIcon;
                      _this.trailingIcon = foundationMap.trailingIcon;
                      _this.inputFocusHandler = function() {
                        _this.activateFocus();
                      };
                      _this.inputBlurHandler = function() {
                        _this.deactivateFocus();
                      };
                      _this.inputInputHandler = function() {
                        _this.handleInput();
                      };
                      _this.setPointerXOffset = function(evt) {
                        _this.setTransformOrigin(evt);
                      };
                      _this.textFieldInteractionHandler = function() {
                        _this.handleTextFieldInteraction();
                      };
                      _this.validationAttributeChangeHandler = function(attributesList) {
                        _this.handleValidationAttributeChange(attributesList);
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCTextFieldFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldAlwaysFloat", {
                      get: function get() {
                        var type = this.getNativeInput().type;
                        return constants_1.ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldFloat", {
                      get: function get() {
                        return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldShake", {
                      get: function get() {
                        return !this.isFocused && !this.isValid() && !!this.getValue();
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCTextFieldAdapter} for typing information on parameters and
                       * return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return true;
                          },
                          setInputAttr: function setInputAttr() {
                            return void 0;
                          },
                          removeInputAttr: function removeInputAttr() {
                            return void 0;
                          },
                          registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler() {
                            return void 0;
                          },
                          deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler() {
                            return void 0;
                          },
                          registerInputInteractionHandler: function registerInputInteractionHandler() {
                            return void 0;
                          },
                          deregisterInputInteractionHandler: function deregisterInputInteractionHandler() {
                            return void 0;
                          },
                          registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler() {
                            return new MutationObserver(function() {
                              return void 0;
                            });
                          },
                          deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler() {
                            return void 0;
                          },
                          getNativeInput: function getNativeInput() {
                            return null;
                          },
                          isFocused: function isFocused() {
                            return false;
                          },
                          activateLineRipple: function activateLineRipple() {
                            return void 0;
                          },
                          deactivateLineRipple: function deactivateLineRipple() {
                            return void 0;
                          },
                          setLineRippleTransformOrigin: function setLineRippleTransformOrigin() {
                            return void 0;
                          },
                          shakeLabel: function shakeLabel() {
                            return void 0;
                          },
                          floatLabel: function floatLabel() {
                            return void 0;
                          },
                          setLabelRequired: function setLabelRequired() {
                            return void 0;
                          },
                          hasLabel: function hasLabel() {
                            return false;
                          },
                          getLabelWidth: function getLabelWidth() {
                            return 0;
                          },
                          hasOutline: function hasOutline() {
                            return false;
                          },
                          notchOutline: function notchOutline() {
                            return void 0;
                          },
                          closeOutline: function closeOutline() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldFoundation2.prototype.init = function() {
                      var e_1, _a, e_2, _b;
                      if (this.adapter.hasLabel() && this.getNativeInput().required) {
                        this.adapter.setLabelRequired(true);
                      }
                      if (this.adapter.isFocused()) {
                        this.inputFocusHandler();
                      } else if (this.adapter.hasLabel() && this.shouldFloat) {
                        this.notchOutline(true);
                        this.adapter.floatLabel(true);
                        this.styleFloating(true);
                      }
                      this.adapter.registerInputInteractionHandler("focus", this.inputFocusHandler);
                      this.adapter.registerInputInteractionHandler("blur", this.inputBlurHandler);
                      this.adapter.registerInputInteractionHandler("input", this.inputInputHandler);
                      try {
                        for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
                          var evtType = POINTERDOWN_EVENTS_1_1.value;
                          this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return))
                            _a.call(POINTERDOWN_EVENTS_1);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      try {
                        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                          var evtType = INTERACTION_EVENTS_1_1.value;
                          this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return))
                            _b.call(INTERACTION_EVENTS_1);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                      this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
                      this.setcharacterCounter(this.getValue().length);
                    };
                    MDCTextFieldFoundation2.prototype.destroy = function() {
                      var e_3, _a, e_4, _b;
                      this.adapter.deregisterInputInteractionHandler("focus", this.inputFocusHandler);
                      this.adapter.deregisterInputInteractionHandler("blur", this.inputBlurHandler);
                      this.adapter.deregisterInputInteractionHandler("input", this.inputInputHandler);
                      try {
                        for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
                          var evtType = POINTERDOWN_EVENTS_2_1.value;
                          this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
                        }
                      } catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                      } finally {
                        try {
                          if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return))
                            _a.call(POINTERDOWN_EVENTS_2);
                        } finally {
                          if (e_3)
                            throw e_3.error;
                        }
                      }
                      try {
                        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                          var evtType = INTERACTION_EVENTS_2_1.value;
                          this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
                        }
                      } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return))
                            _b.call(INTERACTION_EVENTS_2);
                        } finally {
                          if (e_4)
                            throw e_4.error;
                        }
                      }
                      this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
                    };
                    MDCTextFieldFoundation2.prototype.handleTextFieldInteraction = function() {
                      var nativeInput = this.adapter.getNativeInput();
                      if (nativeInput && nativeInput.disabled) {
                        return;
                      }
                      this.receivedUserInput = true;
                    };
                    MDCTextFieldFoundation2.prototype.handleValidationAttributeChange = function(attributesList) {
                      var _this = this;
                      attributesList.some(function(attributeName) {
                        if (constants_1.VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                          _this.styleValidity(true);
                          _this.adapter.setLabelRequired(_this.getNativeInput().required);
                          return true;
                        }
                        return false;
                      });
                      if (attributesList.indexOf("maxlength") > -1) {
                        this.setcharacterCounter(this.getValue().length);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.notchOutline = function(openNotch) {
                      if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
                        return;
                      }
                      if (openNotch) {
                        var labelWidth = this.adapter.getLabelWidth() * constants_1.numbers.LABEL_SCALE;
                        this.adapter.notchOutline(labelWidth);
                      } else {
                        this.adapter.closeOutline();
                      }
                    };
                    MDCTextFieldFoundation2.prototype.activateFocus = function() {
                      this.isFocused = true;
                      this.styleFocused(this.isFocused);
                      this.adapter.activateLineRipple();
                      if (this.adapter.hasLabel()) {
                        this.notchOutline(this.shouldFloat);
                        this.adapter.floatLabel(this.shouldFloat);
                        this.styleFloating(this.shouldFloat);
                        this.adapter.shakeLabel(this.shouldShake);
                      }
                      if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) {
                        this.helperText.showToScreenReader();
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setTransformOrigin = function(evt) {
                      if (this.isDisabled() || this.adapter.hasOutline()) {
                        return;
                      }
                      var touches = evt.touches;
                      var targetEvent = touches ? touches[0] : evt;
                      var targetClientRect = targetEvent.target.getBoundingClientRect();
                      var normalizedX = targetEvent.clientX - targetClientRect.left;
                      this.adapter.setLineRippleTransformOrigin(normalizedX);
                    };
                    MDCTextFieldFoundation2.prototype.handleInput = function() {
                      this.autoCompleteFocus();
                      this.setcharacterCounter(this.getValue().length);
                    };
                    MDCTextFieldFoundation2.prototype.autoCompleteFocus = function() {
                      if (!this.receivedUserInput) {
                        this.activateFocus();
                      }
                    };
                    MDCTextFieldFoundation2.prototype.deactivateFocus = function() {
                      this.isFocused = false;
                      this.adapter.deactivateLineRipple();
                      var isValid = this.isValid();
                      this.styleValidity(isValid);
                      this.styleFocused(this.isFocused);
                      if (this.adapter.hasLabel()) {
                        this.notchOutline(this.shouldFloat);
                        this.adapter.floatLabel(this.shouldFloat);
                        this.styleFloating(this.shouldFloat);
                        this.adapter.shakeLabel(this.shouldShake);
                      }
                      if (!this.shouldFloat) {
                        this.receivedUserInput = false;
                      }
                    };
                    MDCTextFieldFoundation2.prototype.getValue = function() {
                      return this.getNativeInput().value;
                    };
                    MDCTextFieldFoundation2.prototype.setValue = function(value) {
                      if (this.getValue() !== value) {
                        this.getNativeInput().value = value;
                      }
                      this.setcharacterCounter(value.length);
                      if (this.validateOnValueChange) {
                        var isValid = this.isValid();
                        this.styleValidity(isValid);
                      }
                      if (this.adapter.hasLabel()) {
                        this.notchOutline(this.shouldFloat);
                        this.adapter.floatLabel(this.shouldFloat);
                        this.styleFloating(this.shouldFloat);
                        if (this.validateOnValueChange) {
                          this.adapter.shakeLabel(this.shouldShake);
                        }
                      }
                    };
                    MDCTextFieldFoundation2.prototype.isValid = function() {
                      return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
                    };
                    MDCTextFieldFoundation2.prototype.setValid = function(isValid) {
                      this.valid = isValid;
                      this.styleValidity(isValid);
                      var shouldShake = !isValid && !this.isFocused && !!this.getValue();
                      if (this.adapter.hasLabel()) {
                        this.adapter.shakeLabel(shouldShake);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setValidateOnValueChange = function(shouldValidate) {
                      this.validateOnValueChange = shouldValidate;
                    };
                    MDCTextFieldFoundation2.prototype.getValidateOnValueChange = function() {
                      return this.validateOnValueChange;
                    };
                    MDCTextFieldFoundation2.prototype.setUseNativeValidation = function(useNativeValidation) {
                      this.useNativeValidation = useNativeValidation;
                    };
                    MDCTextFieldFoundation2.prototype.isDisabled = function() {
                      return this.getNativeInput().disabled;
                    };
                    MDCTextFieldFoundation2.prototype.setDisabled = function(disabled) {
                      this.getNativeInput().disabled = disabled;
                      this.styleDisabled(disabled);
                    };
                    MDCTextFieldFoundation2.prototype.setHelperTextContent = function(content) {
                      if (this.helperText) {
                        this.helperText.setContent(content);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
                      if (this.leadingIcon) {
                        this.leadingIcon.setAriaLabel(label);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setLeadingIconContent = function(content) {
                      if (this.leadingIcon) {
                        this.leadingIcon.setContent(content);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setTrailingIconAriaLabel = function(label) {
                      if (this.trailingIcon) {
                        this.trailingIcon.setAriaLabel(label);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setTrailingIconContent = function(content) {
                      if (this.trailingIcon) {
                        this.trailingIcon.setContent(content);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.setcharacterCounter = function(currentLength) {
                      if (!this.characterCounter) {
                        return;
                      }
                      var maxLength = this.getNativeInput().maxLength;
                      if (maxLength === -1) {
                        throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");
                      }
                      this.characterCounter.setCounterValue(currentLength, maxLength);
                    };
                    MDCTextFieldFoundation2.prototype.isBadInput = function() {
                      return this.getNativeInput().validity.badInput || false;
                    };
                    MDCTextFieldFoundation2.prototype.isNativeInputValid = function() {
                      return this.getNativeInput().validity.valid;
                    };
                    MDCTextFieldFoundation2.prototype.styleValidity = function(isValid) {
                      var INVALID = MDCTextFieldFoundation2.cssClasses.INVALID;
                      if (isValid) {
                        this.adapter.removeClass(INVALID);
                      } else {
                        this.adapter.addClass(INVALID);
                      }
                      if (this.helperText) {
                        this.helperText.setValidity(isValid);
                        var helperTextValidation = this.helperText.isValidation();
                        if (!helperTextValidation) {
                          return;
                        }
                        var helperTextVisible = this.helperText.isVisible();
                        var helperTextId = this.helperText.getId();
                        if (helperTextVisible && helperTextId) {
                          this.adapter.setInputAttr(constants_1.strings.ARIA_DESCRIBEDBY, helperTextId);
                        } else {
                          this.adapter.removeInputAttr(constants_1.strings.ARIA_DESCRIBEDBY);
                        }
                      }
                    };
                    MDCTextFieldFoundation2.prototype.styleFocused = function(isFocused) {
                      var FOCUSED = MDCTextFieldFoundation2.cssClasses.FOCUSED;
                      if (isFocused) {
                        this.adapter.addClass(FOCUSED);
                      } else {
                        this.adapter.removeClass(FOCUSED);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.styleDisabled = function(isDisabled) {
                      var _a = MDCTextFieldFoundation2.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
                      if (isDisabled) {
                        this.adapter.addClass(DISABLED);
                        this.adapter.removeClass(INVALID);
                      } else {
                        this.adapter.removeClass(DISABLED);
                      }
                      if (this.leadingIcon) {
                        this.leadingIcon.setDisabled(isDisabled);
                      }
                      if (this.trailingIcon) {
                        this.trailingIcon.setDisabled(isDisabled);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.styleFloating = function(isFloating) {
                      var LABEL_FLOATING = MDCTextFieldFoundation2.cssClasses.LABEL_FLOATING;
                      if (isFloating) {
                        this.adapter.addClass(LABEL_FLOATING);
                      } else {
                        this.adapter.removeClass(LABEL_FLOATING);
                      }
                    };
                    MDCTextFieldFoundation2.prototype.getNativeInput = function() {
                      var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
                      return nativeInput || {
                        disabled: false,
                        maxLength: -1,
                        required: false,
                        type: "input",
                        validity: {
                          badInput: false,
                          valid: true
                        },
                        value: ""
                      };
                    };
                    return MDCTextFieldFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTextFieldFoundation = MDCTextFieldFoundation;
                exports2.default = MDCTextFieldFoundation;
              }
            ),
            /***/
            "./packages/mdc-textfield/helper-text/adapter.ts": (
              /*!*******************************************************!*\
                !*** ./packages/mdc-textfield/helper-text/adapter.ts ***!
                \*******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-textfield/helper-text/component.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-textfield/helper-text/component.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldHelperText = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/helper-text/foundation.ts"
                );
                var MDCTextFieldHelperText = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldHelperText2, _super);
                    function MDCTextFieldHelperText2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTextFieldHelperText2.attachTo = function(root) {
                      return new MDCTextFieldHelperText2(root);
                    };
                    Object.defineProperty(MDCTextFieldHelperText2.prototype, "foundationForTextField", {
                      // Provided for access by MDCTextField component
                      get: function get() {
                        return this.foundation;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldHelperText2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        getAttr: function getAttr(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        setAttr: function setAttr(attr, value) {
                          return _this.root.setAttribute(attr, value);
                        },
                        removeAttr: function removeAttr(attr) {
                          return _this.root.removeAttribute(attr);
                        },
                        setContent: function setContent(content) {
                          _this.root.textContent = content;
                        }
                      };
                      return new foundation_1.MDCTextFieldHelperTextFoundation(adapter);
                    };
                    return MDCTextFieldHelperText2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTextFieldHelperText = MDCTextFieldHelperText;
              }
            ),
            /***/
            "./packages/mdc-textfield/helper-text/constants.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-textfield/helper-text/constants.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                var cssClasses = {
                  HELPER_TEXT_PERSISTENT: "mdc-text-field-helper-text--persistent",
                  HELPER_TEXT_VALIDATION_MSG: "mdc-text-field-helper-text--validation-msg",
                  ROOT: "mdc-text-field-helper-text"
                };
                exports2.cssClasses = cssClasses;
                var strings = {
                  ARIA_HIDDEN: "aria-hidden",
                  ROLE: "role",
                  ROOT_SELECTOR: "." + cssClasses.ROOT
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-textfield/helper-text/foundation.ts": (
              /*!**********************************************************!*\
                !*** ./packages/mdc-textfield/helper-text/foundation.ts ***!
                \**********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldHelperTextFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/helper-text/constants.ts"
                );
                var MDCTextFieldHelperTextFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldHelperTextFoundation2, _super);
                    function MDCTextFieldHelperTextFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          getAttr: function getAttr() {
                            return null;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          removeAttr: function removeAttr() {
                            return void 0;
                          },
                          setContent: function setContent() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldHelperTextFoundation2.prototype.getId = function() {
                      return this.adapter.getAttr("id");
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.isVisible = function() {
                      return this.adapter.getAttr(constants_1.strings.ARIA_HIDDEN) !== "true";
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.setContent = function(content) {
                      this.adapter.setContent(content);
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.isPersistent = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.setPersistent = function(isPersistent) {
                      if (isPersistent) {
                        this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
                      }
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.isValidation = function() {
                      return this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.setValidation = function(isValidation) {
                      if (isValidation) {
                        this.adapter.addClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      } else {
                        this.adapter.removeClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      }
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.showToScreenReader = function() {
                      this.adapter.removeAttr(constants_1.strings.ARIA_HIDDEN);
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.setValidity = function(inputIsValid) {
                      var helperTextIsPersistent = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_PERSISTENT);
                      var helperTextIsValidationMsg = this.adapter.hasClass(constants_1.cssClasses.HELPER_TEXT_VALIDATION_MSG);
                      var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
                      if (validationMsgNeedsDisplay) {
                        this.showToScreenReader();
                        if (this.adapter.getAttr(constants_1.strings.ROLE) === "alert") {
                          this.refreshAlertRole();
                        } else {
                          this.adapter.setAttr(constants_1.strings.ROLE, "alert");
                        }
                      } else {
                        this.adapter.removeAttr(constants_1.strings.ROLE);
                      }
                      if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
                        this.hide();
                      }
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.hide = function() {
                      this.adapter.setAttr(constants_1.strings.ARIA_HIDDEN, "true");
                    };
                    MDCTextFieldHelperTextFoundation2.prototype.refreshAlertRole = function() {
                      var _this = this;
                      this.adapter.removeAttr(constants_1.strings.ROLE);
                      requestAnimationFrame(function() {
                        _this.adapter.setAttr(constants_1.strings.ROLE, "alert");
                      });
                    };
                    return MDCTextFieldHelperTextFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTextFieldHelperTextFoundation = MDCTextFieldHelperTextFoundation;
                exports2.default = MDCTextFieldHelperTextFoundation;
              }
            ),
            /***/
            "./packages/mdc-textfield/helper-text/index.ts": (
              /*!*****************************************************!*\
                !*** ./packages/mdc-textfield/helper-text/index.ts ***!
                \*****************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.helperTextStrings = exports2.helperTextCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-textfield/helper-text/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-textfield/helper-text/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/helper-text/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/helper-text/constants.ts"
                );
                Object.defineProperty(exports2, "helperTextCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "helperTextStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-textfield/icon/adapter.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-textfield/icon/adapter.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-textfield/icon/component.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-textfield/icon/component.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldIcon = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/icon/foundation.ts"
                );
                var MDCTextFieldIcon = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldIcon2, _super);
                    function MDCTextFieldIcon2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTextFieldIcon2.attachTo = function(root) {
                      return new MDCTextFieldIcon2(root);
                    };
                    Object.defineProperty(MDCTextFieldIcon2.prototype, "foundationForTextField", {
                      // Provided for access by MDCTextField component
                      get: function get() {
                        return this.foundation;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldIcon2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        getAttr: function getAttr(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        setAttr: function setAttr(attr, value) {
                          return _this.root.setAttribute(attr, value);
                        },
                        removeAttr: function removeAttr(attr) {
                          return _this.root.removeAttribute(attr);
                        },
                        setContent: function setContent(content) {
                          _this.root.textContent = content;
                        },
                        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
                          return _this.listen(evtType, handler);
                        },
                        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
                          return _this.unlisten(evtType, handler);
                        },
                        notifyIconAction: function notifyIconAction() {
                          return _this.emit(
                            foundation_1.MDCTextFieldIconFoundation.strings.ICON_EVENT,
                            {},
                            true
                            /* shouldBubble */
                          );
                        }
                      };
                      return new foundation_1.MDCTextFieldIconFoundation(adapter);
                    };
                    return MDCTextFieldIcon2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTextFieldIcon = MDCTextFieldIcon;
              }
            ),
            /***/
            "./packages/mdc-textfield/icon/constants.ts": (
              /*!**************************************************!*\
                !*** ./packages/mdc-textfield/icon/constants.ts ***!
                \**************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.cssClasses = exports2.strings = void 0;
                var strings = {
                  ICON_EVENT: "MDCTextField:icon",
                  ICON_ROLE: "button"
                };
                exports2.strings = strings;
                var cssClasses = {
                  ROOT: "mdc-text-field__icon"
                };
                exports2.cssClasses = cssClasses;
              }
            ),
            /***/
            "./packages/mdc-textfield/icon/foundation.ts": (
              /*!***************************************************!*\
                !*** ./packages/mdc-textfield/icon/foundation.ts ***!
                \***************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTextFieldIconFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/icon/constants.ts"
                );
                var INTERACTION_EVENTS = ["click", "keydown"];
                var MDCTextFieldIconFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTextFieldIconFoundation2, _super);
                    function MDCTextFieldIconFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation2.defaultAdapter), adapter)) || this;
                      _this.savedTabIndex = null;
                      _this.interactionHandler = function(evt) {
                        _this.handleInteraction(evt);
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCTextFieldIconFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldIconFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTextFieldIconFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          getAttr: function getAttr() {
                            return null;
                          },
                          setAttr: function setAttr() {
                            return void 0;
                          },
                          removeAttr: function removeAttr() {
                            return void 0;
                          },
                          setContent: function setContent() {
                            return void 0;
                          },
                          registerInteractionHandler: function registerInteractionHandler() {
                            return void 0;
                          },
                          deregisterInteractionHandler: function deregisterInteractionHandler() {
                            return void 0;
                          },
                          notifyIconAction: function notifyIconAction() {
                            return void 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTextFieldIconFoundation2.prototype.init = function() {
                      var e_1, _a;
                      this.savedTabIndex = this.adapter.getAttr("tabindex");
                      try {
                        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
                          var evtType = INTERACTION_EVENTS_1_1.value;
                          this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return))
                            _a.call(INTERACTION_EVENTS_1);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                    };
                    MDCTextFieldIconFoundation2.prototype.destroy = function() {
                      var e_2, _a;
                      try {
                        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
                          var evtType = INTERACTION_EVENTS_2_1.value;
                          this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return))
                            _a.call(INTERACTION_EVENTS_2);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                    };
                    MDCTextFieldIconFoundation2.prototype.setDisabled = function(disabled) {
                      if (!this.savedTabIndex) {
                        return;
                      }
                      if (disabled) {
                        this.adapter.setAttr("tabindex", "-1");
                        this.adapter.removeAttr("role");
                      } else {
                        this.adapter.setAttr("tabindex", this.savedTabIndex);
                        this.adapter.setAttr("role", constants_1.strings.ICON_ROLE);
                      }
                    };
                    MDCTextFieldIconFoundation2.prototype.setAriaLabel = function(label) {
                      this.adapter.setAttr("aria-label", label);
                    };
                    MDCTextFieldIconFoundation2.prototype.setContent = function(content) {
                      this.adapter.setContent(content);
                    };
                    MDCTextFieldIconFoundation2.prototype.handleInteraction = function(evt) {
                      var isEnterKey = evt.key === "Enter" || evt.keyCode === 13;
                      if (evt.type === "click" || isEnterKey) {
                        evt.preventDefault();
                        this.adapter.notifyIconAction();
                      }
                    };
                    return MDCTextFieldIconFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTextFieldIconFoundation = MDCTextFieldIconFoundation;
                exports2.default = MDCTextFieldIconFoundation;
              }
            ),
            /***/
            "./packages/mdc-textfield/icon/index.ts": (
              /*!**********************************************!*\
                !*** ./packages/mdc-textfield/icon/index.ts ***!
                \**********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.iconStrings = exports2.iconCssClasses = void 0;
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-textfield/icon/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-textfield/icon/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/icon/foundation.ts"
                ), exports2);
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/icon/constants.ts"
                );
                Object.defineProperty(exports2, "iconCssClasses", { enumerable: true, get: function get() {
                  return constants_1.cssClasses;
                } });
                Object.defineProperty(exports2, "iconStrings", { enumerable: true, get: function get() {
                  return constants_1.strings;
                } });
              }
            ),
            /***/
            "./packages/mdc-textfield/index.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-textfield/index.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-textfield/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-textfield/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-textfield/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-textfield/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./types */
                  "./packages/mdc-textfield/types.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./character-counter/index */
                  "./packages/mdc-textfield/character-counter/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./helper-text/index */
                  "./packages/mdc-textfield/helper-text/index.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./icon/index */
                  "./packages/mdc-textfield/icon/index.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-textfield/types.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-textfield/types.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tooltip/adapter.ts": (
              /*!*****************************************!*\
                !*** ./packages/mdc-tooltip/adapter.ts ***!
                \*****************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-tooltip/component.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-tooltip/component.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTooltip = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tooltip/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tooltip/foundation.ts"
                );
                var MDCTooltip = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTooltip2, _super);
                    function MDCTooltip2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTooltip2.attachTo = function(root) {
                      return new MDCTooltip2(root);
                    };
                    MDCTooltip2.prototype.initialize = function() {
                      var tooltipId = this.root.getAttribute("id");
                      if (!tooltipId) {
                        throw new Error("MDCTooltip: Tooltip component must have an id.");
                      }
                      var anchorElem = document.querySelector('[data-tooltip-id="' + tooltipId + '"]') || document.querySelector('[aria-describedby="' + tooltipId + '"]');
                      if (!anchorElem) {
                        throw new Error("MDCTooltip: Tooltip component requires an anchor element annotated with [aria-describedby] or [data-tooltip-id].");
                      }
                      this.anchorElem = anchorElem;
                    };
                    MDCTooltip2.prototype.initialSyncWithDOM = function() {
                      var _this = this;
                      this.isTooltipRich = this.foundation.isRich();
                      this.isTooltipPersistent = this.foundation.isPersistent();
                      this.handleMouseEnter = function() {
                        _this.foundation.handleAnchorMouseEnter();
                      };
                      this.handleFocus = function(evt) {
                        _this.foundation.handleAnchorFocus(evt);
                      };
                      this.handleMouseLeave = function() {
                        _this.foundation.handleAnchorMouseLeave();
                      };
                      this.handleTransitionEnd = function() {
                        _this.foundation.handleTransitionEnd();
                      };
                      this.handleClick = function() {
                        _this.foundation.handleAnchorClick();
                      };
                      this.handleTouchstart = function() {
                        _this.foundation.handleAnchorTouchstart();
                      };
                      this.handleTouchend = function() {
                        _this.foundation.handleAnchorTouchend();
                      };
                      if (this.isTooltipRich && this.isTooltipPersistent) {
                        this.anchorElem.addEventListener("click", this.handleClick);
                      } else {
                        this.anchorElem.addEventListener("mouseenter", this.handleMouseEnter);
                        this.anchorElem.addEventListener("focus", this.handleFocus);
                        this.anchorElem.addEventListener("mouseleave", this.handleMouseLeave);
                        this.anchorElem.addEventListener("touchstart", this.handleTouchstart);
                        this.anchorElem.addEventListener("touchend", this.handleTouchend);
                      }
                      this.listen("transitionend", this.handleTransitionEnd);
                    };
                    MDCTooltip2.prototype.destroy = function() {
                      if (this.anchorElem) {
                        if (this.isTooltipRich && this.isTooltipPersistent) {
                          this.anchorElem.removeEventListener("click", this.handleClick);
                        } else {
                          this.anchorElem.removeEventListener("mouseenter", this.handleMouseEnter);
                          this.anchorElem.removeEventListener("focus", this.handleFocus);
                          this.anchorElem.removeEventListener("mouseleave", this.handleMouseLeave);
                          this.anchorElem.removeEventListener("touchstart", this.handleTouchstart);
                          this.anchorElem.removeEventListener("touchend", this.handleTouchend);
                        }
                      }
                      this.unlisten("transitionend", this.handleTransitionEnd);
                      _super.prototype.destroy.call(this);
                    };
                    MDCTooltip2.prototype.setTooltipPosition = function(position) {
                      this.foundation.setTooltipPosition(position);
                    };
                    MDCTooltip2.prototype.setAnchorBoundaryType = function(type) {
                      this.foundation.setAnchorBoundaryType(type);
                    };
                    MDCTooltip2.prototype.setShowDelay = function(delayMs) {
                      this.foundation.setShowDelay(delayMs);
                    };
                    MDCTooltip2.prototype.setHideDelay = function(delayMs) {
                      this.foundation.setHideDelay(delayMs);
                    };
                    MDCTooltip2.prototype.hide = function() {
                      this.foundation.hide();
                    };
                    MDCTooltip2.prototype.isShown = function() {
                      return this.foundation.isShown();
                    };
                    MDCTooltip2.prototype.attachScrollHandler = function(addEventListenerFn) {
                      this.foundation.attachScrollHandler(addEventListenerFn);
                    };
                    MDCTooltip2.prototype.removeScrollHandler = function(removeEventHandlerFn) {
                      this.foundation.removeScrollHandler(removeEventHandlerFn);
                    };
                    MDCTooltip2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        getAttribute: function getAttribute(attr) {
                          return _this.root.getAttribute(attr);
                        },
                        setAttribute: function setAttribute(attr, value) {
                          _this.root.setAttribute(attr, value);
                        },
                        removeAttribute: function removeAttribute(attr) {
                          _this.root.removeAttribute(attr);
                        },
                        addClass: function addClass(className) {
                          _this.root.classList.add(className);
                        },
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        removeClass: function removeClass(className) {
                          _this.root.classList.remove(className);
                        },
                        getComputedStyleProperty: function getComputedStyleProperty(propertyName) {
                          return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
                        },
                        setStyleProperty: function setStyleProperty(propertyName, value) {
                          _this.root.style.setProperty(propertyName, value);
                        },
                        setSurfaceAnimationStyleProperty: function setSurfaceAnimationStyleProperty(propertyName, value) {
                          var surface = _this.root.querySelector("." + constants_1.CssClasses.SURFACE_ANIMATION);
                          surface === null || surface === void 0 ? void 0 : surface.style.setProperty(propertyName, value);
                        },
                        getViewportWidth: function getViewportWidth() {
                          return window.innerWidth;
                        },
                        getViewportHeight: function getViewportHeight() {
                          return window.innerHeight;
                        },
                        getTooltipSize: function getTooltipSize() {
                          return {
                            width: _this.root.offsetWidth,
                            height: _this.root.offsetHeight
                          };
                        },
                        getAnchorBoundingRect: function getAnchorBoundingRect() {
                          return _this.anchorElem ? _this.anchorElem.getBoundingClientRect() : null;
                        },
                        getParentBoundingRect: function getParentBoundingRect() {
                          var _a, _b;
                          return (_b = (_a = _this.root.parentElement) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : null;
                        },
                        getAnchorAttribute: function getAnchorAttribute(attr) {
                          return _this.anchorElem ? _this.anchorElem.getAttribute(attr) : null;
                        },
                        setAnchorAttribute: function setAnchorAttribute(attr, value) {
                          var _a;
                          (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.setAttribute(attr, value);
                        },
                        isRTL: function isRTL() {
                          return getComputedStyle(_this.root).direction === "rtl";
                        },
                        anchorContainsElement: function anchorContainsElement(element) {
                          var _a;
                          return !!((_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.contains(element));
                        },
                        tooltipContainsElement: function tooltipContainsElement(element) {
                          return _this.root.contains(element);
                        },
                        focusAnchorElement: function focusAnchorElement() {
                          var _a;
                          (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.focus();
                        },
                        registerEventHandler: function registerEventHandler(evt, handler) {
                          if (_this.root instanceof HTMLElement) {
                            _this.root.addEventListener(evt, handler);
                          }
                        },
                        deregisterEventHandler: function deregisterEventHandler(evt, handler) {
                          if (_this.root instanceof HTMLElement) {
                            _this.root.removeEventListener(evt, handler);
                          }
                        },
                        registerAnchorEventHandler: function registerAnchorEventHandler(evt, handler) {
                          var _a;
                          (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.addEventListener(evt, handler);
                        },
                        deregisterAnchorEventHandler: function deregisterAnchorEventHandler(evt, handler) {
                          var _a;
                          (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.removeEventListener(evt, handler);
                        },
                        registerDocumentEventHandler: function registerDocumentEventHandler(evt, handler) {
                          document.body.addEventListener(evt, handler);
                        },
                        deregisterDocumentEventHandler: function deregisterDocumentEventHandler(evt, handler) {
                          document.body.removeEventListener(evt, handler);
                        },
                        registerWindowEventHandler: function registerWindowEventHandler(evt, handler) {
                          window.addEventListener(evt, handler);
                        },
                        deregisterWindowEventHandler: function deregisterWindowEventHandler(evt, handler) {
                          window.removeEventListener(evt, handler);
                        },
                        notifyHidden: function notifyHidden() {
                          _this.emit(constants_1.events.HIDDEN, {});
                        },
                        getTooltipCaretBoundingRect: function getTooltipCaretBoundingRect() {
                          var caret = _this.root.querySelector("." + constants_1.CssClasses.TOOLTIP_CARET_TOP);
                          if (!caret) {
                            return null;
                          }
                          return caret.getBoundingClientRect();
                        },
                        setTooltipCaretStyle: function setTooltipCaretStyle(propertyName, value) {
                          var topCaret = _this.root.querySelector("." + constants_1.CssClasses.TOOLTIP_CARET_TOP);
                          var bottomCaret = _this.root.querySelector("." + constants_1.CssClasses.TOOLTIP_CARET_BOTTOM);
                          if (!topCaret || !bottomCaret) {
                            return;
                          }
                          topCaret.style.setProperty(propertyName, value);
                          bottomCaret.style.setProperty(propertyName, value);
                        },
                        clearTooltipCaretStyles: function clearTooltipCaretStyles() {
                          var topCaret = _this.root.querySelector("." + constants_1.CssClasses.TOOLTIP_CARET_TOP);
                          var bottomCaret = _this.root.querySelector("." + constants_1.CssClasses.TOOLTIP_CARET_BOTTOM);
                          if (!topCaret || !bottomCaret) {
                            return;
                          }
                          topCaret.removeAttribute("style");
                          bottomCaret.removeAttribute("style");
                        },
                        getActiveElement: function getActiveElement() {
                          return document.activeElement;
                        }
                      };
                      return new foundation_1.MDCTooltipFoundation(adapter);
                    };
                    return MDCTooltip2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTooltip = MDCTooltip;
              }
            ),
            /***/
            "./packages/mdc-tooltip/constants.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-tooltip/constants.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.XPositionWithCaret = exports2.YPositionWithCaret = exports2.PositionWithCaret = exports2.strings = exports2.YPosition = exports2.AnchorBoundaryType = exports2.XPosition = exports2.events = exports2.attributes = exports2.numbers = exports2.CssClasses = void 0;
                var CssClasses;
                (function(CssClasses2) {
                  CssClasses2["RICH"] = "mdc-tooltip--rich";
                  CssClasses2["SHOWN"] = "mdc-tooltip--shown";
                  CssClasses2["SHOWING"] = "mdc-tooltip--showing";
                  CssClasses2["SHOWING_TRANSITION"] = "mdc-tooltip--showing-transition";
                  CssClasses2["HIDE"] = "mdc-tooltip--hide";
                  CssClasses2["HIDE_TRANSITION"] = "mdc-tooltip--hide-transition";
                  CssClasses2["MULTILINE_TOOLTIP"] = "mdc-tooltip--multiline";
                  CssClasses2["SURFACE"] = "mdc-tooltip__surface";
                  CssClasses2["SURFACE_ANIMATION"] = "mdc-tooltip__surface-animation";
                  CssClasses2["TOOLTIP_CARET_TOP"] = "mdc-tooltip__caret-surface-top";
                  CssClasses2["TOOLTIP_CARET_BOTTOM"] = "mdc-tooltip__caret-surface-bottom";
                })(CssClasses || (CssClasses = {}));
                exports2.CssClasses = CssClasses;
                var numbers = {
                  BOUNDED_ANCHOR_GAP: 4,
                  UNBOUNDED_ANCHOR_GAP: 8,
                  MIN_VIEWPORT_TOOLTIP_THRESHOLD: 8,
                  HIDE_DELAY_MS: 600,
                  SHOW_DELAY_MS: 500,
                  // LINT.IfChange(tooltip-dimensions)
                  MIN_HEIGHT: 24,
                  MAX_WIDTH: 200,
                  // LINT.ThenChange(_tooltip.scss:tooltip-dimensions)
                  CARET_INDENTATION: 24,
                  // LINT.IfChange(tooltip-anim-scale)
                  ANIMATION_SCALE: 0.8
                };
                exports2.numbers = numbers;
                var attributes = {
                  ARIA_EXPANDED: "aria-expanded",
                  ARIA_HASPOPUP: "aria-haspopup",
                  PERSISTENT: "data-mdc-tooltip-persistent",
                  SCROLLABLE_ANCESTOR: "tooltip-scrollable-ancestor",
                  HAS_CARET: "data-mdc-tooltip-has-caret"
                };
                exports2.attributes = attributes;
                var events = {
                  HIDDEN: "MDCTooltip:hidden"
                };
                exports2.events = events;
                var XPosition;
                (function(XPosition2) {
                  XPosition2[XPosition2["DETECTED"] = 0] = "DETECTED";
                  XPosition2[XPosition2["START"] = 1] = "START";
                  XPosition2[XPosition2["CENTER"] = 2] = "CENTER";
                  XPosition2[XPosition2["END"] = 3] = "END";
                })(XPosition || (XPosition = {}));
                exports2.XPosition = XPosition;
                var YPosition;
                (function(YPosition2) {
                  YPosition2[YPosition2["DETECTED"] = 0] = "DETECTED";
                  YPosition2[YPosition2["ABOVE"] = 1] = "ABOVE";
                  YPosition2[YPosition2["BELOW"] = 2] = "BELOW";
                })(YPosition || (YPosition = {}));
                exports2.YPosition = YPosition;
                var AnchorBoundaryType;
                (function(AnchorBoundaryType2) {
                  AnchorBoundaryType2[AnchorBoundaryType2["BOUNDED"] = 0] = "BOUNDED";
                  AnchorBoundaryType2[AnchorBoundaryType2["UNBOUNDED"] = 1] = "UNBOUNDED";
                })(AnchorBoundaryType || (AnchorBoundaryType = {}));
                exports2.AnchorBoundaryType = AnchorBoundaryType;
                var strings = {
                  LEFT: "left",
                  RIGHT: "right",
                  CENTER: "center",
                  TOP: "top",
                  BOTTOM: "bottom"
                };
                exports2.strings = strings;
                var PositionWithCaret;
                (function(PositionWithCaret2) {
                  PositionWithCaret2[PositionWithCaret2["DETECTED"] = 0] = "DETECTED";
                  PositionWithCaret2[PositionWithCaret2["ABOVE_START"] = 1] = "ABOVE_START";
                  PositionWithCaret2[PositionWithCaret2["ABOVE_CENTER"] = 2] = "ABOVE_CENTER";
                  PositionWithCaret2[PositionWithCaret2["ABOVE_END"] = 3] = "ABOVE_END";
                  PositionWithCaret2[PositionWithCaret2["TOP_SIDE_START"] = 4] = "TOP_SIDE_START";
                  PositionWithCaret2[PositionWithCaret2["CENTER_SIDE_START"] = 5] = "CENTER_SIDE_START";
                  PositionWithCaret2[PositionWithCaret2["BOTTOM_SIDE_START"] = 6] = "BOTTOM_SIDE_START";
                  PositionWithCaret2[PositionWithCaret2["TOP_SIDE_END"] = 7] = "TOP_SIDE_END";
                  PositionWithCaret2[PositionWithCaret2["CENTER_SIDE_END"] = 8] = "CENTER_SIDE_END";
                  PositionWithCaret2[PositionWithCaret2["BOTTOM_SIDE_END"] = 9] = "BOTTOM_SIDE_END";
                  PositionWithCaret2[PositionWithCaret2["BELOW_START"] = 10] = "BELOW_START";
                  PositionWithCaret2[PositionWithCaret2["BELOW_CENTER"] = 11] = "BELOW_CENTER";
                  PositionWithCaret2[PositionWithCaret2["BELOW_END"] = 12] = "BELOW_END";
                })(PositionWithCaret || (PositionWithCaret = {}));
                exports2.PositionWithCaret = PositionWithCaret;
                var YPositionWithCaret;
                (function(YPositionWithCaret2) {
                  YPositionWithCaret2[YPositionWithCaret2["ABOVE"] = 1] = "ABOVE";
                  YPositionWithCaret2[YPositionWithCaret2["BELOW"] = 2] = "BELOW";
                  YPositionWithCaret2[YPositionWithCaret2["SIDE_TOP"] = 3] = "SIDE_TOP";
                  YPositionWithCaret2[YPositionWithCaret2["SIDE_CENTER"] = 4] = "SIDE_CENTER";
                  YPositionWithCaret2[YPositionWithCaret2["SIDE_BOTTOM"] = 5] = "SIDE_BOTTOM";
                })(YPositionWithCaret || (YPositionWithCaret = {}));
                exports2.YPositionWithCaret = YPositionWithCaret;
                var XPositionWithCaret;
                (function(XPositionWithCaret2) {
                  XPositionWithCaret2[XPositionWithCaret2["START"] = 1] = "START";
                  XPositionWithCaret2[XPositionWithCaret2["CENTER"] = 2] = "CENTER";
                  XPositionWithCaret2[XPositionWithCaret2["END"] = 3] = "END";
                  XPositionWithCaret2[XPositionWithCaret2["SIDE_START"] = 4] = "SIDE_START";
                  XPositionWithCaret2[XPositionWithCaret2["SIDE_END"] = 5] = "SIDE_END";
                })(XPositionWithCaret || (XPositionWithCaret = {}));
                exports2.XPositionWithCaret = XPositionWithCaret;
              }
            ),
            /***/
            "./packages/mdc-tooltip/foundation.ts": (
              /*!********************************************!*\
                !*** ./packages/mdc-tooltip/foundation.ts ***!
                \********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTooltipFoundation = void 0;
                var animationframe_1 = __webpack_require__(
                  /*! @material/animation/animationframe */
                  "./packages/mdc-animation/animationframe.ts"
                );
                var util_1 = __webpack_require__(
                  /*! @material/animation/util */
                  "./packages/mdc-animation/util.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var keyboard_1 = __webpack_require__(
                  /*! @material/dom/keyboard */
                  "./packages/mdc-dom/keyboard.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tooltip/constants.ts"
                );
                var RICH = constants_1.CssClasses.RICH, SHOWN = constants_1.CssClasses.SHOWN, SHOWING = constants_1.CssClasses.SHOWING, SHOWING_TRANSITION = constants_1.CssClasses.SHOWING_TRANSITION, HIDE = constants_1.CssClasses.HIDE, HIDE_TRANSITION = constants_1.CssClasses.HIDE_TRANSITION, MULTILINE_TOOLTIP = constants_1.CssClasses.MULTILINE_TOOLTIP;
                var AnimationKeys;
                (function(AnimationKeys2) {
                  AnimationKeys2["POLL_ANCHOR"] = "poll_anchor";
                })(AnimationKeys || (AnimationKeys = {}));
                var HAS_WINDOW = typeof window !== "undefined";
                var MDCTooltipFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTooltipFoundation2, _super);
                    function MDCTooltipFoundation2(adapter) {
                      var _this = _super.call(this, __assign(__assign({}, MDCTooltipFoundation2.defaultAdapter), adapter)) || this;
                      _this.tooltipShown = false;
                      _this.anchorGap = constants_1.numbers.BOUNDED_ANCHOR_GAP;
                      _this.xTooltipPos = constants_1.XPosition.DETECTED;
                      _this.yTooltipPos = constants_1.YPosition.DETECTED;
                      _this.tooltipPositionWithCaret = constants_1.PositionWithCaret.DETECTED;
                      _this.minViewportTooltipThreshold = constants_1.numbers.MIN_VIEWPORT_TOOLTIP_THRESHOLD;
                      _this.hideDelayMs = constants_1.numbers.HIDE_DELAY_MS;
                      _this.showDelayMs = constants_1.numbers.SHOW_DELAY_MS;
                      _this.anchorRect = null;
                      _this.parentRect = null;
                      _this.frameId = null;
                      _this.hideTimeout = null;
                      _this.showTimeout = null;
                      _this.addAncestorScrollEventListeners = new Array();
                      _this.removeAncestorScrollEventListeners = new Array();
                      _this.animFrame = new animationframe_1.AnimationFrame();
                      _this.anchorBlurHandler = function(evt) {
                        _this.handleAnchorBlur(evt);
                      };
                      _this.documentClickHandler = function(evt) {
                        _this.handleDocumentClick(evt);
                      };
                      _this.documentKeydownHandler = function(evt) {
                        _this.handleKeydown(evt);
                      };
                      _this.tooltipMouseEnterHandler = function() {
                        _this.handleTooltipMouseEnter();
                      };
                      _this.tooltipMouseLeaveHandler = function() {
                        _this.handleTooltipMouseLeave();
                      };
                      _this.richTooltipFocusOutHandler = function(evt) {
                        _this.handleRichTooltipFocusOut(evt);
                      };
                      _this.windowScrollHandler = function() {
                        _this.handleWindowScrollEvent();
                      };
                      _this.windowResizeHandler = function() {
                        _this.handleWindowChangeEvent();
                      };
                      return _this;
                    }
                    Object.defineProperty(MDCTooltipFoundation2, "defaultAdapter", {
                      get: function get() {
                        return {
                          getAttribute: function getAttribute() {
                            return null;
                          },
                          setAttribute: function setAttribute() {
                            return void 0;
                          },
                          removeAttribute: function removeAttribute() {
                            return void 0;
                          },
                          addClass: function addClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          getComputedStyleProperty: function getComputedStyleProperty() {
                            return "";
                          },
                          setStyleProperty: function setStyleProperty() {
                            return void 0;
                          },
                          setSurfaceAnimationStyleProperty: function setSurfaceAnimationStyleProperty() {
                            return void 0;
                          },
                          getViewportWidth: function getViewportWidth() {
                            return 0;
                          },
                          getViewportHeight: function getViewportHeight() {
                            return 0;
                          },
                          getTooltipSize: function getTooltipSize() {
                            return { width: 0, height: 0 };
                          },
                          getAnchorBoundingRect: function getAnchorBoundingRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          getParentBoundingRect: function getParentBoundingRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          getAnchorAttribute: function getAnchorAttribute() {
                            return null;
                          },
                          setAnchorAttribute: function setAnchorAttribute() {
                            return null;
                          },
                          isRTL: function isRTL() {
                            return false;
                          },
                          anchorContainsElement: function anchorContainsElement() {
                            return false;
                          },
                          tooltipContainsElement: function tooltipContainsElement() {
                            return false;
                          },
                          focusAnchorElement: function focusAnchorElement() {
                            return void 0;
                          },
                          registerEventHandler: function registerEventHandler() {
                            return void 0;
                          },
                          deregisterEventHandler: function deregisterEventHandler() {
                            return void 0;
                          },
                          registerAnchorEventHandler: function registerAnchorEventHandler() {
                            return void 0;
                          },
                          deregisterAnchorEventHandler: function deregisterAnchorEventHandler() {
                            return void 0;
                          },
                          registerDocumentEventHandler: function registerDocumentEventHandler() {
                            return void 0;
                          },
                          deregisterDocumentEventHandler: function deregisterDocumentEventHandler() {
                            return void 0;
                          },
                          registerWindowEventHandler: function registerWindowEventHandler() {
                            return void 0;
                          },
                          deregisterWindowEventHandler: function deregisterWindowEventHandler() {
                            return void 0;
                          },
                          notifyHidden: function notifyHidden() {
                            return void 0;
                          },
                          getTooltipCaretBoundingRect: function getTooltipCaretBoundingRect() {
                            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
                          },
                          setTooltipCaretStyle: function setTooltipCaretStyle() {
                            return void 0;
                          },
                          clearTooltipCaretStyles: function clearTooltipCaretStyles() {
                            return void 0;
                          },
                          getActiveElement: function getActiveElement() {
                            return null;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTooltipFoundation2.prototype.init = function() {
                      this.richTooltip = this.adapter.hasClass(RICH);
                      this.persistentTooltip = this.adapter.getAttribute(constants_1.attributes.PERSISTENT) === "true";
                      this.interactiveTooltip = !!this.adapter.getAnchorAttribute(constants_1.attributes.ARIA_EXPANDED) && this.adapter.getAnchorAttribute(constants_1.attributes.ARIA_HASPOPUP) === "dialog";
                      this.hasCaret = this.richTooltip && this.adapter.getAttribute(constants_1.attributes.HAS_CARET) === "true";
                    };
                    MDCTooltipFoundation2.prototype.isShown = function() {
                      return this.tooltipShown;
                    };
                    MDCTooltipFoundation2.prototype.isRich = function() {
                      return this.richTooltip;
                    };
                    MDCTooltipFoundation2.prototype.isPersistent = function() {
                      return this.persistentTooltip;
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorMouseEnter = function() {
                      var _this = this;
                      if (this.tooltipShown) {
                        this.show();
                      } else {
                        this.clearHideTimeout();
                        this.showTimeout = setTimeout(function() {
                          _this.show();
                        }, this.showDelayMs);
                      }
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorTouchstart = function() {
                      var _this = this;
                      this.showTimeout = setTimeout(function() {
                        _this.show();
                      }, this.showDelayMs);
                      this.adapter.registerWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
                    };
                    MDCTooltipFoundation2.prototype.preventContextMenuOnLongTouch = function(evt) {
                      evt.preventDefault();
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorTouchend = function() {
                      this.clearShowTimeout();
                      if (!this.isShown()) {
                        this.adapter.deregisterWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
                      }
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorFocus = function(evt) {
                      var _this = this;
                      var relatedTarget = evt.relatedTarget;
                      var tooltipContainsRelatedTarget = relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(relatedTarget);
                      if (tooltipContainsRelatedTarget) {
                        return;
                      }
                      this.showTimeout = setTimeout(function() {
                        _this.show();
                      }, this.showDelayMs);
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorMouseLeave = function() {
                      var _this = this;
                      this.clearShowTimeout();
                      this.hideTimeout = setTimeout(function() {
                        _this.hide();
                      }, this.hideDelayMs);
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorClick = function() {
                      if (this.tooltipShown) {
                        this.hide();
                      } else {
                        this.show();
                      }
                    };
                    MDCTooltipFoundation2.prototype.handleDocumentClick = function(evt) {
                      var anchorOrTooltipContainsTargetElement = evt.target instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.target) || this.adapter.tooltipContainsElement(evt.target));
                      if (this.richTooltip && this.persistentTooltip && anchorOrTooltipContainsTargetElement) {
                        return;
                      }
                      this.hide();
                    };
                    MDCTooltipFoundation2.prototype.handleKeydown = function(evt) {
                      var key = keyboard_1.normalizeKey(evt);
                      if (key === keyboard_1.KEY.ESCAPE) {
                        var activeElement = this.adapter.getActiveElement();
                        var tooltipContainsActiveElement = activeElement instanceof HTMLElement && this.adapter.tooltipContainsElement(activeElement);
                        if (tooltipContainsActiveElement) {
                          this.adapter.focusAnchorElement();
                        }
                        this.hide();
                      }
                    };
                    MDCTooltipFoundation2.prototype.handleAnchorBlur = function(evt) {
                      if (this.richTooltip) {
                        var tooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(evt.relatedTarget);
                        if (tooltipContainsRelatedTargetElement) {
                          return;
                        }
                        if (evt.relatedTarget === null && this.interactiveTooltip) {
                          return;
                        }
                      }
                      this.hide();
                    };
                    MDCTooltipFoundation2.prototype.handleTooltipMouseEnter = function() {
                      this.show();
                    };
                    MDCTooltipFoundation2.prototype.handleTooltipMouseLeave = function() {
                      var _this = this;
                      this.clearShowTimeout();
                      this.hideTimeout = setTimeout(function() {
                        _this.hide();
                      }, this.hideDelayMs);
                    };
                    MDCTooltipFoundation2.prototype.handleRichTooltipFocusOut = function(evt) {
                      var anchorOrTooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.relatedTarget) || this.adapter.tooltipContainsElement(evt.relatedTarget));
                      if (anchorOrTooltipContainsRelatedTargetElement) {
                        return;
                      }
                      if (evt.relatedTarget === null && this.interactiveTooltip) {
                        return;
                      }
                      this.hide();
                    };
                    MDCTooltipFoundation2.prototype.handleWindowScrollEvent = function() {
                      if (this.persistentTooltip) {
                        this.handleWindowChangeEvent();
                        return;
                      }
                      this.hide();
                    };
                    MDCTooltipFoundation2.prototype.handleWindowChangeEvent = function() {
                      var _this = this;
                      this.animFrame.request(AnimationKeys.POLL_ANCHOR, function() {
                        _this.repositionTooltipOnAnchorMove();
                      });
                    };
                    MDCTooltipFoundation2.prototype.show = function() {
                      var e_1, _a;
                      var _this = this;
                      this.clearHideTimeout();
                      this.clearShowTimeout();
                      if (this.tooltipShown) {
                        return;
                      }
                      this.tooltipShown = true;
                      this.adapter.removeAttribute("aria-hidden");
                      if (this.richTooltip) {
                        if (this.interactiveTooltip) {
                          this.adapter.setAnchorAttribute("aria-expanded", "true");
                        }
                        this.adapter.registerEventHandler("focusout", this.richTooltipFocusOutHandler);
                      }
                      if (!this.persistentTooltip) {
                        this.adapter.registerEventHandler("mouseenter", this.tooltipMouseEnterHandler);
                        this.adapter.registerEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
                      }
                      this.adapter.removeClass(HIDE);
                      this.adapter.addClass(SHOWING);
                      if (this.isTooltipMultiline() && !this.richTooltip) {
                        this.adapter.addClass(MULTILINE_TOOLTIP);
                      }
                      this.anchorRect = this.adapter.getAnchorBoundingRect();
                      this.parentRect = this.adapter.getParentBoundingRect();
                      this.richTooltip ? this.positionRichTooltip() : this.positionPlainTooltip();
                      this.adapter.registerAnchorEventHandler("blur", this.anchorBlurHandler);
                      this.adapter.registerDocumentEventHandler("click", this.documentClickHandler);
                      this.adapter.registerDocumentEventHandler("keydown", this.documentKeydownHandler);
                      this.adapter.registerWindowEventHandler("scroll", this.windowScrollHandler);
                      this.adapter.registerWindowEventHandler("resize", this.windowResizeHandler);
                      try {
                        for (var _b = __values(this.addAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var fn = _c.value;
                          fn();
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      this.frameId = requestAnimationFrame(function() {
                        _this.clearAllAnimationClasses();
                        _this.adapter.addClass(SHOWN);
                        _this.adapter.addClass(SHOWING_TRANSITION);
                      });
                    };
                    MDCTooltipFoundation2.prototype.hide = function() {
                      var e_2, _a;
                      this.clearHideTimeout();
                      this.clearShowTimeout();
                      if (!this.tooltipShown) {
                        return;
                      }
                      if (this.frameId) {
                        cancelAnimationFrame(this.frameId);
                      }
                      this.tooltipShown = false;
                      this.adapter.setAttribute("aria-hidden", "true");
                      this.adapter.deregisterEventHandler("focusout", this.richTooltipFocusOutHandler);
                      if (this.richTooltip) {
                        if (this.interactiveTooltip) {
                          this.adapter.setAnchorAttribute("aria-expanded", "false");
                        }
                      }
                      if (!this.persistentTooltip) {
                        this.adapter.deregisterEventHandler("mouseenter", this.tooltipMouseEnterHandler);
                        this.adapter.deregisterEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
                      }
                      this.clearAllAnimationClasses();
                      this.adapter.addClass(HIDE);
                      this.adapter.addClass(HIDE_TRANSITION);
                      this.adapter.removeClass(SHOWN);
                      this.adapter.deregisterAnchorEventHandler("blur", this.anchorBlurHandler);
                      this.adapter.deregisterDocumentEventHandler("click", this.documentClickHandler);
                      this.adapter.deregisterDocumentEventHandler("keydown", this.documentKeydownHandler);
                      this.adapter.deregisterWindowEventHandler("scroll", this.windowScrollHandler);
                      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
                      this.adapter.deregisterWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
                      try {
                        for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var fn = _c.value;
                          fn();
                        }
                      } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_2)
                            throw e_2.error;
                        }
                      }
                    };
                    MDCTooltipFoundation2.prototype.handleTransitionEnd = function() {
                      var isHidingTooltip = this.adapter.hasClass(HIDE);
                      this.adapter.removeClass(SHOWING);
                      this.adapter.removeClass(SHOWING_TRANSITION);
                      this.adapter.removeClass(HIDE);
                      this.adapter.removeClass(HIDE_TRANSITION);
                      if (isHidingTooltip && this.showTimeout === null) {
                        this.adapter.notifyHidden();
                      }
                    };
                    MDCTooltipFoundation2.prototype.clearAllAnimationClasses = function() {
                      this.adapter.removeClass(SHOWING_TRANSITION);
                      this.adapter.removeClass(HIDE_TRANSITION);
                    };
                    MDCTooltipFoundation2.prototype.setTooltipPosition = function(position) {
                      var xPos = position.xPos, yPos = position.yPos, withCaretPos = position.withCaretPos;
                      if (this.hasCaret && withCaretPos) {
                        this.tooltipPositionWithCaret = withCaretPos;
                        return;
                      }
                      if (xPos) {
                        this.xTooltipPos = xPos;
                      }
                      if (yPos) {
                        this.yTooltipPos = yPos;
                      }
                    };
                    MDCTooltipFoundation2.prototype.setAnchorBoundaryType = function(type) {
                      if (type === constants_1.AnchorBoundaryType.UNBOUNDED) {
                        this.anchorGap = constants_1.numbers.UNBOUNDED_ANCHOR_GAP;
                      } else {
                        this.anchorGap = constants_1.numbers.BOUNDED_ANCHOR_GAP;
                      }
                    };
                    MDCTooltipFoundation2.prototype.setShowDelay = function(delayMs) {
                      this.showDelayMs = delayMs;
                    };
                    MDCTooltipFoundation2.prototype.setHideDelay = function(delayMs) {
                      this.hideDelayMs = delayMs;
                    };
                    MDCTooltipFoundation2.prototype.isTooltipMultiline = function() {
                      var tooltipSize = this.adapter.getTooltipSize();
                      return tooltipSize.height > constants_1.numbers.MIN_HEIGHT && tooltipSize.width >= constants_1.numbers.MAX_WIDTH;
                    };
                    MDCTooltipFoundation2.prototype.positionPlainTooltip = function() {
                      var _a = this.calculateTooltipStyles(this.anchorRect), top = _a.top, yTransformOrigin = _a.yTransformOrigin, left = _a.left, xTransformOrigin = _a.xTransformOrigin;
                      var transformProperty = HAS_WINDOW ? util_1.getCorrectPropertyName(window, "transform") : "transform";
                      this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
                      this.adapter.setStyleProperty("top", top + "px");
                      this.adapter.setStyleProperty("left", left + "px");
                    };
                    MDCTooltipFoundation2.prototype.positionRichTooltip = function() {
                      var _a, _b, _c, _d;
                      var width = this.adapter.getComputedStyleProperty("width");
                      this.adapter.setStyleProperty("width", width);
                      var _e = this.hasCaret ? this.calculateTooltipWithCaretStyles(this.anchorRect) : this.calculateTooltipStyles(this.anchorRect), top = _e.top, yTransformOrigin = _e.yTransformOrigin, left = _e.left, xTransformOrigin = _e.xTransformOrigin;
                      var transformProperty = HAS_WINDOW ? util_1.getCorrectPropertyName(window, "transform") : "transform";
                      this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
                      var leftAdjustment = left - ((_b = (_a = this.parentRect) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0);
                      var topAdjustment = top - ((_d = (_c = this.parentRect) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0);
                      this.adapter.setStyleProperty("top", topAdjustment + "px");
                      this.adapter.setStyleProperty("left", leftAdjustment + "px");
                    };
                    MDCTooltipFoundation2.prototype.calculateTooltipStyles = function(anchorRect) {
                      if (!anchorRect) {
                        return { top: 0, left: 0 };
                      }
                      var tooltipSize = this.adapter.getTooltipSize();
                      var top = this.calculateYTooltipDistance(anchorRect, tooltipSize.height);
                      var left = this.calculateXTooltipDistance(anchorRect, tooltipSize.width);
                      return {
                        top: top.distance,
                        yTransformOrigin: top.yTransformOrigin,
                        left: left.distance,
                        xTransformOrigin: left.xTransformOrigin
                      };
                    };
                    MDCTooltipFoundation2.prototype.calculateXTooltipDistance = function(anchorRect, tooltipWidth) {
                      var isLTR = !this.adapter.isRTL();
                      var startPos, endPos, centerPos;
                      var startTransformOrigin, endTransformOrigin;
                      if (this.richTooltip) {
                        startPos = isLTR ? anchorRect.left - tooltipWidth : anchorRect.right;
                        endPos = isLTR ? anchorRect.right : anchorRect.left - tooltipWidth;
                        startTransformOrigin = isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT;
                        endTransformOrigin = isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT;
                      } else {
                        startPos = isLTR ? anchorRect.left : anchorRect.right - tooltipWidth;
                        endPos = isLTR ? anchorRect.right - tooltipWidth : anchorRect.left;
                        centerPos = anchorRect.left + (anchorRect.width - tooltipWidth) / 2;
                        startTransformOrigin = isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT;
                        endTransformOrigin = isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT;
                      }
                      var positionOptions = this.richTooltip ? this.determineValidPositionOptions(startPos, endPos) : (
                        // For plain tooltips, centerPos is defined
                        this.determineValidPositionOptions(centerPos, startPos, endPos)
                      );
                      if (this.xTooltipPos === constants_1.XPosition.START && positionOptions.has(startPos)) {
                        return { distance: startPos, xTransformOrigin: startTransformOrigin };
                      }
                      if (this.xTooltipPos === constants_1.XPosition.END && positionOptions.has(endPos)) {
                        return { distance: endPos, xTransformOrigin: endTransformOrigin };
                      }
                      if (this.xTooltipPos === constants_1.XPosition.CENTER && positionOptions.has(centerPos)) {
                        return { distance: centerPos, xTransformOrigin: constants_1.strings.CENTER };
                      }
                      var possiblePositions = this.richTooltip ? [{ distance: endPos, xTransformOrigin: endTransformOrigin }, { distance: startPos, xTransformOrigin: startTransformOrigin }] : [{ distance: centerPos, xTransformOrigin: constants_1.strings.CENTER }, { distance: startPos, xTransformOrigin: startTransformOrigin }, { distance: endPos, xTransformOrigin: endTransformOrigin }];
                      var validPosition = possiblePositions.find(function(_a) {
                        var distance2 = _a.distance;
                        return positionOptions.has(distance2);
                      });
                      if (validPosition) {
                        return validPosition;
                      }
                      if (anchorRect.left < 0) {
                        return {
                          distance: this.minViewportTooltipThreshold,
                          xTransformOrigin: constants_1.strings.LEFT
                        };
                      } else {
                        var viewportWidth = this.adapter.getViewportWidth();
                        var distance = viewportWidth - (tooltipWidth + this.minViewportTooltipThreshold);
                        return { distance, xTransformOrigin: constants_1.strings.RIGHT };
                      }
                    };
                    MDCTooltipFoundation2.prototype.determineValidPositionOptions = function() {
                      var e_3, _a;
                      var positions = [];
                      for (var _i = 0; _i < arguments.length; _i++) {
                        positions[_i] = arguments[_i];
                      }
                      var posWithinThreshold = /* @__PURE__ */ new Set();
                      var posWithinViewport = /* @__PURE__ */ new Set();
                      try {
                        for (var positions_1 = __values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
                          var position = positions_1_1.value;
                          if (this.positionHonorsViewportThreshold(position)) {
                            posWithinThreshold.add(position);
                          } else if (this.positionDoesntCollideWithViewport(position)) {
                            posWithinViewport.add(position);
                          }
                        }
                      } catch (e_3_1) {
                        e_3 = { error: e_3_1 };
                      } finally {
                        try {
                          if (positions_1_1 && !positions_1_1.done && (_a = positions_1.return))
                            _a.call(positions_1);
                        } finally {
                          if (e_3)
                            throw e_3.error;
                        }
                      }
                      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
                    };
                    MDCTooltipFoundation2.prototype.positionHonorsViewportThreshold = function(leftPos) {
                      var viewportWidth = this.adapter.getViewportWidth();
                      var tooltipWidth = this.adapter.getTooltipSize().width;
                      return leftPos + tooltipWidth <= viewportWidth - this.minViewportTooltipThreshold && leftPos >= this.minViewportTooltipThreshold;
                    };
                    MDCTooltipFoundation2.prototype.positionDoesntCollideWithViewport = function(leftPos) {
                      var viewportWidth = this.adapter.getViewportWidth();
                      var tooltipWidth = this.adapter.getTooltipSize().width;
                      return leftPos + tooltipWidth <= viewportWidth && leftPos >= 0;
                    };
                    MDCTooltipFoundation2.prototype.calculateYTooltipDistance = function(anchorRect, tooltipHeight) {
                      var belowYPos = anchorRect.bottom + this.anchorGap;
                      var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight);
                      var yPositionOptions = this.determineValidYPositionOptions(aboveYPos, belowYPos);
                      if (this.yTooltipPos === constants_1.YPosition.ABOVE && yPositionOptions.has(aboveYPos)) {
                        return { distance: aboveYPos, yTransformOrigin: constants_1.strings.BOTTOM };
                      } else if (this.yTooltipPos === constants_1.YPosition.BELOW && yPositionOptions.has(belowYPos)) {
                        return { distance: belowYPos, yTransformOrigin: constants_1.strings.TOP };
                      }
                      if (yPositionOptions.has(belowYPos)) {
                        return { distance: belowYPos, yTransformOrigin: constants_1.strings.TOP };
                      }
                      if (yPositionOptions.has(aboveYPos)) {
                        return { distance: aboveYPos, yTransformOrigin: constants_1.strings.BOTTOM };
                      }
                      return { distance: belowYPos, yTransformOrigin: constants_1.strings.TOP };
                    };
                    MDCTooltipFoundation2.prototype.determineValidYPositionOptions = function(aboveAnchorPos, belowAnchorPos) {
                      var posWithinThreshold = /* @__PURE__ */ new Set();
                      var posWithinViewport = /* @__PURE__ */ new Set();
                      if (this.yPositionHonorsViewportThreshold(aboveAnchorPos)) {
                        posWithinThreshold.add(aboveAnchorPos);
                      } else if (this.yPositionDoesntCollideWithViewport(aboveAnchorPos)) {
                        posWithinViewport.add(aboveAnchorPos);
                      }
                      if (this.yPositionHonorsViewportThreshold(belowAnchorPos)) {
                        posWithinThreshold.add(belowAnchorPos);
                      } else if (this.yPositionDoesntCollideWithViewport(belowAnchorPos)) {
                        posWithinViewport.add(belowAnchorPos);
                      }
                      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
                    };
                    MDCTooltipFoundation2.prototype.yPositionHonorsViewportThreshold = function(yPos) {
                      var viewportHeight = this.adapter.getViewportHeight();
                      var tooltipHeight = this.adapter.getTooltipSize().height;
                      return yPos + tooltipHeight + this.minViewportTooltipThreshold <= viewportHeight && yPos >= this.minViewportTooltipThreshold;
                    };
                    MDCTooltipFoundation2.prototype.yPositionDoesntCollideWithViewport = function(yPos) {
                      var viewportHeight = this.adapter.getViewportHeight();
                      var tooltipHeight = this.adapter.getTooltipSize().height;
                      return yPos + tooltipHeight <= viewportHeight && yPos >= 0;
                    };
                    MDCTooltipFoundation2.prototype.calculateTooltipWithCaretStyles = function(anchorRect) {
                      this.adapter.clearTooltipCaretStyles();
                      var caretSize = this.adapter.getTooltipCaretBoundingRect();
                      if (!anchorRect || !caretSize) {
                        return { position: constants_1.PositionWithCaret.DETECTED, top: 0, left: 0 };
                      }
                      var caretWidth = caretSize.width / constants_1.numbers.ANIMATION_SCALE;
                      var caretHeight = caretSize.height / constants_1.numbers.ANIMATION_SCALE / 2;
                      var tooltipSize = this.adapter.getTooltipSize();
                      var yOptions = this.calculateYWithCaretDistanceOptions(anchorRect, tooltipSize.height, { caretWidth, caretHeight });
                      var xOptions = this.calculateXWithCaretDistanceOptions(anchorRect, tooltipSize.width, { caretWidth, caretHeight });
                      var positionOptions = this.validateTooltipWithCaretDistances(yOptions, xOptions);
                      if (positionOptions.size < 1) {
                        positionOptions = this.generateBackupPositionOption(anchorRect, tooltipSize, { caretWidth, caretHeight });
                      }
                      var _a = this.determineTooltipWithCaretDistance(positionOptions), position = _a.position, xDistance = _a.xDistance, yDistance = _a.yDistance;
                      var _b = this.setCaretPositionStyles(position, { caretWidth, caretHeight }), yTransformOrigin = _b.yTransformOrigin, xTransformOrigin = _b.xTransformOrigin;
                      return {
                        yTransformOrigin,
                        xTransformOrigin,
                        top: yDistance,
                        left: xDistance
                      };
                    };
                    MDCTooltipFoundation2.prototype.calculateXWithCaretDistanceOptions = function(anchorRect, tooltipWidth, caretSize) {
                      var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
                      var isLTR = !this.adapter.isRTL();
                      var anchorMidpoint = anchorRect.left + anchorRect.width / 2;
                      var sideLeftAligned = anchorRect.left - (tooltipWidth + this.anchorGap + caretHeight);
                      var sideRightAligned = anchorRect.right + this.anchorGap + caretHeight;
                      var sideStartPos = isLTR ? sideLeftAligned : sideRightAligned;
                      var sideEndPos = isLTR ? sideRightAligned : sideLeftAligned;
                      var verticalLeftAligned = anchorMidpoint - (constants_1.numbers.CARET_INDENTATION + caretWidth / 2);
                      var verticalRightAligned = anchorMidpoint - (tooltipWidth - constants_1.numbers.CARET_INDENTATION - caretWidth / 2);
                      var verticalStartPos = isLTR ? verticalLeftAligned : verticalRightAligned;
                      var verticalEndPos = isLTR ? verticalRightAligned : verticalLeftAligned;
                      var verticalCenterPos = anchorMidpoint - tooltipWidth / 2;
                      var possiblePositionsMap = /* @__PURE__ */ new Map([[constants_1.XPositionWithCaret.START, verticalStartPos], [constants_1.XPositionWithCaret.CENTER, verticalCenterPos], [constants_1.XPositionWithCaret.END, verticalEndPos], [constants_1.XPositionWithCaret.SIDE_END, sideEndPos], [constants_1.XPositionWithCaret.SIDE_START, sideStartPos]]);
                      return possiblePositionsMap;
                    };
                    MDCTooltipFoundation2.prototype.calculateYWithCaretDistanceOptions = function(anchorRect, tooltipHeight, caretSize) {
                      var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
                      var anchorMidpoint = anchorRect.top + anchorRect.height / 2;
                      var belowYPos = anchorRect.bottom + this.anchorGap + caretHeight;
                      var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight + caretHeight);
                      var sideTopYPos = anchorMidpoint - (constants_1.numbers.CARET_INDENTATION + caretWidth / 2);
                      var sideCenterYPos = anchorMidpoint - tooltipHeight / 2;
                      var sideBottomYPos = anchorMidpoint - (tooltipHeight - constants_1.numbers.CARET_INDENTATION - caretWidth / 2);
                      var possiblePositionsMap = /* @__PURE__ */ new Map([[constants_1.YPositionWithCaret.ABOVE, aboveYPos], [constants_1.YPositionWithCaret.BELOW, belowYPos], [constants_1.YPositionWithCaret.SIDE_TOP, sideTopYPos], [constants_1.YPositionWithCaret.SIDE_CENTER, sideCenterYPos], [constants_1.YPositionWithCaret.SIDE_BOTTOM, sideBottomYPos]]);
                      return possiblePositionsMap;
                    };
                    MDCTooltipFoundation2.prototype.repositionTooltipOnAnchorMove = function() {
                      var newAnchorRect = this.adapter.getAnchorBoundingRect();
                      if (!newAnchorRect || !this.anchorRect)
                        return;
                      if (newAnchorRect.top !== this.anchorRect.top || newAnchorRect.left !== this.anchorRect.left || newAnchorRect.height !== this.anchorRect.height || newAnchorRect.width !== this.anchorRect.width) {
                        this.anchorRect = newAnchorRect;
                        this.parentRect = this.adapter.getParentBoundingRect();
                        this.richTooltip ? this.positionRichTooltip() : this.positionPlainTooltip();
                      }
                    };
                    MDCTooltipFoundation2.prototype.validateTooltipWithCaretDistances = function(yOptions, xOptions) {
                      var e_4, _a, e_5, _b, e_6, _c;
                      var posWithinThreshold = /* @__PURE__ */ new Map();
                      var posWithinViewport = /* @__PURE__ */ new Map();
                      var validMappings = /* @__PURE__ */ new Map([[constants_1.YPositionWithCaret.ABOVE, [constants_1.XPositionWithCaret.START, constants_1.XPositionWithCaret.CENTER, constants_1.XPositionWithCaret.END]], [constants_1.YPositionWithCaret.BELOW, [constants_1.XPositionWithCaret.START, constants_1.XPositionWithCaret.CENTER, constants_1.XPositionWithCaret.END]], [constants_1.YPositionWithCaret.SIDE_TOP, [constants_1.XPositionWithCaret.SIDE_START, constants_1.XPositionWithCaret.SIDE_END]], [constants_1.YPositionWithCaret.SIDE_CENTER, [constants_1.XPositionWithCaret.SIDE_START, constants_1.XPositionWithCaret.SIDE_END]], [constants_1.YPositionWithCaret.SIDE_BOTTOM, [constants_1.XPositionWithCaret.SIDE_START, constants_1.XPositionWithCaret.SIDE_END]]]);
                      try {
                        for (var _d = __values(validMappings.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
                          var y = _e.value;
                          var yDistance = yOptions.get(y);
                          if (this.yPositionHonorsViewportThreshold(yDistance)) {
                            try {
                              for (var _f = (e_5 = void 0, __values(validMappings.get(y))), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var x = _g.value;
                                var xDistance = xOptions.get(x);
                                if (this.positionHonorsViewportThreshold(xDistance)) {
                                  var caretPositionName = this.caretPositionOptionsMapping(x, y);
                                  posWithinThreshold.set(caretPositionName, { xDistance, yDistance });
                                }
                              }
                            } catch (e_5_1) {
                              e_5 = { error: e_5_1 };
                            } finally {
                              try {
                                if (_g && !_g.done && (_b = _f.return))
                                  _b.call(_f);
                              } finally {
                                if (e_5)
                                  throw e_5.error;
                              }
                            }
                          }
                          if (this.yPositionDoesntCollideWithViewport(yDistance)) {
                            try {
                              for (var _h = (e_6 = void 0, __values(validMappings.get(y))), _j = _h.next(); !_j.done; _j = _h.next()) {
                                var x = _j.value;
                                var xDistance = xOptions.get(x);
                                if (this.positionDoesntCollideWithViewport(xDistance)) {
                                  var caretPositionName = this.caretPositionOptionsMapping(x, y);
                                  posWithinViewport.set(caretPositionName, { xDistance, yDistance });
                                }
                              }
                            } catch (e_6_1) {
                              e_6 = { error: e_6_1 };
                            } finally {
                              try {
                                if (_j && !_j.done && (_c = _h.return))
                                  _c.call(_h);
                              } finally {
                                if (e_6)
                                  throw e_6.error;
                              }
                            }
                          }
                        }
                      } catch (e_4_1) {
                        e_4 = { error: e_4_1 };
                      } finally {
                        try {
                          if (_e && !_e.done && (_a = _d.return))
                            _a.call(_d);
                        } finally {
                          if (e_4)
                            throw e_4.error;
                        }
                      }
                      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
                    };
                    MDCTooltipFoundation2.prototype.generateBackupPositionOption = function(anchorRect, tooltipSize, caretSize) {
                      var isLTR = !this.adapter.isRTL();
                      var xDistance;
                      var xPos;
                      if (anchorRect.left < 0) {
                        xDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
                        xPos = isLTR ? constants_1.XPositionWithCaret.END : constants_1.XPositionWithCaret.START;
                      } else {
                        var viewportWidth = this.adapter.getViewportWidth();
                        xDistance = viewportWidth - (tooltipSize.width + this.minViewportTooltipThreshold + caretSize.caretHeight);
                        xPos = isLTR ? constants_1.XPositionWithCaret.START : constants_1.XPositionWithCaret.END;
                      }
                      var yDistance;
                      var yPos;
                      if (anchorRect.top < 0) {
                        yDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
                        yPos = constants_1.YPositionWithCaret.BELOW;
                      } else {
                        var viewportHeight = this.adapter.getViewportHeight();
                        yDistance = viewportHeight - (tooltipSize.height + this.minViewportTooltipThreshold + caretSize.caretHeight);
                        yPos = constants_1.YPositionWithCaret.ABOVE;
                      }
                      var caretPositionName = this.caretPositionOptionsMapping(xPos, yPos);
                      return /* @__PURE__ */ new Map([[caretPositionName, { xDistance, yDistance }]]);
                    };
                    MDCTooltipFoundation2.prototype.determineTooltipWithCaretDistance = function(options) {
                      if (options.has(this.tooltipPositionWithCaret)) {
                        var tooltipPos = options.get(this.tooltipPositionWithCaret);
                        return {
                          position: this.tooltipPositionWithCaret,
                          xDistance: tooltipPos.xDistance,
                          yDistance: tooltipPos.yDistance
                        };
                      }
                      var orderPref = [constants_1.PositionWithCaret.ABOVE_START, constants_1.PositionWithCaret.ABOVE_CENTER, constants_1.PositionWithCaret.ABOVE_END, constants_1.PositionWithCaret.TOP_SIDE_START, constants_1.PositionWithCaret.CENTER_SIDE_START, constants_1.PositionWithCaret.BOTTOM_SIDE_START, constants_1.PositionWithCaret.TOP_SIDE_END, constants_1.PositionWithCaret.CENTER_SIDE_END, constants_1.PositionWithCaret.BOTTOM_SIDE_END, constants_1.PositionWithCaret.BELOW_START, constants_1.PositionWithCaret.BELOW_CENTER, constants_1.PositionWithCaret.BELOW_END];
                      var validPosition = orderPref.find(function(pos2) {
                        return options.has(pos2);
                      });
                      var pos = options.get(validPosition);
                      return {
                        position: validPosition,
                        xDistance: pos.xDistance,
                        yDistance: pos.yDistance
                      };
                    };
                    MDCTooltipFoundation2.prototype.caretPositionOptionsMapping = function(xPos, yPos) {
                      switch (yPos) {
                        case constants_1.YPositionWithCaret.ABOVE:
                          if (xPos === constants_1.XPositionWithCaret.START) {
                            return constants_1.PositionWithCaret.ABOVE_START;
                          } else if (xPos === constants_1.XPositionWithCaret.CENTER) {
                            return constants_1.PositionWithCaret.ABOVE_CENTER;
                          } else if (xPos === constants_1.XPositionWithCaret.END) {
                            return constants_1.PositionWithCaret.ABOVE_END;
                          }
                          break;
                        case constants_1.YPositionWithCaret.BELOW:
                          if (xPos === constants_1.XPositionWithCaret.START) {
                            return constants_1.PositionWithCaret.BELOW_START;
                          } else if (xPos === constants_1.XPositionWithCaret.CENTER) {
                            return constants_1.PositionWithCaret.BELOW_CENTER;
                          } else if (xPos === constants_1.XPositionWithCaret.END) {
                            return constants_1.PositionWithCaret.BELOW_END;
                          }
                          break;
                        case constants_1.YPositionWithCaret.SIDE_TOP:
                          if (xPos === constants_1.XPositionWithCaret.SIDE_START) {
                            return constants_1.PositionWithCaret.TOP_SIDE_START;
                          } else if (xPos === constants_1.XPositionWithCaret.SIDE_END) {
                            return constants_1.PositionWithCaret.TOP_SIDE_END;
                          }
                          break;
                        case constants_1.YPositionWithCaret.SIDE_CENTER:
                          if (xPos === constants_1.XPositionWithCaret.SIDE_START) {
                            return constants_1.PositionWithCaret.CENTER_SIDE_START;
                          } else if (xPos === constants_1.XPositionWithCaret.SIDE_END) {
                            return constants_1.PositionWithCaret.CENTER_SIDE_END;
                          }
                          break;
                        case constants_1.YPositionWithCaret.SIDE_BOTTOM:
                          if (xPos === constants_1.XPositionWithCaret.SIDE_START) {
                            return constants_1.PositionWithCaret.BOTTOM_SIDE_START;
                          } else if (xPos === constants_1.XPositionWithCaret.SIDE_END) {
                            return constants_1.PositionWithCaret.BOTTOM_SIDE_END;
                          }
                          break;
                        default:
                          break;
                      }
                      throw new Error("MDCTooltipFoundation: Invalid caret position of " + xPos + ", " + yPos);
                    };
                    MDCTooltipFoundation2.prototype.setCaretPositionStyles = function(position, caretSize) {
                      var e_7, _a;
                      var values = this.calculateCaretPositionOnTooltip(position, caretSize);
                      if (!values) {
                        return { yTransformOrigin: 0, xTransformOrigin: 0 };
                      }
                      this.adapter.clearTooltipCaretStyles();
                      this.adapter.setTooltipCaretStyle(values.yAlignment, values.yAxisPx);
                      this.adapter.setTooltipCaretStyle(values.xAlignment, values.xAxisPx);
                      var skewRadians = values.skew * (Math.PI / 180);
                      var scaleX = Math.cos(skewRadians);
                      this.adapter.setTooltipCaretStyle("transform", "rotate(" + values.rotation + "deg) skewY(" + values.skew + "deg) scaleX(" + scaleX + ")");
                      this.adapter.setTooltipCaretStyle("transform-origin", values.xAlignment + " " + values.yAlignment);
                      try {
                        for (var _b = __values(values.caretCorners), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var corner = _c.value;
                          this.adapter.setTooltipCaretStyle(corner, "0");
                        }
                      } catch (e_7_1) {
                        e_7 = { error: e_7_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_7)
                            throw e_7.error;
                        }
                      }
                      return {
                        yTransformOrigin: values.yTransformOrigin,
                        xTransformOrigin: values.xTransformOrigin
                      };
                    };
                    MDCTooltipFoundation2.prototype.calculateCaretPositionOnTooltip = function(tooltipPos, caretSize) {
                      var isLTR = !this.adapter.isRTL();
                      var tooltipWidth = this.adapter.getComputedStyleProperty("width");
                      var tooltipHeight = this.adapter.getComputedStyleProperty("height");
                      if (!tooltipWidth || !tooltipHeight || !caretSize) {
                        return;
                      }
                      var midpointWidth = "calc((" + tooltipWidth + " - " + caretSize.caretWidth + "px) / 2)";
                      var midpointHeight = "calc((" + tooltipHeight + " - " + caretSize.caretWidth + "px) / 2)";
                      var flushWithEdge = "0";
                      var indentedFromEdge = constants_1.numbers.CARET_INDENTATION + "px";
                      var indentedFromWidth = "calc(" + tooltipWidth + " - " + indentedFromEdge + ")";
                      var indentedFromHeight = "calc(" + tooltipHeight + " - " + indentedFromEdge + ")";
                      var verticalRotation = 35;
                      var horizontalRotation = Math.abs(90 - verticalRotation);
                      var bottomRightTopLeftBorderRadius = ["border-bottom-right-radius", "border-top-left-radius"];
                      var bottomLeftTopRightBorderRadius = ["border-bottom-left-radius", "border-top-right-radius"];
                      var skewDeg = 20;
                      switch (tooltipPos) {
                        case constants_1.PositionWithCaret.BELOW_CENTER:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: constants_1.strings.LEFT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: midpointWidth,
                            rotation: -1 * verticalRotation,
                            skew: -1 * skewDeg,
                            xTransformOrigin: midpointWidth,
                            yTransformOrigin: flushWithEdge,
                            caretCorners: bottomRightTopLeftBorderRadius
                          };
                        case constants_1.PositionWithCaret.BELOW_END:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: indentedFromEdge,
                            rotation: isLTR ? verticalRotation : -1 * verticalRotation,
                            skew: isLTR ? skewDeg : -1 * skewDeg,
                            xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
                            yTransformOrigin: flushWithEdge,
                            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
                          };
                        case constants_1.PositionWithCaret.BELOW_START:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: indentedFromEdge,
                            rotation: isLTR ? -1 * verticalRotation : verticalRotation,
                            skew: isLTR ? -1 * skewDeg : skewDeg,
                            xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
                            yTransformOrigin: flushWithEdge,
                            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
                          };
                        case constants_1.PositionWithCaret.TOP_SIDE_END:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT,
                            yAxisPx: indentedFromEdge,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
                            skew: isLTR ? -1 * skewDeg : skewDeg,
                            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
                            yTransformOrigin: indentedFromEdge,
                            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
                          };
                        case constants_1.PositionWithCaret.CENTER_SIDE_END:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT,
                            yAxisPx: midpointHeight,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
                            skew: isLTR ? -1 * skewDeg : skewDeg,
                            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
                            yTransformOrigin: midpointHeight,
                            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
                          };
                        case constants_1.PositionWithCaret.BOTTOM_SIDE_END:
                          return {
                            yAlignment: constants_1.strings.BOTTOM,
                            xAlignment: isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT,
                            yAxisPx: indentedFromEdge,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
                            skew: isLTR ? skewDeg : -1 * skewDeg,
                            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
                            yTransformOrigin: indentedFromHeight,
                            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
                          };
                        case constants_1.PositionWithCaret.TOP_SIDE_START:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT,
                            yAxisPx: indentedFromEdge,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
                            skew: isLTR ? skewDeg : -1 * skewDeg,
                            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
                            yTransformOrigin: indentedFromEdge,
                            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
                          };
                        case constants_1.PositionWithCaret.CENTER_SIDE_START:
                          return {
                            yAlignment: constants_1.strings.TOP,
                            xAlignment: isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT,
                            yAxisPx: midpointHeight,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
                            skew: isLTR ? skewDeg : -1 * skewDeg,
                            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
                            yTransformOrigin: midpointHeight,
                            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
                          };
                        case constants_1.PositionWithCaret.BOTTOM_SIDE_START:
                          return {
                            yAlignment: constants_1.strings.BOTTOM,
                            xAlignment: isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT,
                            yAxisPx: indentedFromEdge,
                            xAxisPx: flushWithEdge,
                            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
                            skew: isLTR ? -1 * skewDeg : skewDeg,
                            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
                            yTransformOrigin: indentedFromHeight,
                            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
                          };
                        case constants_1.PositionWithCaret.ABOVE_CENTER:
                          return {
                            yAlignment: constants_1.strings.BOTTOM,
                            xAlignment: constants_1.strings.LEFT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: midpointWidth,
                            rotation: verticalRotation,
                            skew: skewDeg,
                            xTransformOrigin: midpointWidth,
                            yTransformOrigin: tooltipHeight,
                            caretCorners: bottomLeftTopRightBorderRadius
                          };
                        case constants_1.PositionWithCaret.ABOVE_END:
                          return {
                            yAlignment: constants_1.strings.BOTTOM,
                            xAlignment: isLTR ? constants_1.strings.RIGHT : constants_1.strings.LEFT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: indentedFromEdge,
                            rotation: isLTR ? -1 * verticalRotation : verticalRotation,
                            skew: isLTR ? -1 * skewDeg : skewDeg,
                            xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
                            yTransformOrigin: tooltipHeight,
                            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
                          };
                        default:
                        case constants_1.PositionWithCaret.ABOVE_START:
                          return {
                            yAlignment: constants_1.strings.BOTTOM,
                            xAlignment: isLTR ? constants_1.strings.LEFT : constants_1.strings.RIGHT,
                            yAxisPx: flushWithEdge,
                            xAxisPx: indentedFromEdge,
                            rotation: isLTR ? verticalRotation : -1 * verticalRotation,
                            skew: isLTR ? skewDeg : -1 * skewDeg,
                            xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
                            yTransformOrigin: tooltipHeight,
                            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
                          };
                      }
                    };
                    MDCTooltipFoundation2.prototype.clearShowTimeout = function() {
                      if (this.showTimeout) {
                        clearTimeout(this.showTimeout);
                        this.showTimeout = null;
                      }
                    };
                    MDCTooltipFoundation2.prototype.clearHideTimeout = function() {
                      if (this.hideTimeout) {
                        clearTimeout(this.hideTimeout);
                        this.hideTimeout = null;
                      }
                    };
                    MDCTooltipFoundation2.prototype.attachScrollHandler = function(addEventListenerFn) {
                      var _this = this;
                      this.addAncestorScrollEventListeners.push(function() {
                        addEventListenerFn("scroll", _this.windowScrollHandler);
                      });
                    };
                    MDCTooltipFoundation2.prototype.removeScrollHandler = function(removeEventHandlerFn) {
                      var _this = this;
                      this.removeAncestorScrollEventListeners.push(function() {
                        removeEventHandlerFn("scroll", _this.windowScrollHandler);
                      });
                    };
                    MDCTooltipFoundation2.prototype.destroy = function() {
                      var e_8, _a;
                      if (this.frameId) {
                        cancelAnimationFrame(this.frameId);
                        this.frameId = null;
                      }
                      this.clearHideTimeout();
                      this.clearShowTimeout();
                      this.adapter.removeClass(SHOWN);
                      this.adapter.removeClass(SHOWING_TRANSITION);
                      this.adapter.removeClass(SHOWING);
                      this.adapter.removeClass(HIDE);
                      this.adapter.removeClass(HIDE_TRANSITION);
                      if (this.richTooltip) {
                        this.adapter.deregisterEventHandler("focusout", this.richTooltipFocusOutHandler);
                      }
                      if (!this.persistentTooltip) {
                        this.adapter.deregisterEventHandler("mouseenter", this.tooltipMouseEnterHandler);
                        this.adapter.deregisterEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
                      }
                      this.adapter.deregisterAnchorEventHandler("blur", this.anchorBlurHandler);
                      this.adapter.deregisterDocumentEventHandler("click", this.documentClickHandler);
                      this.adapter.deregisterDocumentEventHandler("keydown", this.documentKeydownHandler);
                      this.adapter.deregisterWindowEventHandler("scroll", this.windowScrollHandler);
                      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
                      try {
                        for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var fn = _c.value;
                          fn();
                        }
                      } catch (e_8_1) {
                        e_8 = { error: e_8_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_8)
                            throw e_8.error;
                        }
                      }
                      this.animFrame.cancelAll();
                    };
                    return MDCTooltipFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTooltipFoundation = MDCTooltipFoundation;
                exports2.default = MDCTooltipFoundation;
              }
            ),
            /***/
            "./packages/mdc-tooltip/index.ts": (
              /*!***************************************!*\
                !*** ./packages/mdc-tooltip/index.ts ***!
                \***************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-tooltip/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-tooltip/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-tooltip/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-tooltip/constants.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/adapter.ts": (
              /*!*********************************************!*\
                !*** ./packages/mdc-top-app-bar/adapter.ts ***!
                \*********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/component.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-top-app-bar/component.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __values = this && this.__values || function(o) {
                  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                  if (m)
                    return m.call(o);
                  if (o && typeof o.length === "number")
                    return {
                      next: function next() {
                        if (o && i >= o.length)
                          o = void 0;
                        return { value: o && o[i++], done: !o };
                      }
                    };
                  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTopAppBar = void 0;
                var component_1 = __webpack_require__(
                  /*! @material/base/component */
                  "./packages/mdc-base/component.ts"
                );
                var component_2 = __webpack_require__(
                  /*! @material/ripple/component */
                  "./packages/mdc-ripple/component.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ./fixed/foundation */
                  "./packages/mdc-top-app-bar/fixed/foundation.ts"
                );
                var foundation_2 = __webpack_require__(
                  /*! ./short/foundation */
                  "./packages/mdc-top-app-bar/short/foundation.ts"
                );
                var foundation_3 = __webpack_require__(
                  /*! ./standard/foundation */
                  "./packages/mdc-top-app-bar/standard/foundation.ts"
                );
                var MDCTopAppBar = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTopAppBar2, _super);
                    function MDCTopAppBar2() {
                      return _super !== null && _super.apply(this, arguments) || this;
                    }
                    MDCTopAppBar2.attachTo = function(root) {
                      return new MDCTopAppBar2(root);
                    };
                    MDCTopAppBar2.prototype.initialize = function(rippleFactory) {
                      if (rippleFactory === void 0) {
                        rippleFactory = function rippleFactory2(el) {
                          return component_2.MDCRipple.attachTo(el);
                        };
                      }
                      this.navIcon = this.root.querySelector(constants_1.strings.NAVIGATION_ICON_SELECTOR);
                      var icons = [].slice.call(this.root.querySelectorAll(constants_1.strings.ACTION_ITEM_SELECTOR));
                      if (this.navIcon) {
                        icons.push(this.navIcon);
                      }
                      this.iconRipples = icons.map(function(icon) {
                        var ripple = rippleFactory(icon);
                        ripple.unbounded = true;
                        return ripple;
                      });
                      this.scrollTarget = window;
                    };
                    MDCTopAppBar2.prototype.initialSyncWithDOM = function() {
                      this.handleNavigationClick = this.foundation.handleNavigationClick.bind(this.foundation);
                      this.handleWindowResize = this.foundation.handleWindowResize.bind(this.foundation);
                      this.handleTargetScroll = this.foundation.handleTargetScroll.bind(this.foundation);
                      this.scrollTarget.addEventListener("scroll", this.handleTargetScroll);
                      if (this.navIcon) {
                        this.navIcon.addEventListener("click", this.handleNavigationClick);
                      }
                      var isFixed = this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS);
                      var isShort = this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS);
                      if (!isShort && !isFixed) {
                        window.addEventListener("resize", this.handleWindowResize);
                      }
                    };
                    MDCTopAppBar2.prototype.destroy = function() {
                      var e_1, _a;
                      try {
                        for (var _b = __values(this.iconRipples), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var iconRipple = _c.value;
                          iconRipple.destroy();
                        }
                      } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                      } finally {
                        try {
                          if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                        } finally {
                          if (e_1)
                            throw e_1.error;
                        }
                      }
                      this.scrollTarget.removeEventListener("scroll", this.handleTargetScroll);
                      if (this.navIcon) {
                        this.navIcon.removeEventListener("click", this.handleNavigationClick);
                      }
                      var isFixed = this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS);
                      var isShort = this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS);
                      if (!isShort && !isFixed) {
                        window.removeEventListener("resize", this.handleWindowResize);
                      }
                      _super.prototype.destroy.call(this);
                    };
                    MDCTopAppBar2.prototype.setScrollTarget = function(target) {
                      this.scrollTarget.removeEventListener("scroll", this.handleTargetScroll);
                      this.scrollTarget = target;
                      this.handleTargetScroll = this.foundation.handleTargetScroll.bind(this.foundation);
                      this.scrollTarget.addEventListener("scroll", this.handleTargetScroll);
                    };
                    MDCTopAppBar2.prototype.getDefaultFoundation = function() {
                      var _this = this;
                      var adapter = {
                        hasClass: function hasClass(className) {
                          return _this.root.classList.contains(className);
                        },
                        addClass: function addClass(className) {
                          return _this.root.classList.add(className);
                        },
                        removeClass: function removeClass(className) {
                          return _this.root.classList.remove(className);
                        },
                        setStyle: function setStyle(property, value) {
                          return _this.root.style.setProperty(property, value);
                        },
                        getTopAppBarHeight: function getTopAppBarHeight() {
                          return _this.root.clientHeight;
                        },
                        notifyNavigationIconClicked: function notifyNavigationIconClicked() {
                          return _this.emit(constants_1.strings.NAVIGATION_EVENT, {});
                        },
                        getViewportScrollY: function getViewportScrollY() {
                          var win = _this.scrollTarget;
                          var el = _this.scrollTarget;
                          return win.pageYOffset !== void 0 ? win.pageYOffset : el.scrollTop;
                        },
                        getTotalActionItems: function getTotalActionItems() {
                          return _this.root.querySelectorAll(constants_1.strings.ACTION_ITEM_SELECTOR).length;
                        }
                      };
                      var foundation;
                      if (this.root.classList.contains(constants_1.cssClasses.SHORT_CLASS)) {
                        foundation = new foundation_2.MDCShortTopAppBarFoundation(adapter);
                      } else if (this.root.classList.contains(constants_1.cssClasses.FIXED_CLASS)) {
                        foundation = new foundation_1.MDCFixedTopAppBarFoundation(adapter);
                      } else {
                        foundation = new foundation_3.MDCTopAppBarFoundation(adapter);
                      }
                      return foundation;
                    };
                    return MDCTopAppBar2;
                  }(component_1.MDCComponent)
                );
                exports2.MDCTopAppBar = MDCTopAppBar;
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/constants.ts": (
              /*!***********************************************!*\
                !*** ./packages/mdc-top-app-bar/constants.ts ***!
                \***********************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.strings = exports2.numbers = exports2.cssClasses = void 0;
                var cssClasses = {
                  FIXED_CLASS: "mdc-top-app-bar--fixed",
                  FIXED_SCROLLED_CLASS: "mdc-top-app-bar--fixed-scrolled",
                  SHORT_CLASS: "mdc-top-app-bar--short",
                  SHORT_COLLAPSED_CLASS: "mdc-top-app-bar--short-collapsed",
                  SHORT_HAS_ACTION_ITEM_CLASS: "mdc-top-app-bar--short-has-action-item"
                };
                exports2.cssClasses = cssClasses;
                var numbers = {
                  DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
                  MAX_TOP_APP_BAR_HEIGHT: 128
                };
                exports2.numbers = numbers;
                var strings = {
                  ACTION_ITEM_SELECTOR: ".mdc-top-app-bar__action-item",
                  NAVIGATION_EVENT: "MDCTopAppBar:nav",
                  NAVIGATION_ICON_SELECTOR: ".mdc-top-app-bar__navigation-icon",
                  ROOT_SELECTOR: ".mdc-top-app-bar",
                  TITLE_SELECTOR: ".mdc-top-app-bar__title"
                };
                exports2.strings = strings;
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/fixed/foundation.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-top-app-bar/fixed/foundation.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCFixedTopAppBarFoundation = void 0;
                var constants_1 = __webpack_require__(
                  /*! ../constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ../standard/foundation */
                  "./packages/mdc-top-app-bar/standard/foundation.ts"
                );
                var MDCFixedTopAppBarFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCFixedTopAppBarFoundation2, _super);
                    function MDCFixedTopAppBarFoundation2() {
                      var _this = _super !== null && _super.apply(this, arguments) || this;
                      _this.wasScrolled = false;
                      return _this;
                    }
                    MDCFixedTopAppBarFoundation2.prototype.handleTargetScroll = function() {
                      var currentScroll = this.adapter.getViewportScrollY();
                      if (currentScroll <= 0) {
                        if (this.wasScrolled) {
                          this.adapter.removeClass(constants_1.cssClasses.FIXED_SCROLLED_CLASS);
                          this.wasScrolled = false;
                        }
                      } else {
                        if (!this.wasScrolled) {
                          this.adapter.addClass(constants_1.cssClasses.FIXED_SCROLLED_CLASS);
                          this.wasScrolled = true;
                        }
                      }
                    };
                    return MDCFixedTopAppBarFoundation2;
                  }(foundation_1.MDCTopAppBarFoundation)
                );
                exports2.MDCFixedTopAppBarFoundation = MDCFixedTopAppBarFoundation;
                exports2.default = MDCFixedTopAppBarFoundation;
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/foundation.ts": (
              /*!************************************************!*\
                !*** ./packages/mdc-top-app-bar/foundation.ts ***!
                \************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                var __assign = this && this.__assign || function() {
                  __assign = Object.assign || function(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                      s = arguments[i];
                      for (var p in s) {
                        if (Object.prototype.hasOwnProperty.call(s, p))
                          t[p] = s[p];
                      }
                    }
                    return t;
                  };
                  return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTopAppBarBaseFoundation = void 0;
                var foundation_1 = __webpack_require__(
                  /*! @material/base/foundation */
                  "./packages/mdc-base/foundation.ts"
                );
                var constants_1 = __webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                );
                var MDCTopAppBarBaseFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTopAppBarBaseFoundation2, _super);
                    function MDCTopAppBarBaseFoundation2(adapter) {
                      return _super.call(this, __assign(__assign({}, MDCTopAppBarBaseFoundation2.defaultAdapter), adapter)) || this;
                    }
                    Object.defineProperty(MDCTopAppBarBaseFoundation2, "strings", {
                      get: function get() {
                        return constants_1.strings;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTopAppBarBaseFoundation2, "cssClasses", {
                      get: function get() {
                        return constants_1.cssClasses;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTopAppBarBaseFoundation2, "numbers", {
                      get: function get() {
                        return constants_1.numbers;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    Object.defineProperty(MDCTopAppBarBaseFoundation2, "defaultAdapter", {
                      /**
                       * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.
                       */
                      get: function get() {
                        return {
                          addClass: function addClass() {
                            return void 0;
                          },
                          removeClass: function removeClass() {
                            return void 0;
                          },
                          hasClass: function hasClass() {
                            return false;
                          },
                          setStyle: function setStyle() {
                            return void 0;
                          },
                          getTopAppBarHeight: function getTopAppBarHeight() {
                            return 0;
                          },
                          notifyNavigationIconClicked: function notifyNavigationIconClicked() {
                            return void 0;
                          },
                          getViewportScrollY: function getViewportScrollY() {
                            return 0;
                          },
                          getTotalActionItems: function getTotalActionItems() {
                            return 0;
                          }
                        };
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCTopAppBarBaseFoundation2.prototype.handleTargetScroll = function() {
                    };
                    MDCTopAppBarBaseFoundation2.prototype.handleWindowResize = function() {
                    };
                    MDCTopAppBarBaseFoundation2.prototype.handleNavigationClick = function() {
                      this.adapter.notifyNavigationIconClicked();
                    };
                    return MDCTopAppBarBaseFoundation2;
                  }(foundation_1.MDCFoundation)
                );
                exports2.MDCTopAppBarBaseFoundation = MDCTopAppBarBaseFoundation;
                exports2.default = MDCTopAppBarBaseFoundation;
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/index.ts": (
              /*!*******************************************!*\
                !*** ./packages/mdc-top-app-bar/index.ts ***!
                \*******************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  Object.defineProperty(o, k2, { enumerable: true, get: function get() {
                    return m[k];
                  } });
                } : function(o, m, k, k2) {
                  if (k2 === void 0)
                    k2 = k;
                  o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports3) {
                  for (var p in m) {
                    if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
                      __createBinding(exports3, m, p);
                  }
                };
                Object.defineProperty(exports2, "__esModule", { value: true });
                __exportStar(__webpack_require__(
                  /*! ./adapter */
                  "./packages/mdc-top-app-bar/adapter.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./component */
                  "./packages/mdc-top-app-bar/component.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./foundation */
                  "./packages/mdc-top-app-bar/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./fixed/foundation */
                  "./packages/mdc-top-app-bar/fixed/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./short/foundation */
                  "./packages/mdc-top-app-bar/short/foundation.ts"
                ), exports2);
                __exportStar(__webpack_require__(
                  /*! ./standard/foundation */
                  "./packages/mdc-top-app-bar/standard/foundation.ts"
                ), exports2);
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/short/foundation.ts": (
              /*!******************************************************!*\
                !*** ./packages/mdc-top-app-bar/short/foundation.ts ***!
                \******************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCShortTopAppBarFoundation = void 0;
                var constants_1 = __webpack_require__(
                  /*! ../constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ../foundation */
                  "./packages/mdc-top-app-bar/foundation.ts"
                );
                var MDCShortTopAppBarFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCShortTopAppBarFoundation2, _super);
                    function MDCShortTopAppBarFoundation2(adapter) {
                      var _this = _super.call(this, adapter) || this;
                      _this.collapsed = false;
                      _this.isAlwaysCollapsed = false;
                      return _this;
                    }
                    Object.defineProperty(MDCShortTopAppBarFoundation2.prototype, "isCollapsed", {
                      // Public visibility for backward compatibility.
                      get: function get() {
                        return this.collapsed;
                      },
                      enumerable: false,
                      configurable: true
                    });
                    MDCShortTopAppBarFoundation2.prototype.init = function() {
                      _super.prototype.init.call(this);
                      if (this.adapter.getTotalActionItems() > 0) {
                        this.adapter.addClass(constants_1.cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);
                      }
                      this.setAlwaysCollapsed(this.adapter.hasClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS));
                    };
                    MDCShortTopAppBarFoundation2.prototype.setAlwaysCollapsed = function(value) {
                      this.isAlwaysCollapsed = !!value;
                      if (this.isAlwaysCollapsed) {
                        this.collapse();
                      } else {
                        this.maybeCollapseBar();
                      }
                    };
                    MDCShortTopAppBarFoundation2.prototype.getAlwaysCollapsed = function() {
                      return this.isAlwaysCollapsed;
                    };
                    MDCShortTopAppBarFoundation2.prototype.handleTargetScroll = function() {
                      this.maybeCollapseBar();
                    };
                    MDCShortTopAppBarFoundation2.prototype.maybeCollapseBar = function() {
                      if (this.isAlwaysCollapsed) {
                        return;
                      }
                      var currentScroll = this.adapter.getViewportScrollY();
                      if (currentScroll <= 0) {
                        if (this.collapsed) {
                          this.uncollapse();
                        }
                      } else {
                        if (!this.collapsed) {
                          this.collapse();
                        }
                      }
                    };
                    MDCShortTopAppBarFoundation2.prototype.uncollapse = function() {
                      this.adapter.removeClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS);
                      this.collapsed = false;
                    };
                    MDCShortTopAppBarFoundation2.prototype.collapse = function() {
                      this.adapter.addClass(constants_1.cssClasses.SHORT_COLLAPSED_CLASS);
                      this.collapsed = true;
                    };
                    return MDCShortTopAppBarFoundation2;
                  }(foundation_1.MDCTopAppBarBaseFoundation)
                );
                exports2.MDCShortTopAppBarFoundation = MDCShortTopAppBarFoundation;
                exports2.default = MDCShortTopAppBarFoundation;
              }
            ),
            /***/
            "./packages/mdc-top-app-bar/standard/foundation.ts": (
              /*!*********************************************************!*\
                !*** ./packages/mdc-top-app-bar/standard/foundation.ts ***!
                \*********************************************************/
              /*! no static exports found */
              /***/
              function(module2, exports2, __webpack_require__) {
                "use strict";
                var __extends = this && this.__extends || function() {
                  var _extendStatics = function extendStatics(d, b) {
                    _extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
                      d2.__proto__ = b2;
                    } || function(d2, b2) {
                      for (var p in b2) {
                        if (Object.prototype.hasOwnProperty.call(b2, p))
                          d2[p] = b2[p];
                      }
                    };
                    return _extendStatics(d, b);
                  };
                  return function(d, b) {
                    if (typeof b !== "function" && b !== null)
                      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    _extendStatics(d, b);
                    function __() {
                      this.constructor = d;
                    }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                  };
                }();
                Object.defineProperty(exports2, "__esModule", { value: true });
                exports2.MDCTopAppBarFoundation = void 0;
                var constants_1 = __webpack_require__(
                  /*! ../constants */
                  "./packages/mdc-top-app-bar/constants.ts"
                );
                var foundation_1 = __webpack_require__(
                  /*! ../foundation */
                  "./packages/mdc-top-app-bar/foundation.ts"
                );
                var INITIAL_VALUE = 0;
                var MDCTopAppBarFoundation = (
                  /** @class */
                  function(_super) {
                    __extends(MDCTopAppBarFoundation2, _super);
                    function MDCTopAppBarFoundation2(adapter) {
                      var _this = _super.call(this, adapter) || this;
                      _this.wasDocked = true;
                      _this.isDockedShowing = true;
                      _this.currentAppBarOffsetTop = 0;
                      _this.isCurrentlyBeingResized = false;
                      _this.resizeThrottleId = INITIAL_VALUE;
                      _this.resizeDebounceId = INITIAL_VALUE;
                      _this.lastScrollPosition = _this.adapter.getViewportScrollY();
                      _this.topAppBarHeight = _this.adapter.getTopAppBarHeight();
                      return _this;
                    }
                    MDCTopAppBarFoundation2.prototype.destroy = function() {
                      _super.prototype.destroy.call(this);
                      this.adapter.setStyle("top", "");
                    };
                    MDCTopAppBarFoundation2.prototype.handleTargetScroll = function() {
                      var currentScrollPosition = Math.max(this.adapter.getViewportScrollY(), 0);
                      var diff = currentScrollPosition - this.lastScrollPosition;
                      this.lastScrollPosition = currentScrollPosition;
                      if (!this.isCurrentlyBeingResized) {
                        this.currentAppBarOffsetTop -= diff;
                        if (this.currentAppBarOffsetTop > 0) {
                          this.currentAppBarOffsetTop = 0;
                        } else if (Math.abs(this.currentAppBarOffsetTop) > this.topAppBarHeight) {
                          this.currentAppBarOffsetTop = -this.topAppBarHeight;
                        }
                        this.moveTopAppBar();
                      }
                    };
                    MDCTopAppBarFoundation2.prototype.handleWindowResize = function() {
                      var _this = this;
                      if (!this.resizeThrottleId) {
                        this.resizeThrottleId = setTimeout(function() {
                          _this.resizeThrottleId = INITIAL_VALUE;
                          _this.throttledResizeHandler();
                        }, constants_1.numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
                      }
                      this.isCurrentlyBeingResized = true;
                      if (this.resizeDebounceId) {
                        clearTimeout(this.resizeDebounceId);
                      }
                      this.resizeDebounceId = setTimeout(function() {
                        _this.handleTargetScroll();
                        _this.isCurrentlyBeingResized = false;
                        _this.resizeDebounceId = INITIAL_VALUE;
                      }, constants_1.numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
                    };
                    MDCTopAppBarFoundation2.prototype.checkForUpdate = function() {
                      var offscreenBoundaryTop = -this.topAppBarHeight;
                      var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop < 0;
                      var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop > offscreenBoundaryTop;
                      var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;
                      if (partiallyShowing) {
                        this.wasDocked = false;
                      } else {
                        if (!this.wasDocked) {
                          this.wasDocked = true;
                          return true;
                        } else if (this.isDockedShowing !== hasAnyPixelsOnscreen) {
                          this.isDockedShowing = hasAnyPixelsOnscreen;
                          return true;
                        }
                      }
                      return partiallyShowing;
                    };
                    MDCTopAppBarFoundation2.prototype.moveTopAppBar = function() {
                      if (this.checkForUpdate()) {
                        var offset = this.currentAppBarOffsetTop;
                        if (Math.abs(offset) >= this.topAppBarHeight) {
                          offset = -constants_1.numbers.MAX_TOP_APP_BAR_HEIGHT;
                        }
                        this.adapter.setStyle("top", offset + "px");
                      }
                    };
                    MDCTopAppBarFoundation2.prototype.throttledResizeHandler = function() {
                      var currentHeight = this.adapter.getTopAppBarHeight();
                      if (this.topAppBarHeight !== currentHeight) {
                        this.wasDocked = false;
                        this.currentAppBarOffsetTop -= this.topAppBarHeight - currentHeight;
                        this.topAppBarHeight = currentHeight;
                      }
                      this.handleTargetScroll();
                    };
                    return MDCTopAppBarFoundation2;
                  }(foundation_1.MDCTopAppBarBaseFoundation)
                );
                exports2.MDCTopAppBarFoundation = MDCTopAppBarFoundation;
                exports2.default = MDCTopAppBarFoundation;
              }
            )
            /******/
          })
        );
      });
    }
  });

  // app/templates/js/main.js
  mdc = require_material_components_web();
  mdc.autoInit();
  var drawer = document.getElementById("nav-drawer").MDCDrawer;
  var top_app_bar = document.getElementById("app-bar").MDCTopAppBar;
  top_app_bar.setScrollTarget(document.getElementById("main-content"));
  top_app_bar.listen("MDCTopAppBar:nav", () => {
    drawer.open = !drawer.open;
  });
  var snackbar = document.querySelector(".mdc-snackbar");
  if (snackbar) {
    snackbar.MDCSnackbar.open();
    let snackbar_dismiss_button = snackbar.querySelector("button.mdc-snackbar__dismiss");
    snackbar_dismiss_button.addEventListener("click", () => {
      snackbar.MDCSnackbar.close();
    });
  }
})();
/*! Bundled license information:

material-components-web/dist/material-components-web.js:
  (**
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://github.com/material-components/material-components-web/blob/master/LICENSE
   *)
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
